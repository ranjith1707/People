var ZPUtil = {
    ERRORBOX_TIME: null,
    ALLOWED_IMAGE_FORMAT: new Array("jpg","png","gif","jpeg"),
    IS_LOAD_BANNER_RECS: !1,
    checkIsExistInArray: function(array, value) {
        var result = !1;
        return void 0 !== array && null !== array && -1 !== array.indexOf(value) && (result = !0),
        result
    },
    removeDuplicatesFromArray: function(array) {
        var uniqueVals = [];
        return $.each(array, function(i, element) {
            -1 === uniqueVals.indexOf(element) && uniqueVals.push(element)
        }),
        uniqueVals
    },
    checkValueInArray: function(array, value, defaVal) {
        var returnVal = "";
        if (void 0 !== defaVal && (returnVal = defaVal),
        void 0 !== array && null !== array)
            for (i = 0; i < array.length; i++)
                if (value === array[i]) {
                    returnVal = value;
                    break
                }
        return returnVal
    },
    getCommonElementsInArrays: function(array1, array2) {
        return $.grep(array1, function(element) {
            return -1 !== $.inArray(element, array2)
        })
    },
    getDistinctElementsInArrays: function(array1, array2) {
        return $.grep(array1, function(element) {
            return -1 === $.inArray(element, array2)
        })
    },
    createDomElementWithAttr: function(element, attributes) {
        var ele = document.createElement(element);
        for (var attr in attributes)
            ele.setAttribute(attr, attributes[attr]);
        return ele
    },
    getDecimalLength: function(value) {
        var result = {
            decimalLength: 0,
            message: "SUCCESS"
        };
        if (-1 !== (value += "").indexOf(".")) {
            var decimalPoints = value.slice(value.indexOf(".") + 1, value.length);
            isNaN(decimalPoints) ? (result.message = "INVALID_CHAR",
            result.errorCode = ZPForm.Validation.INVALID_DECIMALPOINT) : result.decimalLength = decimalPoints.length
        } else
            isNaN(value) && (result.message = "INVALID_CHAR",
            result.errorCode = ZPForm.Validation.INVALID_DECIMALPOINT);
        return result
    },
    isIE: function() {
        var userAgent = navigator.userAgent;
        return -1 !== userAgent.indexOf("MSIE") || -1 !== userAgent.indexOf("Trident/") && -1 !== userAgent.indexOf("rv:11") || -1 !== userAgent.indexOf("Edge/")
    },
    getFileSize: function(fieldObj) {
        try {
            var documentMode = document.documentMode;
            if ((void 0 === documentMode || documentMode > 9) && void 0 !== fieldObj.files && void 0 !== fieldObj.files[0])
                return fieldObj.files[0].size
        } catch (e) {}
        return 0
    },
    isAllowedFormatForImage: function(imageVal) {
        if (void 0 !== imageVal && "" !== imageVal.trim()) {
            var imageFormat = imageVal.substring(imageVal.lastIndexOf(".") + 1, imageVal.length).toLowerCase();
            return this.checkIsExistInArray(this.ALLOWED_IMAGE_FORMAT, imageFormat)
        }
    },
    isFileSizeExceed: function(fileObj, fieldType, isprofile) {
        var fileSize = ZPUtil.getFileSize(fileObj[0]);
        return !!(fieldType === ZPForm.Field.FILE_UPLOAD && fileSize > 5242880 || (isprofile || fieldType === ZPForm.Field.IMAGE) && fileSize > 2097152)
    },
    isInRange: function(val, min, max) {
        return !isNaN(val) && val >= min && val <= max
    },
    checkLineBreaksInContent: function(content) {
        var stringArr = content.split("\n")
          , returnContent = "";
        for (i = 0; i < stringArr.length; i++) {
            var string = stringArr[i];
            "" !== string.trim() && (returnContent += string + "\n")
        }
        return returnContent
    },
    markInputError: function(Obj) {
        null != ZPUtil.ERRORBOX_TIME && clearTimeout(ZPUtil.ERRORBOX_TIME),
        $(Obj).addClass("error-clr"),
        $(Obj).on("keyup", function() {
            ZPUtil.resetInputError(Obj)
        }),
        ZPUtil.ERRORBOX_TIME = setTimeout(function() {
            ZPUtil.resetInputError(Obj)
        }, 3e3)
    },
    resetInputError: function(Obj) {
        ZPUtil.ERRORBOX_TIME = null,
        $(Obj).removeClass("error-clr")
    },
    escapeSelector: function(string) {
        return string.replace(/([;&,\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, "\\$1")
    },
    escapeSpecialCharInId: function(id) {
        return id.replace(/([;&,\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, "\\$1")
    },
    checkLineBreaksInContent: function(content) {
        var stringArr = content.split("\n")
          , contiLBCnt = 0
          , returnContent = "";
        for (i = 0; i < stringArr.length; i++) {
            var string = stringArr[i];
            "" === string.trim() ? 0 === contiLBCnt && (contiLBCnt++,
            returnContent += "\n") : (contiLBCnt = 0,
            returnContent += string + "\n")
        }
        return returnContent
    },
    registerFileInput: function() {
        Layout.Page.container.find("input[type=file]").on("change", function() {
            ZPUtil.fileFieldChange(this)
        })
    },
    newUifileFieldChange: function(Obj) {
        var FileNames = [];
        if (Obj.files.length > 5)
            return ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.maxfileupload")),
            null;
        for (var i = 0; i < Obj.files.length; i++) {
            var filename = Obj.files[i].name.replace("C:\\fakepath\\", "")
              , fName = filename;
            fName.length > 40 && (fName = filename.slice(0, 40) + " ..."),
            FileNames.push(fName)
        }
        return FileNames
    },
    fileFieldChange: function(Obj) {
        var filename = $(Obj).val().replace("C:\\fakepath\\", "")
          , fName = filename;
        return fName.length > 40 && (fName = filename.slice(0, 40) + " ..."),
        $(Obj).siblings("span#drop_file").text(fName),
        filename
    },
    escapeHtml: function(string) {
        return string = (string = (string = string.replace(/&/g, "&amp;")).replace(/</g, "&lt;")).replace(/>/g, "&gt;")
    },
    onblurofbody: function() {
        null == ZPeople.OPENMODAL && $(".modal-backdrop").remove(),
        $("body").append('<div class="modal-backdrop  in"></div> ')
    },
    commonfeedbackformSuccess: function(result) {
        ZPUtil.closefeedbackCombo(),
        "SUCCESS" == result && ZPeople.Message.showSuccessMsg(ZPI18N.getString("zp.feedbacksuccess")),
        "ERROR" == result && ZPeople.Message.showFailureMsg(ZPI18N.getString("zp.feedbackerror"))
    },
    feedBackAlert: function(event) {
        var rating = 5;
        if (ZPUtil.onblurofbody(),
        $("#feedbackBox")[0])
            $("#feedbackBox")[0] && ZPUtil.closefeedbackCombo();
        else {
            $("#announceNotify").hasClass("in") && $("#announceNotify").length > 0 && (ZPUtil.closeAnnouncementBox(),
            ZPUtil.onblurofbody());
            var feedbackDiv = '<div id="feedbackBox" class="dropdown-menu ZPCusPd feedrop ZP_livcht"><i class="IC-cls red CP ZP-closeBtn" onclick="ZPUtil.closefeedbackCombo();"></i><iframe style="display:none;" src="/people/html/blank.html"  name="commonfeedbackform" scrolling="auto" width="0" height="0" frameborder="0" ></iframe><form class="feemain" id="feedbackDetails" name="feedbackDetails" role="form" method="post" target="commonfeedbackform" enctype="multipart/form-data">' + (!ZPeople.isChinaSetup && isadmin ? '<div class="Zp_chtHdr"> <h5>' + ZPI18N.getString("zp.wantlivechat", [ZPI18N.getString("zp.livechat")]) + "</h5><p>" + ZPI18N.getString("zp.livechatdesc") + '</p> <a href="https://www.zoho.com/people/support-plans.html" target="_blank">' + ZPI18N.getString("zp.sshowdetails") + ".</a> </div>" : "") + "<h4>" + ZPI18N.getString("zp.feedback") + '</h4><p class="MB15">' + ZPI18N.getString("zp.loveushateus") + '</p> <div class="form-group"><select id="feedbackCombo" name="subject" onchange="ZPUtil.bugfilefound();" ><option value="0">' + ZPI18N.getString("zp.loveyouguys") + '</option><option value="1">' + ZPI18N.getString("zp.ihaveanidea") + '</option><option  value="2">' + ZPI18N.getString("zp.needhelp") + '</option><option  value="3">' + ZPI18N.getString("zp.foundbug") + '</option></select></div><div id="findBug" class="form-group" style="display:none;"><label>' + ZPI18N.getString("zp.fileupload") + '</label><div class="ZPFFcus"><span id="drop_file"></span><input type="file" class="ZPFfile form-control" name="bugFile" id="bugFile" onchange="ZPUtil.bugfilefound();"></div></div><div class="form-group"><label>' + ZPI18N.getString("zp.tellusthink") + '</label><textarea id="feedbackmessage" name="message" rows="6" class="form-control"></textarea><p class="fb_policy">' + ZPI18N.getString("zp.fdbcknotes", [ZPeople.isChinaSetup ? "https://www.zoho.com.cn/privacy.html" : "https://www.zoho.com/privacy.html"]) + '</p></div><div class="form-group"><label>' + ZPI18N.getString("zp.rateus") + '</label><div class="clearfix"><i id="6" class="IC-star FL S14 ylw MR5"></i><i id="7" class="IC-star FL S14 ylw MR5"></i><i id="8" class="IC-star FL S14 ylw MR5"></i><i id="9" class="IC-star FL S14 ylw MR5 "></i><i id="10" class="IC-star FL S14 ylw MR5 "></i></div></div><div id="ratingLevel" style="display :none"></div><button id="feedback_send" class="btn btn-primary MR10" onclick="ZPUtil.sendfeedback(this);">' + ZPI18N.getString("zp.send") + '</button><button class="btn btn-default" onclick="ZPUtil.closefeedbackCombo();">' + ZPI18N.getString("zp.cancel") + '</button><input type="hidden" value="" name="conreqcsr" id="csrfToken"/></form></div>';
            0 == $("#zp_user_information").length && $("body").append('<div id="zp_user_information"></div>'),
            $("#zp_user_information").append(feedbackDiv),
            $("[id=drop_file]").text(ZPI18N.getString("zp.dropfilehere")),
            $("#feedbackBox").show(),
            "contactsupport" == event && ($("#feedbackCombo").val("2"),
            $("#feedbackDetails").find("h4").text(ZPI18N.getString("zp.contactsupport"))),
            $("#feedbackCombo").select2(),
            $("span#drop_file").html(ZPI18N.getString("zp.dropfiletoattach")),
            $("#ratingLevel").val(rating),
            $(".IC-star").on("click", function() {
                for (rating = 0,
                ratinglevel = this.id,
                i = 6; i <= 10; i++)
                    $("#" + ratinglevel).hasClass("IC-star FL S14 ylw MR5") ? i < ratinglevel ? ($("#" + i).attr("class", "IC-star FL S14 ylw MR5"),
                    rating += 1) : $("#" + i).attr("class", "IC-star FL S14 gry MR5") : $("#" + ratinglevel).hasClass("IC-star FL S14 gry MR5") && (i <= ratinglevel ? (rating += 1,
                    $("#" + i).attr("class", "IC-star FL S14 ylw MR5")) : $("#" + i).attr("class", "IC-star FL S14 gry MR5"));
                $("#ratingLevel").val(rating)
            }),
            $("#feedbackBox").addClass("open"),
            ZPUtil.bugfilefound()
        }
    },
    bugfilefound: function() {
        var textboxtitles = [ZPI18N.getString("zp.tellusthink"), ZPI18N.getString("zp.postsuggestion"), ZPI18N.getString("zp.postquery"), ZPI18N.getString("zp.postcomment")]
          , tilte = $("#feedbackCombo").val();
        if ($("#feedbackmessage").siblings("label").text(textboxtitles[tilte]),
        $("#findBug").is(":visible")) {
            $("#feedbackCombo :selected").text();
            var filename = $("#bugFile").val();
            null != filename && "" != filename && (filename = filename.replace("C:\\fakepath\\", ""),
            $("span#drop_file").html(filename))
        } else
            $("#findBug").is(":visible") || $("#feedbackCombo :selected").text()
    },
    closefeedbackCombo: function() {
        $("#feedbackBox").removeClass("open") && setTimeout(function() {
            $("#feedbackBox").remove()
        }, 100),
        $(".modal-backdrop")[1] ? $("div.modal-backdrop").not(":eq(0)").remove() : $(".modal-backdrop")[0] && $(".modal-backdrop").remove()
    },
    sendfeedback: function(elm) {
        $("#feedbackCombo :selected").text();
        var message = $("#feedbackmessage").val()
          , rating = $("#ratingLevel").val()
          , filename = $("#bugFile").val();
        $("#csrfToken").val(csrfToken),
        filename = filename.replace("C:\\fakepath\\", "");
        var value = !1;
        "" == message && ($("#feedbackmessage").addClass("error-clr"),
        value = !0),
        "" == filename && null == filename && void 0 == filename && (filename = ""),
        value || (0 === $("#feedbackDetails").find("[name=uimode]").length && $("#feedbackDetails").append("<input type='hidden' value='newUi' name='uimode'>"),
        $("#feedbackDetails").find("[name=rating]").length > 0 ? $("#feedbackDetails").find("[name=rating]").val(rating) : $("#feedbackDetails").append("<input type='hidden' value='" + rating + "' name='rating'>"),
        $("#feedbackDetails").attr("action", "FeedbackForm.zp"),
        $("#feedbackDetails").trigger("submit"),
        $("#feedback_send").prop("disabled", !0))
    },
    announcementAlert: function(event) {
        $(".modal-backdrop").remove(),
        $("body").append('<div class="modal-backdrop in"></div> ');
        var bannerClass = $("body").find("#zp_user_information").find("#announceNotify").attr("class");
        if (void 0 === bannerClass || -1 !== bannerClass.indexOf("zp_Nws"))
            if ($("#feedbackBox").hasClass("open") && $("#feedbackBox").length > 0 && (ZPUtil.closefeedbackCombo(),
            ZPUtil.onblurofbody()),
            ZPUtil.IS_LOAD_BANNER_RECS)
                $("#announceNotify").removeClass("DNI");
            else {
                var announceDiv = '<div class="zp_Nws DNI" id="announceNotify"> <div class="zp_NwIn"> <div class="zp_NwHd"> <h2>' + ZPI18N.getString("zp.news") + '</h2> <i class="IC-cls"  onclick="ZPUtil.closeAnnouncementBox(this)"></i> </div> <div class="zp_NwBdy" id="bannerList"> </div> </div> </div>';
                0 == $("#zp_user_information").length && $("body").append('<div id="zp_user_information"></div>'),
                $("#zp_user_information").append(announceDiv),
                $("#announceNotify").removeClass("DNI"),
                $("#bannerList").append('<div class="ctable" id="zp_page_loading" style="margin-top:10px"><div class="ctcell"><div class="loader-inner line-scale"><div></div><div></div><div></div><div></div><div></div></div></div></div>');
                var params = {
                    mode: "GET_BOTTOMBANNER_RECORDS",
                    conreqcsr: csrfToken
                };
                ZPeople.Request.send("/commonAction.zp", params, function(resultData) {
                    if (resultData.bannerDetails) {
                        var latestId, bannerDetails = resultData.bannerDetails, length = bannerDetails.length;
                        bannerDetails = ZPUtil.sortByKey(bannerDetails, "updation_info");
                        for (var i = 0; i < length; i++) {
                            var bannerDetail = bannerDetails[i]
                              , msg = ZPeople.decodeTxt(bannerDetail.message);
                            if (msg.length > 90) {
                                (msg = msg.substring(0, 250)).length > 250 && (msg += "...")
                            }
                            msg = ZPeople.escapeHtml(msg),
                            1 == bannerDetail.isappend && (latestId = bannerDetail.id);
                            var html = '<div class="zp_bDcnt"> <h3>' + bannerDetail.title + "</h3> <p>" + msg + '</p> <div class="zp_bDimg">' + ("null" != bannerDetail.imgId ? '<img src="/viewBannerAnnouncePhoto?filename=' + bannerDetail.imgId + '" alt="' + ZPI18N.getString("zp.news") + '" title="" style="">' : "") + '</div> <div class="zp_bdLnks"> <ul id="clickaction"></ul> <span>' + bannerDetail.addedDate + "</span> </div> </div>";
                            html = $(html);
                            var temp = "";
                            if (void 0 !== bannerDetail.link && "undefined" !== bannerDetail.link && 0 != bannerDetail.link.trim().length && ((temp = $('<li class="actionli"><a href="javascript:;">' + ZPI18N.getString("zp.readmore") + "</a></li>")).attr("link", bannerDetail.link),
                            temp.attr("btitle", bannerDetail.title),
                            $(html).find("ul").append(temp)),
                            void 0 !== bannerDetail.onblink && "undefined" !== bannerDetail.onblink && 0 != bannerDetail.onblink.trim().length && ((temp = $('<li class="actionli"><a href="javascript:;">' + ZPI18N.getString("zp.onboardfeature") + "</a></li>")).attr("link", bannerDetail.onblink),
                            temp.attr("btitle", bannerDetail.title),
                            $(html).find("ul").append(temp)),
                            void 0 !== bannerDetail.flink && "undefined" !== bannerDetail.flink && 0 != bannerDetail.flink.trim().length)
                                (temp = $('<li class="actionli"><a href="javascript:;">' + ZPI18N.getString("zp.registernow") + "</a></li>")).attr("link", bannerDetail.flink),
                                temp.attr("btitle", bannerDetail.title),
                                $(html).find("ul").append(temp);
                            bannerDetail.isappend ? $("#bannerList").prepend(html) : $("#bannerList").append(html)
                        }
                        if (length > 0) {
                            $("#bannerList").find("li[class='actionli']").on("click", function() {
                                ZPUtil.openBottomBannerLink($(this).attr("btitle"), $(this).attr("link"))
                            });
                            var lastBannerId = ZPeople.getCookie("People_BottomBanner");
                            void 0 == latestId && (latestId = bannerDetails[0].id),
                            void 0 !== lastBannerId && lastBannerId == latestId || ZPeople.setinCookie("People_BottomBanner", latestId, 365)
                        }
                    } else
                        $("#bannerList").find("#noAnnounce").css("display", "block");
                    $("#footerOptions").find("#announce").find("b").remove(),
                    $("#bannerList").find("#zp_page_loading").remove(),
                    $("#bannerList").css("display", "block"),
                    ZPUtil.IS_LOAD_BANNER_RECS = !0
                })
            }
        else
            $(".modal-backdrop").remove(),
            $("#announceNotify").addClass("DNI")
    },
    openBottomBannerLink: function(bannerName, link) {
        void 0 != bannerName && void 0 !== link && (ZPeople.Request.send("/commonAction.zp", {
            mode: "TRACK_BANNER_CLICKS",
            bannerName: bannerName
        }),
        window.open(link).opener = null)
    },
    sortByKey: function(array, key) {
        return array.sort(function(a, b) {
            var x = a[key]
              , y = b[key];
            return x < y ? -1 : x > y ? 1 : 0
        })
    },
    closeAnnouncementBox: function(event) {
        $(".modal-backdrop").remove(),
        $("#announceNotify").addClass("DNI")
    },
    showHidePasteReview: function(show) {
        show ? Layout.Page.container.find("#zp_paste_review").removeClass("DN") : Layout.Page.container.find("#zp_paste_review").addClass("DN")
    },
    submitReviewForTrialExtn: function(ele) {
        var params = {
            mode: "SUBMIT_REVIEW_TRIALEXTENSION"
        };
        params.reviewlink = Layout.Page.container.find("input#reviewlink").val(),
        ZPUtil.Validation.isEmpty(params.reviewlink) || ZPeople.Request.send("/commonAction.zp", params, function(resp) {
            resp.success && (ZPeople.Message.showSuccessMsg(ZPI18N.getString("zp.reviewlinksubmitted")),
            ZPUtil.showHidePasteReview(),
            Layout.Page.container.find("input#reviewlink").val(""))
        })
    },
    mergeArrays: function(arr1, arr2, removeDup, isBeg) {
        if (void 0 !== arr1 && void 0 !== arr2) {
            if (removeDup) {
                var repArr = arr1.slice(0);
                isBeg && (repArr = repArr.reverse());
                for (var arrCnt = 0; arrCnt < repArr.length; arrCnt++)
                    -1 === arr2.indexOf(repArr[arrCnt]) && (isBeg ? arr2.unshift(repArr[arrCnt]) : arr2.push(repArr[arrCnt]));
                return arr2
            }
            return arr1.concat(arr2)
        }
        return []
    },
    sortByJSONValue: function(jsonObj, key, asc) {
        var tempArr = [];
        return $.each(jsonObj, function(key, value) {
            tempArr.push(value)
        }),
        tempArr = tempArr.sort(function(a, b) {
            return asc ? a[key] - b[key] : b[key] - a[key]
        })
    },
    changeFavicon: function() {
        var link = document.createElement("link")
          , oldLink = document.getElementById("dynamic-favicon");
        link.id = "dynamic-favicon",
        link.rel = "shortcut icon",
        link.href = favicon || newUIImageUrl + iconName,
        oldLink && document.head.removeChild(oldLink),
        document.head.appendChild(link)
    },
    newNoDataHTML: function(classname, path, message, container, id, buttonHTML, parentdivclass) {
        var nodata = '<div class="ZPNdata ' + (void 0 !== parentdivclass ? parentdivclass : "") + '" id="' + (void 0 !== id ? id : "") + '"><i class="' + (ZPUtil.Validation.isEmpty(classname) ? "CR-nodata" : classname) + '">';
        path = void 0 !== path && path > 0 ? path : 8;
        for (var i = 1; i <= path; i++)
            nodata += '<i class="path' + i + '"></i>';
        if (nodata += ' </i><h5 id="zp_views_nodata">' + (ZPUtil.Validation.isEmpty(message) ? ZPI18N.getString("zp.nodatafound") : message) + "</h5>" + (void 0 !== buttonHTML ? buttonHTML : "") + "</div>",
        !(void 0 !== container && container.length > 0))
            return nodata;
        container.append(nodata)
    },
    noDataSVG: function(id, imgURL, className, notDataElement, append) {
        $.get(imgURL, function(data) {
            var svg = $($(data).find("svg"));
            className || (className = "ZPsvg"),
            !(svg = (svg = svg.attr("class", className)).removeAttr("xmlns:a")).attr("viewBox") && svg.attr("height") && svg.attr("width") && svg.attr("viewBox", "0 0 " + svg.attr("height") + " " + svg.attr("width")),
            void 0 !== notDataElement ? !0 === append ? notDataElement.append(svg) : !1 === append ? notDataElement.prepend(svg) : notDataElement.html(svg) : Layout.Page.container.find("#" + id).html(svg)
        }, "xml")
    },
    SVG_LIST: {},
    showNoData: function(id, imgURL, className, notDataElement) {
        var svg = ZPUtil.SVG_LIST[id];
        void 0 === svg ? $.get(imgURL, function(data) {
            svg = $($(data).find("svg")),
            className || (className = "ZPsvg"),
            !(svg = (svg = svg.attr("class", className)).removeAttr("xmlns:a")).attr("viewBox") && svg.attr("height") && svg.attr("width") && svg.attr("viewBox", "0 0 " + svg.attr("height") + " " + svg.attr("width")),
            void 0 !== notDataElement ? notDataElement.html(svg) : (ZPUtil.SVG_LIST[id] = svg,
            Layout.Page.container.find("#" + id).html(svg))
        }, "xml") : Layout.Page.container.find("#" + id).html(svg)
    },
    showNoDataWithAsync: function(id, imgURL, className, notDataElement) {
        var svg = ZPUtil.SVG_LIST[id];
        void 0 === svg ? $.ajax({
            url: imgURL,
            type: "GET",
            async: !1,
            success: function(data) {
                svg = $($(data).find("svg")),
                className || (className = "ZPsvg"),
                !(svg = (svg = svg.attr("class", className)).removeAttr("xmlns:a")).attr("viewBox") && svg.attr("height") && svg.attr("width") && svg.attr("viewBox", "0 0 " + svg.attr("height") + " " + svg.attr("width")),
                void 0 !== notDataElement ? notDataElement.html(svg) : (ZPUtil.SVG_LIST[id] = svg,
                Layout.Page.container.find("#" + id).html(svg))
            },
            dataType: "xml"
        }) : Layout.Page.container.find("#" + id).html(svg)
    },
    formatBytes: function(bytes) {
        if (void 0 != bytes) {
            if (bytes < 1024)
                return bytes + " Bytes";
            if (bytes < 1048576)
                return (bytes / 1024).toFixed(2) + " KB";
            if (bytes < 1073741824)
                return (bytes / 1048576).toFixed(2) + " MB"
        }
    },
    checkIsEqualArrays: function(arr1, arr2) {
        if (arr1.length !== arr2.length)
            return !1;
        var eqCnt = 0;
        for (var i in arr1) {
            if (-1 === arr2.indexOf(arr1[i]))
                return !1;
            eqCnt++
        }
        return 0 !== eqCnt && arr1.length === arr2.length && eqCnt === arr1.length
    },
    initZEditor: function(isMiniEditor, isFontFamilyEnabled, isFontEnabled, isSmileyEnabled, isVideoNeeded, isPostMessage) {
        !0 === isMiniEditor ? !ZPeople.isZPNewUI() && ZPFeeds.SINGLEPOP ? ZE_Init.init([[["bold", ZPI18N.getString("zp.bold"), "zei-bold"], ["italic", ZPI18N.getString("zp.italic"), "zei-italic"], ["underline", ZPI18N.getString("zp.underline"), "zei-underline"], ["strikethrough", ZPI18N.getString("zp.strikethrough"), "zei-strike"]], [["listoptions", ZPI18N.getString("zp.listoptions"), "zei-unorder"]], [["smiley", ZPI18N.getString("zp.insertsmiley"), "zei-smiley"]]]) : !1 === isFontFamilyEnabled ? !1 === isFontEnabled ? ZE_Init.init([[["bold", ZPI18N.getString("zp.bold"), "zei-bold"], ["italic", ZPI18N.getString("zp.italic"), "zei-italic"], ["underline", ZPI18N.getString("zp.underline"), "zei-underline"], ["strikethrough", ZPI18N.getString("zp.strikethrough"), "zei-strike"]], [["forecolor", ZPI18N.getString("zp.fontcolor"), "zei-textclr"], ["backcolor", ZPI18N.getString("zp.bgclr"), "zei-bgclr"]], [["alignoptions", ZPI18N.getString("zp.fontstyleoptions"), "zei-textleft"], ["listoptions", ZPI18N.getString("zp.listoptions"), "zei-unorder"], ["indentoptions", ZPI18N.getString("zp.indentoptions"), "zei-outdent"]], [["image", ZPI18N.getString("zp.insertimage"), "zei-image"], ["link", ZPI18N.getString("zp.insertlink"), "zei-link"]], [["quote", ZPI18N.getString("zp.insertquote"), "zei-quote"], ["removeformat", ZPI18N.getString("zp.removeformatting"), "zei-removeformat"]], [["inserthorizontalrule", ZPI18N.getString("zp.inserthorizontalrule"), "zei-line"]], [["smiley", ZPI18N.getString("zp.insertsmiley"), "zei-smiley"]]]) : ZE_Init.init([[["bold", ZPI18N.getString("zp.bold"), "zei-bold"], ["italic", ZPI18N.getString("zp.italic"), "zei-italic"], ["underline", ZPI18N.getString("zp.underline"), "zei-underline"], ["strikethrough", ZPI18N.getString("zp.strikethrough"), "zei-strike"]], [["fontsize", ZPI18N.getString("zp.fontsize"), "zei-arrow"]], [["forecolor", ZPI18N.getString("zp.fontcolor"), "zei-textclr"], ["backcolor", ZPI18N.getString("zp.bgclr"), "zei-bgclr"]], [["alignoptions", ZPI18N.getString("zp.fontstyleoptions"), "zei-textleft"], ["listoptions", ZPI18N.getString("zp.listoptions"), "zei-unorder"], ["indentoptions", ZPI18N.getString("zp.indentoptions"), "zei-outdent"]], [["image", ZPI18N.getString("zp.insertimage"), "zei-image"], ["link", ZPI18N.getString("zp.insertlink"), "zei-link"]], [["quote", ZPI18N.getString("zp.insertquote"), "zei-quote"], ["removeformat", ZPI18N.getString("zp.removeformatting"), "zei-removeformat"]], [["inserthorizontalrule", ZPI18N.getString("zp.inserthorizontalrule"), "zei-line"]], [["smiley", ZPI18N.getString("zp.insertsmiley"), "zei-smiley"]]]) : ZE_Init.init([[["bold", ZPI18N.getString("zp.bold"), "zei-bold"], ["italic", ZPI18N.getString("zp.italic"), "zei-italic"], ["underline", ZPI18N.getString("zp.underline"), "zei-underline"], ["strikethrough", ZPI18N.getString("zp.strikethrough"), "zei-strike"]], [["fontfamily", ZPI18N.getString("zp.font"), "zei-fontfamily"]], [["fontsize", ZPI18N.getString("zp.fontsize"), "zei-arrow"]], [["forecolor", ZPI18N.getString("zp.fontcolor"), "zei-textclr"], ["backcolor", ZPI18N.getString("zp.bgclr"), "zei-bgclr"]], [["alignoptions", ZPI18N.getString("zp.fontstyleoptions"), "zei-textleft"], ["listoptions", ZPI18N.getString("zp.listoptions"), "zei-unorder"], ["indentoptions", ZPI18N.getString("zp.indentoptions"), "zei-outdent"]], [["image", ZPI18N.getString("zp.insertimage"), "zei-image"], ["link", ZPI18N.getString("zp.insertlink"), "zei-link"]], [["quote", ZPI18N.getString("zp.insertquote"), "zei-quote"], ["removeformat", ZPI18N.getString("zp.removeformatting"), "zei-removeformat"]], [["inserthorizontalrule", ZPI18N.getString("zp.inserthorizontalrule"), "zei-line"]], [["smiley", ZPI18N.getString("zp.insertsmiley"), "zei-smiley"]]]) : isSmileyEnabled ? isVideoNeeded ? ZE_Init.init([[["bold", ZPI18N.getString("zp.bold"), "zei-bold"], ["italic", ZPI18N.getString("zp.italic"), "zei-italic"], ["underline", ZPI18N.getString("zp.underline"), "zei-underline"], ["strikethrough", ZPI18N.getString("zp.strikethrough"), "zei-strike"]], [["fontfamily", ZPI18N.getString("zp.font"), "zei-fontfamily"]], [["fontsize", ZPI18N.getString("zp.fontsize"), "zei-arrow"]], [["forecolor", ZPI18N.getString("zp.fontcolor"), "zei-textclr"], ["backcolor", ZPI18N.getString("zp.bgclr"), "zei-bgclr"]], [["alignoptions", ZPI18N.getString("zp.fontstyleoptions"), "zei-textleft"], ["listoptions", ZPI18N.getString("zp.listoptions"), "zei-unorder"], ["indentoptions", ZPI18N.getString("zp.indentoptions"), "zei-outdent"]], [["image", ZPI18N.getString("zp.insertimage"), "zei-image"], ["video", ZPI18N.getString("zp.insertvideo"), "IC-vtour"], ["link", ZPI18N.getString("zp.insertlink"), "zei-link"], ["tableGrid", ZPI18N.getString("zp.inserttable"), "zei-table"]], [["quote", ZPI18N.getString("zp.insertquote"), "zei-quote"], ["removeformat", ZPI18N.getString("zp.removeformatting"), "zei-removeformat"]], [["inserthorizontalrule", ZPI18N.getString("zp.inserthorizontalrule"), "zei-line"]], [["smiley", ZPI18N.getString("zp.insertsmiley"), "zei-smiley"]]]) : ZE_Init.init([[["bold", ZPI18N.getString("zp.bold"), "zei-bold"], ["italic", ZPI18N.getString("zp.italic"), "zei-italic"], ["underline", ZPI18N.getString("zp.underline"), "zei-underline"], ["strikethrough", ZPI18N.getString("zp.strikethrough"), "zei-strike"]], [["fontfamily", ZPI18N.getString("zp.font"), "zei-fontfamily"]], [["fontsize", ZPI18N.getString("zp.fontsize"), "zei-arrow"]], [["forecolor", ZPI18N.getString("zp.fontcolor"), "zei-textclr"], ["backcolor", ZPI18N.getString("zp.bgclr"), "zei-bgclr"]], [["alignoptions", ZPI18N.getString("zp.fontstyleoptions"), "zei-textleft"], ["listoptions", ZPI18N.getString("zp.listoptions"), "zei-unorder"], ["indentoptions", ZPI18N.getString("zp.indentoptions"), "zei-outdent"]], [["image", ZPI18N.getString("zp.insertimage"), "zei-image"], ["link", ZPI18N.getString("zp.insertlink"), "zei-link"], ["tableGrid", ZPI18N.getString("zp.inserttable"), "zei-table"]], [["quote", ZPI18N.getString("zp.insertquote"), "zei-quote"], ["removeformat", ZPI18N.getString("zp.removeformatting"), "zei-removeformat"]], [["inserthorizontalrule", ZPI18N.getString("zp.inserthorizontalrule"), "zei-line"]], [["smiley", ZPI18N.getString("zp.insertsmiley"), "zei-smiley"]]]) : isPostMessage ? ZE_Init.init([[["bold", ZPI18N.getString("zp.bold"), "zei-bold"], ["italic", ZPI18N.getString("zp.italic"), "zei-italic"], ["underline", ZPI18N.getString("zp.underline"), "zei-underline"], ["strikethrough", ZPI18N.getString("zp.strikethrough"), "zei-strike"]], [["alignoptions", ZPI18N.getString("zp.fontstyleoptions"), "zei-textleft"], ["listoptions", ZPI18N.getString("zp.listoptions"), "zei-unorder"], ["indentoptions", ZPI18N.getString("zp.indentoptions"), "zei-outdent"]], [["image", ZPI18N.getString("zp.insertimage"), "zei-image"], ["link", ZPI18N.getString("zp.insertlink"), "zei-link"], ["quote", ZPI18N.getString("zp.insertquote"), "zei-quote"]]]) : ZE_Init.init([[["bold", ZPI18N.getString("zp.bold"), "zei-bold"], ["italic", ZPI18N.getString("zp.italic"), "zei-italic"], ["underline", ZPI18N.getString("zp.underline"), "zei-underline"], ["strikethrough", ZPI18N.getString("zp.strikethrough"), "zei-strike"]], [["fontfamily", ZPI18N.getString("zp.font"), "zei-fontfamily"]], [["fontsize", ZPI18N.getString("zp.fontsize"), "zei-arrow"]], [["forecolor", ZPI18N.getString("zp.fontcolor"), "zei-textclr"], ["backcolor", ZPI18N.getString("zp.bgclr"), "zei-bgclr"]], [["alignoptions", ZPI18N.getString("zp.fontstyleoptions"), "zei-textleft"], ["listoptions", ZPI18N.getString("zp.listoptions"), "zei-unorder"], ["indentoptions", ZPI18N.getString("zp.indentoptions"), "zei-outdent"]], [["image", ZPI18N.getString("zp.insertimage"), "zei-image"], ["link", ZPI18N.getString("zp.insertlink"), "zei-link"], ["tableGrid", ZPI18N.getString("zp.inserttable"), "zei-table"]], [["insertHTML", ZPI18N.getString("zp.inserthtml"), "zei-html"], ["quote", ZPI18N.getString("zp.insertquote"), "zei-quote"], ["removeformat", ZPI18N.getString("zp.removeformatting"), "zei-removeformat"]], [["inserthorizontalrule", ZPI18N.getString("zp.inserthorizontalrule"), "zei-line"]]])
    },
    initiateZEEditor: function(initObj, editorType, isAllowedUserPerm, isCommentEditor, isEscalatorPerm) {
        initObj.isLinkMenuDisabled = !0,
        "HRCaseNote" == editorType ? ZE_Init.init([[["bold", ZPI18N.getString("zp.bold"), "zei-bold"], ["italic", ZPI18N.getString("zp.italic"), "zei-italic"], ["underline", ZPI18N.getString("zp.underline"), "zei-underline"]]]) : "HrCase" == editorType || "Assessment" == editorType ? isCommentEditor ? isAllowedUserPerm ? ZE_Init.init([[["bold", ZPI18N.getString("zp.bold"), "zei-bold"], ["italic", ZPI18N.getString("zp.italic"), "zei-italic"], ["underline", ZPI18N.getString("zp.underline"), "zei-underline"], ["strikethrough", ZPI18N.getString("zp.strikethrough"), "zei-strike"]], [["forecolor", ZPI18N.getString("zp.fontcolor"), "zei-textclr"], ["backcolor", ZPI18N.getString("zp.bgclr"), "zei-bgclr"]], [["alignoptions", ZPI18N.getString("zp.fontstyleoptions"), "zei-textleft"], ["listoptions", ZPI18N.getString("zp.listoptions"), "zei-unorder"], ["indentoptions", ZPI18N.getString("zp.indentoptions"), "zei-outdent"]], [["image", ZPI18N.getString("zp.insertimage"), "zei-image"], ["link", ZPI18N.getString("zp.insertlink"), "zei-link"]], [["quote", ZPI18N.getString("zp.insertquote"), "zei-quote"], ["removeformat", ZPI18N.getString("zp.removeformatting"), "zei-removeformat"]], [["inserthorizontalrule", ZPI18N.getString("zp.inserthorizontalrule"), "zei-line"]], [["smiley", ZPI18N.getString("zp.insertsmiley"), "zei-smiley"]]]) : isEscalatorPerm ? ZE_Init.init([[["bold", ZPI18N.getString("zp.bold"), "zei-bold"], ["italic", ZPI18N.getString("zp.italic"), "zei-italic"], ["underline", ZPI18N.getString("zp.underline"), "zei-underline"], ["strikethrough", ZPI18N.getString("zp.strikethrough"), "zei-strike"]], [["forecolor", ZPI18N.getString("zp.fontcolor"), "zei-textclr"], ["backcolor", ZPI18N.getString("zp.bgclr"), "zei-bgclr"]], [["alignoptions", ZPI18N.getString("zp.fontstyleoptions"), "zei-textleft"], ["listoptions", ZPI18N.getString("zp.listoptions"), "zei-unorder"], ["indentoptions", ZPI18N.getString("zp.indentoptions"), "zei-outdent"]], [["image", ZPI18N.getString("zp.insertimage"), "zei-image"], ["link", ZPI18N.getString("zp.insertlink"), "zei-link"]], [["quote", ZPI18N.getString("zp.insertquote"), "zei-quote"], ["removeformat", ZPI18N.getString("zp.removeformatting"), "zei-removeformat"]], [["inserthorizontalrule", ZPI18N.getString("zp.inserthorizontalrule"), "zei-line"]], [["smiley", ZPI18N.getString("zp.insertsmiley"), "zei-smiley"]]]) : ZE_Init.init([[["bold", ZPI18N.getString("zp.bold"), "zei-bold"], ["italic", ZPI18N.getString("zp.italic"), "zei-italic"], ["underline", ZPI18N.getString("zp.underline"), "zei-underline"], ["strikethrough", ZPI18N.getString("zp.strikethrough"), "zei-strike"]], [["fontsize", ZPI18N.getString("zp.fontsize"), "zei-arrow"]], [["forecolor", ZPI18N.getString("zp.fontcolor"), "zei-textclr"], ["backcolor", ZPI18N.getString("zp.bgclr"), "zei-bgclr"]], [["alignoptions", ZPI18N.getString("zp.fontstyleoptions"), "zei-textleft"], ["listoptions", ZPI18N.getString("zp.listoptions"), "zei-unorder"], ["indentoptions", ZPI18N.getString("zp.indentoptions"), "zei-outdent"]], [["image", ZPI18N.getString("zp.insertimage"), "zei-image"], ["link", ZPI18N.getString("zp.insertlink"), "zei-link"]], [["quote", ZPI18N.getString("zp.insertquote"), "zei-quote"], ["removeformat", ZPI18N.getString("zp.removeformatting"), "zei-removeformat"]], [["inserthorizontalrule", ZPI18N.getString("zp.inserthorizontalrule"), "zei-line"]], [["smiley", ZPI18N.getString("zp.insertsmiley"), "zei-smiley"]]]) : ZE_Init.init([[["bold", ZPI18N.getString("zp.bold"), "zei-bold"], ["italic", ZPI18N.getString("zp.italic"), "zei-italic"], ["underline", ZPI18N.getString("zp.underline"), "zei-underline"], ["strikethrough", ZPI18N.getString("zp.strikethrough"), "zei-strike"]], [["fontsize", ZPI18N.getString("zp.fontsize"), "zei-arrow"]], [["forecolor", ZPI18N.getString("zp.fontcolor"), "zei-textclr"], ["backcolor", ZPI18N.getString("zp.bgclr"), "zei-bgclr"]], [["alignoptions", ZPI18N.getString("zp.fontstyleoptions"), "zei-textleft"], ["listoptions", ZPI18N.getString("zp.listoptions"), "zei-unorder"], ["indentoptions", ZPI18N.getString("zp.indentoptions"), "zei-outdent"]], [["image", ZPI18N.getString("zp.insertimage"), "zei-image"], ["link", ZPI18N.getString("zp.insertlink"), "zei-link"]], [["quote", ZPI18N.getString("zp.insertquote"), "zei-quote"], ["removeformat", ZPI18N.getString("zp.removeformatting"), "zei-removeformat"]], [["inserthorizontalrule", ZPI18N.getString("zp.inserthorizontalrule"), "zei-line"]], [["smiley", ZPI18N.getString("zp.insertsmiley"), "zei-smiley"]]]) : "BulkUpdateEdit" == editorType ? ZE_Init.init([[["bold", ZPI18N.getString("zp.bold"), "zei-bold"], ["italic", ZPI18N.getString("zp.italic"), "zei-italic"], ["underline", ZPI18N.getString("zp.underline"), "zei-underline"], ["strikethrough", ZPI18N.getString("zp.strikethrough"), "zei-strike"]], [["alignoptions", ZPI18N.getString("zp.fontstyleoptions"), "zei-textleft"], ["listoptions", ZPI18N.getString("zp.listoptions"), "zei-unorder"], ["indentoptions", ZPI18N.getString("zp.indentoptions"), "zei-outdent"]], [["link", ZPI18N.getString("zp.insertlink"), "zei-link"]], [["quote", ZPI18N.getString("zp.insertquote"), "zei-quote"]], [["smiley", ZPI18N.getString("zp.insertsmiley"), "zei-smiley"]]]) : "Assessment" == editorType || "Survey" == editorType ? ZE_Init.init([[["bold", ZPI18N.getString("zp.bold"), "zei-bold"], ["italic", ZPI18N.getString("zp.italic"), "zei-italic"], ["underline", ZPI18N.getString("zp.underline"), "zei-underline"], ["strikethrough", ZPI18N.getString("zp.strikethrough"), "zei-strike"]], [["fontsize", ZPI18N.getString("zp.fontsize"), "zei-arrow"]], [["forecolor", ZPI18N.getString("zp.fontcolor"), "zei-textclr"], ["backcolor", ZPI18N.getString("zp.bgclr"), "zei-bgclr"]], [["alignoptions", ZPI18N.getString("zp.fontstyleoptions"), "zei-textleft"], ["listoptions", ZPI18N.getString("zp.listoptions"), "zei-unorder"], ["indentoptions", ZPI18N.getString("zp.indentoptions"), "zei-outdent"]], [["image", ZPI18N.getString("zp.insertimage"), "zei-image"], ["link", ZPI18N.getString("zp.insertlink"), "zei-link"]], [["quote", ZPI18N.getString("zp.insertquote"), "zei-quote"], ["removeformat", ZPI18N.getString("zp.removeformatting"), "zei-removeformat"]], [["inserthorizontalrule", ZPI18N.getString("zp.inserthorizontalrule"), "zei-line"]], [["smiley", ZPI18N.getString("zp.insertsmiley"), "zei-smiley"]]]) : "Survey_Template" == editorType && ZE_Init.init([[["bold", ZPI18N.getString("zp.bold"), "zei-bold"], ["italic", ZPI18N.getString("zp.italic"), "zei-italic"], ["underline", ZPI18N.getString("zp.underline"), "zei-underline"], ["strikethrough", ZPI18N.getString("zp.strikethrough"), "zei-strike"]], [["fontsize", ZPI18N.getString("zp.fontsize"), "zei-arrow"]], [["forecolor", ZPI18N.getString("zp.fontcolor"), "zei-textclr"], ["backcolor", ZPI18N.getString("zp.bgclr"), "zei-bgclr"]], [["alignoptions", ZPI18N.getString("zp.fontstyleoptions"), "zei-textleft"], ["listoptions", ZPI18N.getString("zp.listoptions"), "zei-unorder"], ["indentoptions", ZPI18N.getString("zp.indentoptions"), "zei-outdent"]], [["image", ZPI18N.getString("zp.insertimage"), "zei-image"], ["link", ZPI18N.getString("zp.insertlink"), "zei-link"]], [["quote", ZPI18N.getString("zp.insertquote"), "zei-quote"], ["removeformat", ZPI18N.getString("zp.removeformatting"), "zei-removeformat"]], [["inserthorizontalrule", ZPI18N.getString("zp.inserthorizontalrule"), "zei-line"]]]);
        var editor = ZE.create(initObj);
        return void 0 === initObj.editorheight ? $("#" + ZPUtil.escapeSelector(initObj.id)).css("height", "250px") : $("#" + ZPUtil.escapeSelector(initObj.id)).css("height", initObj.editorheight + "px"),
        isCommentEditor || editor.afterEditorLoad(function() {
            $(editor.editordiv).addClass("Othr_edtr")
        }),
        editor
    },
    createZEEditor: function(initObj, isMiniEditor, isFntFimlyEnabled, isFontEnabled, isSmileyNeeded, isVideoNeeded, isPostMessage) {
        ZPUtil.initZEditor(isMiniEditor, isFntFimlyEnabled, isFontEnabled, isSmileyNeeded, isVideoNeeded, isPostMessage);
        var editor = ZE.create(initObj);
        return void 0 === initObj.editorheight ? $("#" + ZPUtil.escapeSelector(initObj.id)).css("height", "250px") : $("#" + ZPUtil.escapeSelector(initObj.id)).css("height", initObj.editorheight + "px"),
        editor.afterEditorLoad(function() {
            $(editor.editordiv).addClass("Othr_edtr")
        }),
        editor
    },
    getNoValueString: function(value) {
        return ZPUtil.Validation.isEmpty(value) && (value = "-"),
        value
    },
    getFun: function(funStr) {
        if (!ZPUtil.Validation.isEmpty(funStr)) {
            var funArr = funStr.split(".")
              , fun = window;
            return $.each(funArr, function(ind, value) {
                fun = fun[value]
            }),
            fun
        }
    },
    getJSONKeyValue: function(json, key) {
        var value;
        return json && null !== json && (value = json[key]),
        value
    },
    getICONHtml: function(cname, path, attrObj) {
        var html = '<i class="' + cname + '"';
        if (void 0 !== attrObj)
            for (i = 0; i < attrObj.length; i++)
                html += " " + attrObj[i];
        if (html += " >",
        void 0 !== path)
            for (i = 1; i <= path; i++)
                html += '<i class="path' + i + '"></i>';
        return html + "</i>"
    },
    copytoClipboard: function(text) {
        if (void 0 === text && (text = window.location.href),
        void 0 !== text) {
            if (!navigator.clipboard) {
                var textArea = document.createElement("textarea");
                textArea.value = text,
                document.body.appendChild(textArea),
                textArea.trigger("focus"),
                textArea.select();
                try {
                    var successful = document.execCommand("copy")
                } catch (err) {}
                if (document.body.removeChild(textArea),
                void 0 !== successful && !0 === successful)
                    return void ZPeople.Message.showSuccessMsg(ZPI18N.getString("zp.urlcopied"))
            }
            navigator.clipboard.writeText(text).then(function() {}, function(err) {}),
            ZPeople.Message.showSuccessMsg(ZPI18N.getString("zp.urlcopied"))
        }
    },
    getSuffixforNumber: function(number) {
        if (!(void 0 === number || number <= 0)) {
            var num = parseInt(number)
              , digits = [num % 10, num % 100]
              , ordinals = ["st", "nd", "rd", "th"];
            return [1, 2, 3, 4].includes(digits[0]) && ![11, 12, 13, 14, 15, 16, 17, 18, 19].includes(digits[1]) ? num + ordinals[digits[0] - 1] : num + ordinals[3]
        }
    },
    checkIsOtherUserProfile: function() {
        return "selfservice" === ZPTabs.currMainTab && "undefined" != typeof SelfService && SelfService.getUserId() != erecno
    }
};
ZPUtil.Validation = {
    isEmpty: function(value) {
        if (void 0 === value || null === value)
            return !0;
        if ("object" == jQuery.type(value)) {
            if (jQuery.isEmptyObject(value))
                return !0
        } else if ("" === value.trim() || "-Select-" === value.trim())
            return !0;
        return !1
    },
    isDate: function(value) {
        return Calendar.isvalidDate(value)
    },
    isDateTime: function(value) {
        var splited = value.split(" ")
          , validDateTime = !1
          , date = splited[0]
          , time = splited[1];
        if (ZPUtil.Validation.isDate(date)) {
            var hour = time.split(":")[0]
              , min = time.split(":")[1];
            if (Calendar.validateTime(hour, "hrs") && Calendar.validateTime(min, "mins"))
                if (Calendar.is12HrFormat()) {
                    var amPm = splited[2];
                    Calendar.validateTime(amPm, "ampm") && (validDateTime = !0)
                } else {
                    var sec = time.split(":")[2];
                    Calendar.validateTime(sec, "sec") && (validDateTime = !0)
                }
        }
        return validDateTime
    },
    isDecimalForView: function(value) {
        return !(value.split(".").length > 2) && ZPUtil.getDecimalLength(value)
    },
    isDecimal: function(value, decimalLen) {
        void 0 === decimalLen && (decimalLen = 2);
        var decimalDtl = ZPUtil.getDecimalLength(value);
        return "INVALID_CHAR" !== decimalDtl.message && decimalDtl.decimalLength > decimalLen ? (decimalDtl.message = "DECIMAL_EXEED",
        decimalDtl.errorCode = ZPForm.Validation.ROUNDOFF_DECIMAL) : "SUCCESS" === decimalDtl.message && decimalDtl.decimalLength <= decimalLen && (decimalDtl.isSuccess = !0),
        decimalDtl
    },
    isNumber: function(value) {
        return value += "",
        !isNaN(value) && -1 === value.indexOf(".")
    },
    isEmail: function(value, isMultiple) {
        if (void 0 !== value && "" !== value.trim()) {
            var re = /^[\w]([\w\-\.\+\'\&]*)@([\w\-\.]*)(\.[a-zA-Z]{2,22}(\.[a-zA-Z]{2}){0,2})$/;
            return isMultiple && (re = /^[\w]([\w\-\.\+\'\&]*)@([\w\-\.]*)(\.[a-zA-Z]{2,22}(\.[a-zA-Z]{2}){0,2}( )*)(,( )*[\w]([\w\-\.\+\'\&]*)@([\w\-\.]*)(\.[a-zA-Z]{2,22}(\.[a-zA-Z]{2}){0,2})( )*)*$/),
            re.test(value.trim())
        }
        return !1
    },
    isFunction: function(value) {
        return void 0 != value && "function" == typeof value
    },
    isImage: function(extn) {
        var isImage = !1;
        return void 0 === (extn = extn.trim().toLowerCase()) || "png" !== extn.substring(extn.length, extn.length - 3) && "jpeg" !== extn.substring(extn.length, extn.length - 4) && "jpg" !== extn.substring(extn.length, extn.length - 3) && "gif" !== extn.substring(extn.length, extn.length - 3) || (isImage = !0),
        isImage
    }
},
ZPUtil.Location = {
    ALL_LOCATION: null,
    reload: function() {
        ZPUtil.Location.load(!0)
    },
    load: function(isRefresh, sync, callback) {
        if (isRefresh || null === ZPUtil.Location.ALL_LOCATION) {
            ZPUtil.Location.ALL_LOCATION = {};
            var locationListInit = void 0;
            $.ajax({
                type: "POST",
                async: !!sync,
                url: "/commonAction.zp",
                data: {
                    mode: "GET_ALL_LOCATIONS",
                    conreqcsr: csrfToken
                },
                success: function(data) {
                    "error" !== (locationListInit = data).error && $.each(locationListInit.location_list_key, function(key, value) {
                        ZPUtil.Location.ALL_LOCATION[this.locationid] = this.locationname
                    }),
                    void 0 != callback && "function" == typeof callback && callback()
                }
            })
        } else
            void 0 != callback && "function" == typeof callback && callback()
    },
    constructLocationComboBoxOption: function(defOptNeed, defHtml) {
        null === ZPUtil.Location.ALL_LOCATION && ZPUtil.Location.load();
        var locationHtml = "";
        return defOptNeed && (locationHtml = '<option value="-1">' + (defHtml || ZPI18N.getString("zp.select")) + "</option>"),
        $.each(ZPUtil.Location.ALL_LOCATION, function(key, value) {
            locationHtml += "<option value=" + key + ">" + value + "</option>"
        }),
        locationHtml
    },
    getLocationNameByID: function(locID) {
        return ZPUtil.Location.load(),
        void 0 === ZPUtil.Location.ALL_LOCATION[locID] ? ZPI18N.getString("zp.all") : ZPUtil.Location.ALL_LOCATION[locID]
    }
},
Date.prototype.setDay = function(dayOfWeek) {
    this.setDate(this.getDate() - this.getDay() + dayOfWeek)
}
,
ZPUtil.setDate = function(curDate, date) {
    32 === date ? (curDate.setMonth(curDate.getMonth() + 1),
    curDate.setDate(0)) : curDate.setDate(date)
}
,
ZPUtil.Role = {
    AllRole: null,
    load: function() {
        ZPUtil.Role.AllRole = {},
        $.ajax({
            type: "POST",
            async: !1,
            url: "/commonAction.zp",
            data: {
                mode: "GET_ALL_ROLES",
                conreqcsr: csrfToken
            },
            success: function(data) {
                data.success && (ZPUtil.Role.AllRole = data.roleDetails)
            }
        })
    },
    constructRoleComboBoxOption: function() {
        null === ZPUtil.Role.AllRole && ZPUtil.Role.load();
        var roleHtml = '<option value="-1">' + ZPI18N.getString("zp.select") + "</option>";
        return $.each(ZPUtil.Role.AllRole, function(key, value) {
            roleHtml += "<option value=" + key + ">" + value + "</option>"
        }),
        roleHtml
    }
},
ZPUtil.Form_Link_Names = {
    Allformlinknames: {},
    formLinkNameObj: {},
    formIdObj: {},
    reload: function() {
        ZPUtil.Form_Link_Names.load(!0)
    },
    load: function(isAsync) {
        void 0 == isAsync && (isAsync = !1);
        var params = {
            mode: "initpage"
        };
        params.initmodule = JSON.stringify({
            modulePrefix: "services"
        }),
        params.conreqcsr = csrfToken,
        $.ajax({
            url: "/gettabdetails.zp",
            data: params,
            type: "POST",
            async: isAsync,
            success: function(data) {
                $.each(data.initmodule, function(key, value) {
                    $.each(value, function(k, v) {
                        ZPUtil.Form_Link_Names.formLinkNameObj[v.formId] = v.compName,
                        ZPUtil.Form_Link_Names.formIdObj[v.compName] = v.formId
                    })
                })
            }
        })
    },
    getFormLinkName: function(keyname, isFormId) {
        return void 0 != ZPUtil.Form_Link_Names.formLinkNameObj && 0 != Object.keys(ZPUtil.Form_Link_Names.formLinkNameObj).length || ZPUtil.Form_Link_Names.load(),
        isFormId ? ZPUtil.Form_Link_Names.formLinkNameObj[keyname] : ZPUtil.Form_Link_Names.formIdObj[keyname]
    }
},
ZPUtil.LocationLinkName = {
    Allformlinknames: {},
    formLinkNameObj: {},
    formIdObj: {},
    reload: function() {
        ZPUtil.LocationLinkName.load(!0)
    },
    load: function(isAsync) {
        void 0 == isAsync && (isAsync = !1);
        var params = {
            mode: "initpage"
        };
        params.initmodule = JSON.stringify({
            modulePrefix: "getLocationFormId"
        }),
        params.conreqcsr = csrfToken,
        $.ajax({
            url: "/gettabdetails.zp",
            data: params,
            type: "POST",
            async: isAsync,
            success: function(data) {
                $.each(data.initmodule, function(key, value) {
                    $.each(value, function(k, v) {
                        ZPUtil.LocationLinkName.formLinkNameObj[v.formId] = v.compName,
                        ZPUtil.LocationLinkName.formIdObj[v.compName] = v.formId
                    })
                })
            }
        })
    },
    getFormLinkName: function(keyname, isFormId) {
        return void 0 != ZPUtil.LocationLinkName.formLinkNameObj && 0 != Object.keys(ZPUtil.LocationLinkName.formLinkNameObj).length || ZPUtil.LocationLinkName.load(),
        isFormId ? ZPUtil.LocationLinkName.formLinkNameObj[keyname] : ZPUtil.LocationLinkName.formIdObj[keyname]
    }
};
var zs_store = {
    onSuccess: function() {
        $("#zs_widget").modal("hide")
    },
    onCancel: function() {
        $("#zs_widget").modal("hide")
    }
};
function jscssLoaded(src) {
    return len = $('script[src*="' + src + '"]').length > 0
}
function loadjscssfile(filename, filetype, callback) {
    if ("js" == filetype)
        (fileref = document.createElement("script")).readyState ? fileref.onreadystatechange = function() {
            "loaded" !== fileref.readyState && "complete" !== fileref.readyState || (fileref.onreadystatechange = null,
            callback())
        }
        : fileref.onload = function() {
            callback()
        }
        ,
        fileref.setAttribute("type", "text/javascript"),
        fileref.setAttribute("src", filename);
    else if ("css" == filetype) {
        var fileref;
        (fileref = document.createElement("link")).setAttribute("rel", "stylesheet"),
        fileref.setAttribute("type", "text/css"),
        fileref.setAttribute("href", filename)
    }
    void 0 !== fileref && document.getElementsByTagName("head")[0].appendChild(fileref)
}
var Subscription = {
    userWidget: 1,
    nonUserWidget: 2,
    recruitWidget: 3,
    user_plan: ["18", "19", "20", "21"],
    static_plan: ["2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15"],
    restrictWidgetPlan: ["15", "16", "22", "1"],
    widget_js_src: "https://localjs.zohostatic.com/storehandler/v9/js/zswidget.min.js",
    widget_css_src: "https://localcss.zohostatic.com/storehandler/v9/css/zswidget.min.css",
    getPaymentsWidget: function(widgetType, licenseCount) {
        jscssLoaded(Subscription.widget_js_src) ? Subscription.showPaymentsWidget(widgetType, licenseCount) : (loadjscssfile(Subscription.widget_css_src, "css"),
        loadjscssfile(Subscription.widget_js_src, "js", function() {
            Subscription.showPaymentsWidget(widgetType, licenseCount)
        }))
    },
    showPaymentsWidget: function(widgetType, licenseCount) {
        if (0 == $("#zs_widget").length) {
            $('<div class="zs_widget" id="zs_widget"></div>').insertAfter("#top_message_outer")
        }
        switch (widgetType) {
        case 1:
            zs_widget.init({
                serviceId: serviceid,
                customId: _LOGGEDIN_ACCZSOID,
                purchaseMode: "subscription",
                type: "widget",
                secretKey: csrfParamName,
                secretVal: csrfToken,
                itemList: [{
                    code: "USERS",
                    action: "upgrade",
                    type: "addon",
                    upgradeLabel: ZPI18N.getString("zp.userupgradelabel")
                }],
                settings: {
                    upgradeTitle: ZPI18N.getString("zp.userupgradetitle"),
                    upgradeInfo: ZPI18N.getString("zp.userlicenseupgradeinfo", [licenseCount]),
                    successTitle: ZPI18N.getString("zp.licenseupgraded"),
                    successActionLabel: ZPI18N.getString("zp.usersuccessactionlabel"),
                    successSecondaryAction: ZPI18N.getString("zp.enable")
                }
            });
            break;
        case 2:
            zs_widget.init({
                serviceId: serviceid,
                customId: _LOGGEDIN_ACCZSOID,
                purchaseMode: "subscription",
                type: "widget",
                secretKey: csrfParamName,
                secretVal: csrfToken,
                itemList: [{
                    code: "NON_USERS",
                    action: "upgrade",
                    type: "addon",
                    upgradeLabel: ZPI18N.getString("zp.nonuserupgradelabel")
                }],
                settings: {
                    upgradeTitle: ZPI18N.getString("zp.nonuserupgradetitle"),
                    upgradeInfo: ZPI18N.getString("zp.nonuserlicenseupgradeinfo", [licenseCount]),
                    successTitle: ZPI18N.getString("zp.licenseupgraded"),
                    successActionLabel: ZPI18N.getString("zp.nonusersuccessactionlabel"),
                    successSecondaryAction: ZPI18N.getString("zp.enable")
                }
            });
            break;
        case 3:
            zs_widget.init({
                serviceId: serviceid,
                customId: _LOGGEDIN_ACCZSOID,
                purchaseMode: "subscription",
                type: "widget",
                secretKey: csrfParamName,
                secretVal: csrfToken,
                itemList: [{
                    code: "RECRUITER",
                    action: "upgrade",
                    type: "addon",
                    upgradeLabel: ZPI18N.getString("zp.recruiterupgradelabel")
                }],
                settings: {
                    upgradeTitle: ZPI18N.getString("zp.recruiterupgradetitle"),
                    upgradeInfo: ZPI18N.getString("zp.recruiterlicenseupgradeinfo"),
                    successTitle: ZPI18N.getString("zp.licenseupgraded"),
                    successActionLabel: ZPI18N.getString("zp.recruitersuccessactionlabel"),
                    successSecondaryAction: ZPI18N.getString("zp.enable")
                }
            })
        }
        $("#zs_widget").modal("show")
    },
    showOfflineWidget: function(type) {
        var allowedCount;
        $("#offline_widget").empty();
        var params = {
            zsoid: _LOGGEDIN_ACCZSOID,
            type: type,
            method: "updateOfflineUsers",
            mode: "getcount"
        };
        ZPeople.Request.send("/updateOfflineUsers.zp", params, function(resultData) {
            if ((allowedCount = resultData.count) <= 0) {
                $("#offline_widget").modal("hide");
                var paymentErrKey = type == Subscription.userWidget ? "zp.useraddmoresupport" : "zp.employeeprofileaddmoresupport"
                  , parmentErrMsg = ZPI18N.getString(paymentErrKey, [ZPeople.peopleSupportEmail]);
                ZPeople.Message.showFailureMsg(parmentErrMsg)
            } else {
                if (type == Subscription.userWidget) {
                    var offlineElm = '<div id="offline_widget"><div class="modal ZPsecModal modal-small DB in" id="dvtabularSection" role="dialog" aria-labelledby="dvtabularSection" aria-hidden="false" style="display: block;">';
                    offlineElm += '<div class="modal-dialog"><div class="modal-content"><div class="modal-header ZPlgrybg"><h4 class="modal-title" id="gridSystemModalLabel">' + ZPI18N.getString("zp.userupgradetitle") + '</h4></div><div class="modal-body dvExecutescript"><div id="executeParamsDiv"><p class="PB5 LH20">' + ZPI18N.getString("zp.offlineUserLicenseUpdinfo") + '</p><div class="row form-group PT15"><div class="col-md-4"><label class="PT5">' + ZPI18N.getString("zp.userupgradelabel") + "</label></div>",
                    offlineElm += '<div class="col-md-3"><select class="selectBox" id="select_offline"></select></div></div></div></div><div class="label-message ZPAltmsg label-note PRI TLI"><p class="S13"><b>Note: </b>' + ZPI18N.getString("zp.offlinewidgetnote") + '</p></div><div class="modal-footer"><a class="btn btn-default" id="close_offline_widget">' + ZPI18N.getString("zp.cancel") + '</a><a class="btn btn-primary" id="update_offline_widget" data-toggle="modal">' + ZPI18N.getString("zp.purchase") + "</a></div></div></div></div></div>"
                } else if (type == Subscription.nonUserWidget) {
                    offlineElm = '<div id="offline_widget"><div class="modal ZPsecModal modal-small DB in" id="dvtabularSection" role="dialog" aria-labelledby="dvtabularSection" aria-hidden="false" style="display: block;">';
                    offlineElm += '<div class="modal-dialog"><div class="modal-content"><div class="modal-header ZPlgrybg"><h4 class="modal-title" id="gridSystemModalLabel">' + ZPI18N.getString("zp.nonuserupgradetitle") + '</h4></div><div class="modal-body dvExecutescript"><div id="executeParamsDiv"><p class="PB5 LH20">' + ZPI18N.getString("zp.offlineNULicenseUpdinfo") + '</p><div class="row form-group PT15"><div class="col-md-4"><label class="PT5">' + ZPI18N.getString("zp.nonuserupgradelabel") + "</label></div>",
                    offlineElm += '<div class="col-md-3"><select class="selectBox" id="select_offline"></select></div></div></div></div><div class="label-message ZPAltmsg label-note PRI TLI"><p class="S13"><b>Note: </b>' + ZPI18N.getString("zp.offlinewidgetnote") + '</p></div><div class="modal-footer"><a class="btn btn-default" id="close_offline_widget">' + ZPI18N.getString("zp.cancel") + '</a><a class="btn btn-primary" id="update_offline_widget" data-toggle="modal">' + ZPI18N.getString("zp.purchase") + "</a></div></div></div></div></div>"
                }
                0 == $("#offline_widget").length ? $(offlineElm).insertAfter("#top_message_outer") : $("#offline_widget").append(offlineElm),
                $("#offline_widget").modal("show");
                var list = [];
                for (i = 1; i <= allowedCount; i++) {
                    var el = "<option value=" + i + ">" + i + "</option>";
                    list.push(el)
                }
                $("#select_offline").html(list).select2(),
                $(document).on("click", "#close_offline_widget", function() {
                    $("#offline_widget").modal("hide")
                }),
                $("#update_offline_widget").on("click", function() {
                    $("#update_offline_widget").attr("disabled", !0);
                    var count = $("#select_offline").val()
                      , params = {
                        zsoid: _LOGGEDIN_ACCZSOID,
                        type: type,
                        count: count,
                        method: "updateOfflineUsers",
                        mode: "update"
                    };
                    ZPeople.Request.send("/updateOfflineUsers.zp", params, function(data) {
                        "Success" == data.msg ? ($("#offline_widget").modal("hide"),
                        ZPeople.Message.showSuccessMsg(ZPI18N.getString("zp.licenseupgraded"))) : ($("#offline_widget").modal("hide"),
                        ZPeople.Message.showFailureMsg(ZPI18N.getString("zp.sorryservererror")))
                    })
                })
            }
        })
    },
    showWriterPaymentsWidget: function(writerCustomerID, usedCredits) {
        if (0 == $("#zs_widget").length) {
            $('<div class="zs_widget" id="zs_widget"></div>').insertAfter("#top_message_outer")
        }
        zs_widget.init({
            serviceId: 73e4,
            customId: writerCustomerID,
            type: "widget",
            secretKey: csrfParamName,
            secretVal: csrfToken,
            itemList: [{
                code: "DOCUAUTOMATION",
                action: "upgrade",
                type: "addon",
                upgradeLabel: ZPI18N.getString("zp.writerupgradelabel")
            }],
            settings: {
                upgradeTitle: ZPI18N.getString("zp.writerupgradetitle"),
                successActionLabel: ZPI18N.getString("zp.close"),
                successSecondaryAction: "disable",
                upgradeInfo: ZPI18N.getString("zp.writerlicenseupgradeinfo", usedCredits),
                successTitle: ZPI18N.getString("zp.licenseupgraded")
            }
        }),
        $("#zs_widget").modal("show")
    },
    getWriterPaymentsWidget: function(writerCustomerID, usedCredits) {
        jscssLoaded(Subscription.widget_js_src) ? Subscription.showWriterPaymentsWidget(writerCustomerID, usedCredits) : (loadjscssfile(Subscription.widget_css_src, "css"),
        loadjscssfile(Subscription.widget_js_src, "js", function() {
            Subscription.showWriterPaymentsWidget(writerCustomerID, usedCredits)
        }))
    }
};
$(function() {
    window.addEventListener ? window.addEventListener("message", postListener, !1) : window.attachEvent("onmessage", postListener)
}),
postListener = function(event) {
    if (void 0 !== event.data && void 0 !== event.data.zpPrimary) {
        var message = event.data;
        document.documentElement.style.setProperty("--zpPrimary", message.zpPrimary),
        document.documentElement.style.setProperty("--zpPrimaryHover", message.zpPrimaryHover),
        1 == message.dark ? (document.body.setAttribute("theme-mode", "dark"),
        document.body.setAttribute("dark-mode", "true")) : (document.body.removeAttribute("theme-mode", "dark"),
        document.body.setAttribute("dark-mode", "false")),
        "rtl" == message.dir ? document.body.setAttribute("dir", "rtl") : document.body.setAttribute("dir", "ltr")
    } else if (void 0 !== event.data && void 0 !== event.data.zcThemeClass) {
        message = event.data;
        for (var body = $(document.body), classes = body.attr("class").split(" "), i = 0; i < classes.length; i++)
            -1 !== classes[i].indexOf("cliq-theme") && body.removeClass(classes[i]);
        body.addClass(message.zcThemeClass),
        void 0 !== message.customthemecolor && document.documentElement.style.setProperty("--main-bg-color", message.customthemecolor)
    } else
        (void 0 !== reportsIntegUrl && event.origin == reportsIntegUrl || void 0 !== reportsIntegNewUrl && event.origin == reportsIntegNewUrl) && "xml" == event.data.type && ReportInteg.saveXMLData(event.data)
}
;
var ZPeople = {};
!function() {
    var jAjax = $.ajax;
    $.ajax = function(urlobj) {
        return "object" != typeof urlobj || void 0 != urlobj.dataType && "script" == urlobj.dataType || -1 != urlobj.url.indexOf("images/") || -1 != urlobj.url.indexOf(".js") || -1 != urlobj.url.indexOf(".svg") ? 0 == !urlobj.url.indexOf("/") && 0 == !urlobj.url.indexOf("https://") && (urlobj.url = "/" + urlobj.url) : ("null" != contextPath && "undefined" != contextPath && -1 == urlobj.url.indexOf("/" + contextPath + "/") && -1 == urlobj.url.indexOf("https://") && (urlobj.url = "/" + contextPath + (0 == urlobj.url.indexOf("/") ? "" : "/") + urlobj.url),
        "undefined" != typeof isPlatformOrg && isPlatformOrg && (urlobj.data && urlobj.data instanceof FormData ? (urlobj.data.set("isPlatformOrg", !0),
        urlobj.data.set("pfExtId", pfExtId)) : (urlobj.data = void 0 === urlobj.data ? {} : urlobj.data,
        urlobj.data.isPlatformOrg = !0,
        urlobj.data.pfExtId = pfExtId))),
        jAjax.apply(this, arguments)
    }
}(),
(ZPeople = {
    COMMON_URL: "/commonAction.zp",
    TITLE: ZPI18N.getString("zpeople"),
    ORGLIST: {},
    USER_LIST: null,
    CURR_USER: null,
    SUB_USERLIST: null,
    ISCHAT: "",
    ISTRIALUSER: "",
    ISPAIDUSER: "",
    ISPREMIUMADDONENABLED: "",
    peopleCookie: {},
    USER_CUST_SETTINGS: {},
    isAdminforAcc: void 0,
    PORTAL_NAME: void 0,
    CURRENT_VIEWKEY: null,
    OPENMODAL: null,
    deskWidToken: void 0,
    FOOTEROPTIONS_HTML: "",
    FOOTER_CLASS: "",
    LOADING_HTML: '<div class="ctable" id="zp_page_loading"><div class="ctcell"><div class="loader-inner line-scale"><div></div><div></div><div></div><div></div><div></div></div></div></div>',
    PLANDETAILS: {},
    ORG_SUB_LIST: null,
    phoneBridgeConfig: null,
    excludeTban: !0,
    orgStructureTagMap: {},
    isAllowedToAddUserDirectly: !1,
    isContactSupportVisible: !0,
    orgStructureDispNameMap: {},
    isOrgstructureFilterRestricted: !1,
    isProfilePicDCFEnabled: !1,
    init: function() {
        if (ZPeople.onboardingState && -1 == window.location.href.indexOf("lmscourse#lms-learner") && (ZPeople.confirm(null, "", "", "", !0, !0),
        $("#textConfirmationPopupBody").find("p").html(ZPI18N.getString("zp.completeonboarding", ["/" + portalname + "/onboarding"]))),
        $(document).ready(function() {
            $("body").tooltip({
                selector: '[data-toggle="tooltip"]'
            }),
            $(document).on("keyup", function(e) {
                27 == e.keyCode && (Files.closeDiv(),
                Preview.closeDiv())
            })
        }),
        $(document).on("click", function(event) {
            if ($("#zp_user_profile_pop").hide(),
            $("#zpeople_forms").hide(),
            $("#zpeople_more").hide(),
            $("#zpeople_notification").hide(),
            "showcorrespondingLogtime" !== event.target.id && 0 === $(event.target).parents("#showcorrespondingLogtime").length && Layout.Page.container.find("#showcorrespondingLogtime").hide(),
            $("#zp_maintab_more").removeClass("open"),
            Layout.Page.container.find("#ZPAtt_shiftDropDown").removeClass("open"),
            "announcements" !== ZPTabs.currMainTab && $("body").removeClass("Ann_ViewCon"),
            "A" === event.target.tagName && null == event.target.onclick) {
                for (var attrDetails = event.target.attributes, len = attrDetails.length, isToggle = !1, i = 0; i < len; i++)
                    if ("data-toggle" === attrDetails[i].localName) {
                        isToggle = "tab" === attrDetails[i].nodeValue;
                        break
                    }
                isToggle || ZPeople.redirectFix(event)
            }
            if (0 == $(event.target).parents("#zp_user_information").length && $("#zp_user_information").modal("hide"),
            0 !== $(event.target).parents("#zp_d_cdash").length && 0 !== $(event.target).parents("#zp_d_cw").length && ZPDashboard.Widget.closeWidCustModal(),
            null !== Layout.Page.container && 0 == $(event.target).parents("#singlecalendar").length && 0 == $(event.target).parents("#doublecalendar").length && (Calendar.hideSingleCalendar(),
            Calendar.hideDoubleCalendar(),
            Calendar.currentObj = null),
            "#admin" === Layout.Page.hash && "search_inp" !== $(event.target).attr("id") && $("#search_list").slideUp(),
            0 !== $("#timerCurModal").length && $("#timerCurModal").hasClass("in") && 0 === $(event.target).parents("#timerCurModal").length && $("#timerCurModal").modal("hide"),
            "#reports/home" === Layout.Page.hash && "Report_search" !== $(event.target).attr("id") && $("#reports_search_list").slideUp(),
            Layout.Page.hash.indexOf("#reports/") >= 0) {
                if (0 === $(event.target).parents(".reportsFilter").length) {
                    var openFilters = Layout.Page.container.find("#filterDiv").find(".ddown.open");
                    void 0 !== openFilters && openFilters.length > 0 && $.each(openFilters, function(index, element) {
                        $(element).removeClass("open")
                    })
                }
                0 === $(event.target).parents(".showRelatedReports").length && Layout.Page.container.find(".showRelatedReports").length > 0 && Layout.Page.container.find(".showRelatedReports").removeClass("open"),
                0 === $(event.target).parents(".showDropdown").length && Layout.Page.container.find(".showDropdown").length > 0 && Layout.Page.container.find(".showDropdown").removeClass("open"),
                0 == $(event.target).parents(".lt_nav .ddown.open").length && Layout.Page.container.find(".lt_nav .ddown.open").length > 0 ? Layout.Page.container.find(".lt_nav .ddown.open").removeClass("open") : ($(event.target).find(".lt_nav .ddown.open").length > 0 || $(event.target).hasClass(".ddown.open")) && Layout.Page.container.find(".ddown.open").not(event.target).removeClass("open")
            }
            $("#zp_user_information").hasClass("in") && ($("#zp_user_information").removeClass("in"),
            $("#logoutbackdrop").remove(),
            ZPeople.OPENMODAL = null),
            $("#zpdas_wid_rename").length > 0 && "zpdas_wid_rename" !== $(event.target).attr("id") && "undefined" != typeof ZPDashboard && ZPDashboard.AdminCustomization.hideAllInput(),
            ZPFeeds.Like.removeLikeOptions(),
            0 !== $("#bf_setting_tbody", Layout.Page.container).length && 0 === $(event.target).parents("#bf_setting_tbody").length && $("#bf_setting_tbody", Layout.Page.container).find(".popover.in").popover("hide")
        }),
        $(document).on("change", function(event) {
            Layout.Page.hash.indexOf("#reports/") >= 0 && 0 !== $(event.target).parents(".reportsFilter").length && 0 !== $(event.target).parents(".ddown").length && $(event.target).parents(".ddown").addClass("open")
        }),
        $(document).on("keyup", function(event) {
            if (27 === event.keyCode) {
                if ($("#zp_user_information").hasClass("in") && void 0 !== $("#logoutbackdrop"))
                    $("#logoutbackdrop").remove(),
                    $("#zp_user_information").removeClass("in"),
                    ZPeople.OPENMODAL = null;
                else if ($("#feedsColorBox").length > 0)
                    $("#feedsColorBox").fadeOut("fast"),
                    $("#feedsColorBox").remove();
                else if ($("#zpfeeds_like_modal").length > 0)
                    ZPFeeds.Like.removeLikeModal();
                else if ($("#zpntfn_detail_modal").length > 0)
                    ZPeople.BSModal.hide("zpntfn_detail_modal");
                else if ($("#zpntfn_modal").length > 0)
                    ZPeople.BSModal.hide("zpntfn_modal");
                else if ($("#announceNotify").hasClass("in") && $("#announceNotify").length > 0)
                    ZPUtil.closeAnnouncementBox();
                else if ($("#feedbackBox").hasClass("open") && $("#feedbackBox").length > 0)
                    ZPUtil.closefeedbackCombo();
                else {
                    var blogView = Layout.Page.container.find("#MediumView");
                    0 !== blogView.length && blogView.hasClass("in") && Announcement.Util.toggleViewAnnouncementDiv()
                }
                if (-1 !== Layout.Page.hash.indexOf("timetracker/scheduler/projectdashboard/users") || -1 !== Layout.Page.hash.indexOf("timetracker/scheduler/projectdashboard/attachments")) {
                    var elements = Layout.Page.container.find(".zp_popdeteact");
                    elements && elements.length > 0 && $.each(elements, function(index, element) {
                        $(this).removeClass("zp_popdeteact")
                    })
                }
            }
            37 === event.keyCode && ($("#feedsColorBox").length > 0 && $("#feedsColorBox").find(".cbxPrev").length > 0 ? ZPFeedsColorBox.loadPrevNextObject(event, !1) : 0 !== Layout.Page.container.find("#MediumView").length && Layout.Page.container.find("#MediumView").hasClass("in") && Announcement.Util.movePrevAndNextAnnouncements(!1)),
            39 === event.keyCode && ($("#feedsColorBox").length > 0 && $("#feedsColorBox").find(".cbxNext").length > 0 ? ZPFeedsColorBox.loadPrevNextObject(event, !0) : 0 !== Layout.Page.container.find("#MediumView").length && Layout.Page.container.find("#MediumView").hasClass("in") && Announcement.Util.movePrevAndNextAnnouncements(!0)),
            13 === event.keyCode && "zpdas_wid_rename" === $(event.target).attr("id") && $(event.target).trigger("blur")
        }),
        ZPeople.Request.send("/getUserOrgList.zp", {
            method: "getUserOrgList",
            userzuid: ZPeople.CURRENT_ZUID
        }, function(result) {
            ZPeople.ORGLIST = result
        }),
        Layout.isPeoplePlus && Layout.isPeoplePLusAdmin && ZPeople.Request.send("/getplandetails.pp", {
            action: "getPlanDetails",
            conreqcsr: csrfToken
        }, function(result) {
            ZPeople.PLANDETAILS = result
        }),
        $("#zp_quickadd_form_outer").on("click", function() {
            ZPTabs.showQuickFormAdd()
        }),
        $("#zpadv_icon").on("click", function() {
            ZPeople.constructAdvertiseMentModal()
        }),
        $(document).on("click", "#zp_quickadd_form_tabs, #zp_desc_dropdown, #ze_dropdown, #ze_autofill, #zp_dashRemoveAttachment, #zpntfn_modal, #like_modal_closebtn", function(e) {
            e.stopPropagation()
        }),
        $(document).on("show.bs.dropdown", "#zp_quickadd_form_outer, #zp_more_option", function() {
            $(this).children("a").find("span").addClass("Tclr")
        }),
        $(document).on("hide.bs.dropdown", "#zp_quickadd_form_outer, #zp_more_option, #zp_dash_attachIcon, #zp_dashRemoveAttachment, #like_modal_closebtn", function() {
            $(this).children("a").find("span").removeClass("Tclr")
        }),
        $(document).on("hide.bs.modal", ".modal", function() {
            0 == $("#zpntfn_detail_modal").length && (ZPFeeds.SINGLEPOP = !1)
        }),
        $(document).on("show.bs.modal", "#zpntfn_modal", ".modal", function() {
            $(this).children("a").find("span").addClass("Tclr")
        }),
        $(document).on("hide.bs.modal", "#zpntfn_modal", ".modal", function() {
            $(this).children("a").find("span").removeClass("Tclr")
        }),
        $(document).on("show.bs.modal", ".modal", function(event) {
            "zp_modal_confirmpop" != event.target.id && (ZPeople.OPENMODAL = this)
        }),
        $(document).on("hide.bs.modal", ".modal", function(event) {
            "zp_modal_confirmpop" != event.target.id && (ZPeople.OPENMODAL = null)
        }),
        $(document).on("click", "[showphoto=true]", function() {
            var Obj = $(this);
            -1 !== Layout.Page.currentmode.indexOf("home/dashboard") ? ZPeople.showProfilePicture($(Obj).children("#zp_dash_image")) : "admin/employeerecords/user" !== Layout.Page.currentmode && "admin/employeerecords/employeeprofile" !== Layout.Page.currentmode || ZPeople.showProfilePicture($(Obj).children("#zp_profile_image"))
        }),
        "true" === ZPeople.isSearchAllowed && ($(document).on("mouseenter", "[popup='user']", function() {
            ZPFeeds.registerDetailPopup(this, $(this).attr("isdashboard"))
        }),
        $(document).on("mouseenter", "[popup='group']", function() {
            ZPFeeds.registerDetailPopup(this)
        }),
        $(document).on("mouseenter", "[popup='dept']", function() {
            ZPFeeds.registerDetailPopup(this)
        })),
        ZPeople.isZPNewUI() ? ($("#zpeople_userimage").length > 0 && ($("#zpeople_userimage").attr("empid", ZPeople.CURR_USER.usererec).attr("imgtype", "thumb")[0].src = ZPeople.CURR_USER.thumb,
        $("#zpeople_userimage").on("click", ZPeople.showLogoutModal)),
        $(window).on("resize", function() {
            ZPTabs.construct(),
            ZPTabs.toggleTab(!0),
            void 0 !== Layout.Page.hashDtl && void 0 !== Layout.Page.hashDtl.wresizecallback && ZPUtil.Validation.isFunction(Layout.Page.hashDtl.wresizecallback) && Layout.Page.call(Layout.Page.hashDtl.wresizecallback)
        })) : ($("#zp_feeds_notifications").on("hidden.bs.dropdown", function() {
            ZPFeeds.SINGLEPOP = !1
        }),
        $(document).on("click", "#zp_ntfn_dropdown", function(e) {
            e.stopPropagation()
        }),
        $(document).on("click", function(event) {
            if (ZPDashboard.Profile.hideUserList(),
            "ze_dropdown" != event.target.id && 0 == $(event.target).parents("#ze_dropdown").length && "zp_dashRemoveAttachment" != event.target.id && 0 == $(event.target).parents("#ze_autofill").length && 0 == $(event.target).parents("#ze_link").length && 0 == $(event.target).parents("#ze_ins_image").length && "zp_dash_feedspost_container" != event.target.id && 0 == $(event.target).parents("#zp_dash_feedspost_container").length && null != ZPFeeds.POSTEDITOR) {
                var status = ZPFeeds.POSTEDITOR.getContent();
                0 === $(status).text().trim().length && 0 == $(status).find("img").length && 0 == Layout.Page.container.find("#zp_dash_feedspost_container").children("#zp_dash_attachments").children("div").length && ZPFeeds.hideTextEditor()
            }
        }),
        $(document).on("show.bs.dropdown", "#zp_feeds_notifications", function() {
            $(this).children("a").find("span").addClass("Tclr")
        }),
        $(document).on("hide.bs.dropdown", "#zp_feeds_notifications", function() {
            $(this).children("a").find("span").removeClass("Tclr")
        }),
        ZPeople.FireScroll.init(ZPFeeds.Notifications.getMoreNotifications, "navbar-header"),
        ZPFeeds.Notifications.initComponents(),
        AcsApi.init("People", csrfParamName, "CSRF_TOKEN"),
        ZPFeeds.Template.init()),
        formsListCustom.formsListPageConstruction.initConstants(),
        ZPeople.isAdminforAcc && !isPlatformOrg) {
            var portal;
            portal = ZPeople.PORTAL_NAME,
            Layout.isPeoplePlus && ZPeople.showCompanyInfoPopUp && Layout.isPeoplePLusAdmin && "#services/listing" !== window.location.hash ? window.open("#services/listing", "_self") : Layout.isPeoplePlus || null != portal && void 0 != portal && "" != portal && !ZPeople.isSampleDataRequestNotRaised ? Layout.isPeoplePlus && (ZPeople.showCompanyInfoPopUp || ZPeople.isSampleDataRequestNotRaised) && Layout.isPeoplePLusAdmin || isadmin && ZPeople.Welcome.showIntroBannerPopUp() : window.open("#admin/gettingStarted", "_self")
        }
        ZPeople.isZPNewUI() || this.initChat()
    },
    initLiveChat: function() {
        Layout.isPeoplePlus ? this.initLiveChatforPeoplePlus() : $("head").append('<script type="text/javascript"> var $zoho=$zoho || {};$zoho.salesiq = $zoho.salesiq || {widgetcode:"d2848d6cfe1f05d909c46a672628308f19a0e58741173adb2ca0290ab017eece", values:{},ready:function(){ $zohosq.values.ishidetooltip = true;}};var d=document;s=d.createElement("script");s.type="text/javascript";s.id="zsiqscript";s.defer=true;s.src="https://salesiq.zoho.com/widget";t=d.getElementsByTagName("script")[0];t.parentNode.insertBefore(s,t);<\/script>')
    },
    initLiveChatForCNSetup: function() {
        Layout.isPeoplePlus || $("head").append('<script type="text/javascript"> var $zoho=$zoho || {};$zoho.salesiq = $zoho.salesiq || {widgetcode:"95ab1bba7d00ecc873a6494162fb49eda78d8f1e1eb4ee7c9170bd1a02a9886020cf19c534c69276e30b25955f2c871f", values:{},ready:function(){}};var d=document;s=d.createElement("script");s.type="text/javascript";s.id="zsiqscript";s.defer=true;s.src="https://salesiq.zoho.com.cn/widget";t=d.getElementsByTagName("script")[0];t.parentNode.insertBefore(s,t);<\/script>')
    },
    initLiveChatForTrial: function() {
        Layout.isPeoplePlus ? this.initLiveChatforPeoplePlus() : $("head").append('<script  type="text/javascript">var $zoho=$zoho || {};$zoho.salesiq = $zoho.salesiq || {widgetcode:"c83f128feec23c4744b86ea7aa3b1194c83d9308b2324d6654ce8ce5e7eaabc0", values:{},ready:function(){}};var d=document;s=d.createElement("script");s.type="text/javascript";s.id="zsiqscript";s.defer=true;s.src="https://salesiq.zoho.com/widget";t=d.getElementsByTagName("script")[0];t.parentNode.insertBefore(s,t);<\/script>')
    },
    initLiveChatforPeoplePlus: function() {
        ZPeople.isChinaSetup || ("true" == ZPeople.ISTRIALUSER ? $("head").append('<script type="text/javascript"> var $zoho=$zoho || {};$zoho.salesiq = $zoho.salesiq || {widgetcode:"ce185bd540425b546050df0cad31a10a32d03a27df221e1097ee6772be5e18410153316b863d24538e0816a7de0f511d", values:{},ready:function(){}};var d=document;s=d.createElement("script");s.type="text/javascript";s.id="zsiqscript";s.defer=true;s.src="https://salesiq.zoho.com/widget";t=d.getElementsByTagName("script")[0];t.parentNode.insertBefore(s,t);<\/script>') : $("head").append('<script type="text/javascript"> var $zoho=$zoho || {};$zoho.salesiq = $zoho.salesiq || {widgetcode:"432487e4dcf211e86994da851f3f3eb205ee334679b710ad31db378ef90adc4c1ec289cd261751efcdc7e07bc2161fc7", values:{},ready:function(){}};var d=document;s=d.createElement("script");s.type="text/javascript";s.id="zsiqscript";s.defer=true;s.src="https://salesiq.zoho.com/widget";t=d.getElementsByTagName("script")[0];t.parentNode.insertBefore(s,t);<\/script>'))
    },
    initLiveChatForEUSetup: function() {
        Layout.isPeoplePlus ? this.initLiveChatforPeoplePlus() : $("head").append('<script type="text/javascript" id="zsiqchat">var $zoho=$zoho || {};$zoho.salesiq = $zoho.salesiq || {widgetcode: "36b3289614936b80eed08459bbd9c75d4031c13046c8a9d947d96312cc745560cbabfa81e68d3087b5ffe4610eece8a0", values:{},ready:function(){}};var d=document;s=d.createElement("script");s.type="text/javascript";s.id="zsiqscript";s.defer=true;s.src="https://salesiq.zoho.eu/widget";t=d.getElementsByTagName("script")[0];t.parentNode.insertBefore(s,t);<\/script>')
    },
    initLiveChatForTrialForEUSetup: function() {
        Layout.isPeoplePlus ? this.initLiveChatforPeoplePlus() : $("head").append('<script type="text/javascript" id="zsiqchat">var $zoho=$zoho || {};$zoho.salesiq = $zoho.salesiq || {widgetcode: "2d6e97a5aecd24ad492a2a58079b41974031c13046c8a9d947d96312cc745560f0f4f9e437cc2574650a4831e371417a", values:{},ready:function(){}};var d=document;s=d.createElement("script");s.type="text/javascript";s.id="zsiqscript";s.defer=true;s.src="https://salesiq.zoho.eu/widget";t=d.getElementsByTagName("script")[0];t.parentNode.insertBefore(s,t);<\/script>')
    },
    isZPNewUI: function() {
        return !0
    },
    updateStartupPromo: function() {
        $.post("/updateStartupPromo.zp", {
            method: "startupPromo"
        }, function(result) {})
    },
    getUserPage: function(id) {
        id === erecno ? window.location.href = "#selfservice/user/profile" : window.location.href = "#selfservice/user/profile-id:" + id
    },
    PROFILE_IMGUSER: null,
    showProfilePicture: function(userimgdtl) {
        var userid = $(userimgdtl).attr("empid");
        void 0 == userid && (userid = $(userimgdtl).siblings("img").attr("empid")),
        ZPeople.showProfilePhotoById(userid)
    },
    showProfilePhotoById: function(userid) {
        0 !== $("#zp_profilephoto").length && $("#zp_profilephoto").remove(),
        ZPeople.resetform(),
        ZPeople.PROFILE_IMGUSER = userid,
        ZPeople.showPhoto(userid, !0)
    },
    changePhoto: function(Obj) {
        var userDtl = ZPeople.getUserDetailsById(ZPeople.PROFILE_IMGUSER);
        $("#zp_profilephoto").find("#zp_modal_header").html(ZPI18N.getString("zp.selectprofilephoto")),
        $("#zp_profilephoto").find("#zp_modal_body").html('<div id="changephotohtml" class="ZPaddpho"><div class="box" onclick=$("#choosed_file").trigger("click");><div class="ZPadpho"></div> <p>' + ZPI18N.getString("zp.dragaprofilephotohere") + '</p> </div><div class="ZPselpho PR"><span class="ortxt">or</span><div class="btn btn-primary"><span>' + ZPI18N.getString("zp.selectaphotofromyourcomputer") + '</span><form enctype="multipart/form-data" id="photoupload" method="post" target="uploadwindow"><input type="file" id="choosed_file" name="fileToUpload" class="ZPFfile" onchange="ZPeople.uploadPhoto()"><input type="hidden" name="conreqcsr" id="uplod"/><input type="hidden" value="' + userDtl.usererec + '" name="recordId"/></form><iframe id="uploadwindow" name="uploadwindow" style="display:none;" ></iframe></div></div></div>'),
        $("#zp_profilephoto").find("#zp_modal_footer").html(""),
        $("#zp_profilephoto").removeClass("ZPPhoto")
    },
    getPhotoPath: function(path, zuid) {
        return void 0 != path && null != path && 0 == path.indexOf("/newhr/images/sampleemployeephotos/") ? path : "1" !== orgPhotoDisplayType || ZPUtil.Validation.isEmpty(path) ? "null" !== zuid ? contactUrl + "/file?ID=" + zuid + "&fs=thumb" : ZPeople.getDefaultUserImagePath() : "viewPhoto?filename=" + path
    },
    getDefaultUserImagePath: function() {
        return ("undefined" != typeof imgurl ? imgurl + "people2" : "") + "/images/user.png"
    },
    uploadPhoto: function() {
        if ("" !== $("#choosed_file").val()) {
            var form = $("form#photoupload").children("#choosed_file");
            ZPUtil.isAllowedFormatForImage($("#choosed_file").val()) ? ZPUtil.isFileSizeExceed(form, null, !0) ? ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.photolengthwarning")) : ($("#photoupload").find("input[name = conreqcsr]").val(csrfToken),
            $("#photoupload").attr("action", "PhotoUpload.zp"),
            $("#photoupload").trigger("submit"),
            $("#zp_profilephoto").find("#changephotohtml").children().addClass("DN"),
            $("#zp_profilephoto").find("#zp_modal_header").html(ZPI18N.getString("zp.uploadphoto")),
            $("#zp_profilephoto").find("#changephotohtml").prepend("<span class='ZPultxt'>" + ZPI18N.getString("zp.uploading") + "...</span>" + ZPeople.LOADING_HTML),
            $("#zp_profilephoto").find(".ctable").css("height", "0%")) : ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.allowedimagetypes"))
        }
    },
    resetform: function() {
        $("#choosed_file").val(""),
        $("#uplod").val(""),
        Layout.Page.urlparam.hasOwnProperty("profilepicId") && (delete Layout.Page.urlparam.profilepicId,
        window.location.href = "#" + Layout.UrlConf.generatePageHash())
    },
    showCropPhoto: function(url, path, status) {
        $("#zp_profilephoto").find("#zp_modal_header").html(ZPI18N.getString("zp.cropphoto")),
        $("#zp_profilephoto").find("#zp_modal_body").html("<img id='uploadedPhoto' src='" + url + "'><input type='hidden' name='uploadFile' id='fileType' value='" + path + "' /><input type='hidden' name='recordId' id='userrecordId' value='" + ZPeople.PROFILE_IMGUSER + "'/><input type='hidden' name='x' id='xVal' /><input type='hidden' name='y' id='yVal' /><input type='hidden' name='width' id='width' /><input type='hidden' name='height' id='height'/>"),
        $("#zp_profilephoto").find("#zp_modal_footer").html('<div class="modal-footer text-left" id="footerbutton"><button type="button" id="uploadbutton" class="btn btn-primary FL ST2"  onclick="ZPeople.uploadPhoto()">' + ZPI18N.getString("zp.cropphoto") + '</button><button type="button"  class="btn btn-default FL" data-dismiss="modal" aria-label="Close" aria-hidden="true"  onclick="ZPeople.resetform()">' + ZPI18N.getString("zp.cancel") + "</button></div>"),
        $("#zp_profilephoto").removeClass("ZPPhoto"),
        $("#zp_profilephoto").modal(),
        ZPeople.cropPhoto()
    },
    handleUploadPhotoError: function(errormsg) {
        "NO_PERMISSION" === errormsg ? ZPeople.Message.showFailureMsg(ZPI18N.getString("zp.permdenied")) : "ERROR" === errormsg && ZPeople.Message.showFailureMsg(ZPI18N.getString("zp.sorryservererror"))
    },
    cropPhoto: function() {
        $("#zp_profilephoto").find("#footerbutton").children("#uploadbutton").attr("onclick", "ZPeople.uploadCropImage()"),
        $("#zp_profilephoto").find("#uploadedPhoto").css("cursor", "crosshair"),
        $("#zp_profilephoto").find("#uploadedPhoto").Jcrop({
            bgColor: "black",
            onSelect: ZPeople.getPosition,
            bgFade: !0,
            bgOpacity: .7,
            minSize: [0, 0],
            aspectRatio: 1
        }, function() {
            bounds = this.getBounds(),
            boundx = bounds[0],
            boundy = bounds[1],
            this.setSelect(ZPeople.getDimensions(this))
        })
    },
    getDimensions: function(jcrop_api) {
        var cropbox = jcrop_api.ui.holder
          , cropbox_width = $(cropbox).width()
          , cropbox_height = $(cropbox).height();
        if (cropbox_width == cropbox_height)
            return [0, 0, cropbox_width, cropbox_height];
        if (cropbox_width < cropbox_height) {
            var a = cropbox_width;
            return [0, x = Math.round((cropbox_height - cropbox_width) / 2), 0, x + a]
        }
        if (cropbox_width > cropbox_height) {
            var x;
            a = cropbox_height;
            return [x = Math.round((cropbox_width - cropbox_height) / 2), 0, x + a, 0]
        }
        return [Math.round(cropbox_width / 2 - preview_width / 2), Math.round(cropbox_height / 2 - preview_height / 2), Math.round(cropbox_width / 2 + preview_width / 2), Math.round(cropbox_height / 2 + preview_height / 2)]
    },
    getPosition: function(coords) {
        $("#zp_profilephoto").find("input#xVal").val(parseInt(coords.x)),
        $("#zp_profilephoto").find("input#width").val(parseInt(coords.w)),
        $("#zp_profilephoto").find("input#yVal").val(parseInt(coords.y)),
        $("#zp_profilephoto").find("input#height").val(parseInt(coords.h))
    },
    uploadCropImage: function() {
        var params = {
            x: $("input#xVal").val(),
            y: $("input#yVal").val(),
            width: $("input#width").val(),
            height: $("input#height").val(),
            recordId: $("input#userrecordId").val()
        };
        -1 == $("input#fileType").val().indexOf("mode") && (params.uploadFile = $("input#fileType").val()),
        ZPeople.Request.send("/cropImg.zp", params, ZPeople.showPhotoDifference),
        $("#zp_profilephoto").find("#zp_modal_body").html(ZPeople.LOADING_HTML),
        $("#zp_profilephoto").find("#zp_modal_footer").html("")
    },
    showPhoto: function(id, isNew, profilepicId) {
        var userDtl = ZPeople.getUserDetailsById(id)
          , isAdmin = ZPeople.isAdmin("USERS")
          , footerHtml = ""
          , picHtml = ""
          , isAppended = !1
          , isDirectApproval = !0 === isNew;
        if (ZPeople.isProfilePicDCFEnabled) {
            var params = {
                mode: "fetchLatestPPRecord",
                erecno: id
            };
            void 0 != profilepicId && (params.profilepicId = profilepicId),
            ZPeople.Request.sendAsyncPost(transfers.URL, params, function(response) {
                if ("success" === response.status)
                    if (isAppended = !0,
                    ZPApprovals.RECORDID = response.recordDetails[0]["DatachangeRecord.ID"],
                    ZPForm.preparam = ZPForm.CURRFORM_PARAM,
                    ZPForm.CURRFORM_PARAM.formId = ZPApprovals.FORMID = response.transferDetails.formDetails.formId,
                    ZPForm.CURRFORM_PARAM.tableName = "dc_EmployeePhotoChanges",
                    ZPForm.SINGLE_RECORD_DTL[ZPApprovals.FORMID + "_" + ZPApprovals.RECORDID] = {
                        record: {
                            message: response.recordDetails[0]
                        }
                    },
                    ZPForm.SINGLE_RECORD_DTL[ZPApprovals.FORMID + "_" + ZPApprovals.RECORDID].tableName = "dc_EmployeePhotoChanges",
                    isDirectApproval)
                        ZPApprovals.getApprovalDetails(!1);
                    else {
                        var img = "<div><p>" + ZPI18N.getString("zp.profilephoto.new") + '</p><div><img src="' + ("" == response.recordDetails[0].Photo ? ZPeople.getDefaultUserImagePath() : "viewPhoto?filename=" + response.recordDetails[0].Photo.split("|")[1]) + '"></div></div>'
                          , prevImg = "<div><p>" + ZPI18N.getString("zp.profilephoto.old") + '</p><div><img src="' + ("" == response.recordDetails[0]["Photo.PREVIOUS"] ? ZPeople.getDefaultUserImagePath() : -1 === response.recordDetails[0]["Photo.PREVIOUS"].indexOf("sampleemployeephotos") ? "viewPhoto?filename=" + response.recordDetails[0]["Photo.PREVIOUS"].split("|")[1] : response.recordDetails[0]["Photo.PREVIOUS"]) + '"></div></div>';
                        picHtml = '<div class="modal-dialog" role="document"><div class="modal-content"><div class="modal-header PR"><button type="button" id="closebutton" class="close" data-dismiss="modal" aria-label="Close" onclick="ZPeople.resetform()"><span aria-hidden="true"><div class="IC-cls-1px red S21 CP"></div></span></button><div class="act-prophoto"><div class="sts-pht zp_dyn" id="headerApprovalBtn"><span></span><a id="zp_appproval_comment_btn" class="btn btn-primary btn-sm" onclick="ZPApprovals.getApprovalDetails(true)">' + ZPI18N.getString("zp.view") + '</a><a id="showApprBtn" class="zp_aPrvWait btn btn-primary btn-sm">' + ZPI18N.getString("zp.viewapprovers") + '</a></div></div><h6 id="zp_modal_header">' + userDtl.name + " , " + userDtl.empid + '</h6></div><div id="zp_modal_body" class="modal-body P0I"><div class="prophoto-update">' + prevImg + img + "</div></div></div></div>",
                        isNew ? $("body").append('<div class="modal fade ZPPmdl" role="dialog" id="zp_profilephoto" aria-hidden="true">' + picHtml + "</div>") : ($("#zp_profilephoto").html(picHtml),
                        $("#zp_profilephoto").removeClass("ZPPhoto")),
                        response.transferDetails.formDetails.approvalSettingsDetails.isApprovalEnabled && ZPApprovals.showApprovalHeader(response.recordDetails[0].ApprovalStatus, response.isRecordApprover, response.isPrimaryAppr, {
                            isProfilePic: !0,
                            layout: $("#zp_profilephoto"),
                            approvalSettingsDetails: response.transferDetails.formDetails.approvalSettingsDetails
                        })
                    }
            })
        }
        if (!isAppended) {
            if ((erecno === userDtl.usererec && "0" === orgPhotoDisplayType || isAdmin) && (footerHtml += '<button type="button" class="btn btn-primary FL ST1" onclick="ZPeople.changePhoto(this)">' + ZPI18N.getString("zp.changeprofilepicture") + "</button>"),
            (isAdmin || "0" === orgPhotoDisplayType && erecno === userDtl.usererec) && userDtl.hasZPImg) {
                var fileId = userDtl.originalphoto.split("=")[1];
                footerHtml += '<button type="button" class="btn btn-primary FL ST1" onclick="ZPeople.showCropPhoto(\'' + userDtl.originalphoto + "', '" + fileId + "')\">" + ZPI18N.getString("zp.cropphoto") + "</button>"
            }
            picHtml = '<div class="modal-dialog" role="document"><div class="modal-content"><div class="modal-header PR"><button type="button" id="closebutton" class="close" data-dismiss="modal" aria-label="Close" onclick="ZPeople.resetform()"><span aria-hidden="true"><div class="IC-cls-1px red S21 CP"></div></span></button><h4 class="modal-title" id="zp_modal_header">' + userDtl.name + " , " + userDtl.empid + '</h4></div><div id="zp_modal_body" class="modal-body P0I"><img class="propic" src="' + (ZPUtil.Validation.isEmpty(userDtl.zpeoplePhoto) ? "" + userDtl.avatar : "" + userDtl.zpeoplePhoto) + '"></div>' + ("" != footerHtml ? '<div class="modal-footer text-left" id="zp_modal_footer">' + footerHtml + "</div>" : "") + "</div></div>",
            isNew ? $("body").append('<div class="modal fade ZPPmdl ZPPhoto" role="dialog" id="zp_profilephoto" aria-hidden="true">' + picHtml + "</div>") : ($("#zp_profilephoto").html(picHtml),
            $("#zp_profilephoto").hasClass("ZPPhoto") || $("#zp_profilephoto").addClass("ZPPhoto"))
        }
        isNew && $("#zp_profilephoto").modal()
    },
    showPhotoDifference: function(croppedphoto, params) {
        if (croppedphoto.success) {
            var userDtl = ZPeople.getUserDetailsById(params.recordId)
              , img = "<div><p>" + ZPI18N.getString("zp.profilephoto.new") + '</p><div><img src="' + ("" == croppedphoto.Photo ? ZPeople.getDefaultUserImagePath() : "viewPhoto?filename=" + croppedphoto.Photo.split("|")[1]) + '"></div></div>'
              , prevImg = "<div><p>" + ZPI18N.getString("zp.profilephoto.current") + '</p><div><img src="' + ("" == croppedphoto["Photo.PREVIOUS"] ? ZPeople.getDefaultUserImagePath() : -1 === croppedphoto["Photo.PREVIOUS"].indexOf("sampleemployeephotos") ? "viewPhoto?filename=" + croppedphoto["Photo.PREVIOUS"].split("|")[1] : croppedphoto["Photo.PREVIOUS"]) + '"></div></div>'
              , footerHtml = '<button type="button" class="btn btn-primary FL ST1" id="addProfilePic" onclick="transfers.addProfilePicRecord(\'' + params.recordId + "', '" + croppedphoto.Photo + "')\">" + ZPI18N.getString("zp.setasprofilephoto") + "</button>"
              , picHtml = '<div class="modal-dialog" role="document"><div class="modal-content"><div class="modal-header PR"><button type="button" id="closebutton" class="close" data-dismiss="modal" aria-label="Close" onclick="ZPeople.resetform()"><span aria-hidden="true"><div class="IC-cls-1px red S21 CP"></div></span></button><h6 id="zp_modal_header">' + userDtl.name + " , " + userDtl.empid + '</h6></div><div id="zp_modal_body" class="modal-body P0I"><div class="prophoto-update">' + prevImg + img + '</div></div><div class="modal-footer text-left" id="zp_modal_footer">' + footerHtml + "</div></div></div>";
            $("#zp_profilephoto").html(picHtml)
        } else
            croppedphoto.hasOwnProperty("message") ? (ZPeople.Message.showFailureMsg(croppedphoto.message),
            $("#zp_profilephoto").modal("hide")) : "DIFFERENT_USER" === croppedphoto.response ? ZPeople.Message.showFailureMsg(ZPI18N.getString("zp.unabletoprocess")) : ZPeople.Message.showFailureMsg(ZPI18N.getString("zp.unabletoconnectwithserver"))
    },
    showuploadedPhoto: function(croppedphoto, params) {
        if ("success" === croppedphoto.status) {
            var userDtl = ZPeople.getUserDetailsById(params.recordId);
            if (croppedphoto.hasOwnProperty("hasProfilePicDCF") && (ZPeople.isProfilePicDCFEnabled = croppedphoto.hasProfilePicDCF),
            void 0 !== croppedphoto.images && "" !== croppedphoto.images)
                croppedphoto.images.split("|").length > 0 && void 0 !== params.recordId && (userDtl.avatarid = croppedphoto.avatarid,
                ZPeople.setPhotoURL("1", void 0, userDtl));
            ZPeople.Message.showSuccessMsg(ZPI18N.getString("zp.photouploadedsuccessfully")),
            $("#zp_profilephoto").find("#zp_modal_header").html(userDtl.name + " , " + userDtl.empid),
            ZPeople.showPhoto(params.recordId),
            $("img[empid=" + userDtl.usererec + "], img[empid=" + userDtl.id + "]").each(function() {
                var imgType = $(this).attr("imgtype");
                this.src = "thumb" === imgType ? userDtl.thumb : "original" === imgType ? userDtl.originalphoto : "zpimg" === imgType ? userDtl.zpeoplePhoto : userDtl.avatar
            }),
            "selfservice_user_profile" === Layout.Page.urlmode && SelfService.Profile.load()
        } else
            croppedphoto.hasOwnProperty("message") ? (ZPeople.Message.showFailureMsg(croppedphoto.message),
            $("#zp_profilephoto").modal("hide")) : "DIFFERENT_USER" === croppedphoto.response ? ZPeople.Message.showFailureMsg(ZPI18N.getString("zp.unabletoprocess")) : ZPeople.Message.showFailureMsg(ZPI18N.getString("zp.unabletoconnectwithserver"))
    },
    stopEvents: function(ev) {
        void 0 === ev && (ev = window.event),
        ev.stopPropagation ? (ev.preventDefault(),
        ev.stopPropagation()) : (ev.cancelBubble = !0,
        ev.returnValue = !1)
    },
    initChat: function() {
        try {
            if (null != ZPeople.phoneBridgeConfig && WebMessanger.enablePhoneBridge(ZPeople.phoneBridgeConfig),
            ZPeople.FOOTEROPTIONS_HTML = "",
            -1 != document.domain.indexOf("zoho.com") || -1 != document.domain.indexOf("zoho.eu") || -1 != document.domain.indexOf("zoho.com.cn") || -1 != document.domain.indexOf("zoho.in") || -1 != document.domain.indexOf("zoho.jp") || Layout.ISDEV || Layout.ISLOCALIDCSETUP ? WebMessanger.setNoDomainChange() : (WebMessanger.useSameDomain(),
            WebMessanger.enableTokenPairAuth()),
            WebMessanger.enableGlobalSearch(),
            ZPeople.FOOTER_CLASS += " search",
            "true" == isZiaBotEnabled && WebMessanger.setMaxChatWindow(3),
            "true" === ZPeople.ISCHAT && top === window ? WebMessanger.register("HR", ZPeople.CURRENT_ZUID, !1) : ZPeople.zaid ? WebMessanger.register("HR", ZPeople.CURRENT_ZUID, !0, null, null, ZPeople.zaid) : (WebMessanger.register("HR", ZPeople.CURRENT_ZUID, !0),
            initZGS = {
                gsrebrand: WebMessanger.rebrand,
                gslanguage: currLanguage
            },
            loadjscssfile(ZPeople.jsStaticURL + "/zohosearch/h1/js/gshandler.js?_T=" + (new Date).getTime(), "js", function() {
                zgssearch.initZGSHandler(initZGS)
            })),
            WebMessanger.setLocale(currLanguage, currCntry),
            isadmin && ZPeople.LIVECHAT && !Layout.ISDEV)
                if (ZPeople.isChinaSetup)
                    "true" == ZPeople.ISTRIALUSER || "true" === ZPeople.ISPAIDUSER ? (ZPeople.FOOTER_CLASS += " livechat",
                    this.initLiveChatForCNSetup()) : (ZPeople.FOOTER_CLASS += " nolivechat",
                    this.initFeedback());
                else if (ZPeople.isEuropeSetup || 1 == isCXInEURegion)
                    "true" == ZPeople.ISTRIALUSER || "true" === ZPeople.ISPREMIUMADDONENABLED ? ("true" == ZPeople.ISTRIALUSER ? this.initLiveChatForTrialForEUSetup() : this.initLiveChatForEUSetup(),
                    ZPeople.FOOTER_CLASS += " livechat") : (ZPeople.FOOTER_CLASS += " nolivechat",
                    this.initFeedback());
                else if ("true" == ZPeople.ISTRIALUSER || "true" === ZPeople.ISPREMIUMADDONENABLED) {
                    if ("true" == ZPeople.ISTRIALUSER)
                        this.initLiveChatForTrial();
                    else {
                        this.initLiveChat();
                        var startInterval = setInterval(function() {
                            var obj = $(".zls-btnsub.zls-lftbtn");
                            void 0 !== obj && obj.children().length > 0 && ($(".zls-small.zls-btnmn.zls-btrht").addClass("P0I"),
                            $(".zls-btnsub.zls-lftbtn #zls_ctn_wrap").css("height", "28px"),
                            "735594" == _LOGGEDIN_ZSOID && $(".zls-btnmn").css("margin-right", "29px"),
                            clearInterval(startInterval))
                        }, 10)
                    }
                    ZPeople.FOOTER_CLASS += " livechat"
                } else
                    ZPeople.FOOTER_CLASS += " nolivechat",
                    this.initFeedback();
            else
                ZPeople.FOOTER_CLASS += " nolivechat",
                this.initFeedback();
            var params = {
                mode: "GET_BOTTOMBANNER_RECORDS",
                isNoNeedRecs: !0,
                conreqcsr: csrfToken
            }
              , isDefaultBannerOpen = !1;
            $.post("/commonAction.zp", params, function(resultData) {
                var lastBannerId = ZPeople.getCookie("People_BottomBanner");
                if (void 0 !== resultData.bannerDetails) {
                    var det = resultData.bannerDetails[0];
                    if (void 0 != det && det.isIconVisible) {
                        var sparkle = !1;
                        void 0 !== lastBannerId && lastBannerId == det.bannerid || (det.isDefaultOpen && (isDefaultBannerOpen = !0),
                        1 == det.isLatestAvail && (sparkle = !0));
                        var data = '<a class="CR-annonce ZPtitle" title="" data-original-title="' + ZPI18N.getString("zp.announcement") + '" id="announce" onclick="ZPUtil.announcementAlert(this.event)">' + (sparkle ? "<b></b>" : "") + "</a>";
                        ZPeople.FOOTEROPTIONS_HTML = data + ZPeople.FOOTEROPTIONS_HTML
                    }
                }
                var botHtml = "";
                1 == resultData.isBotEnabled && (botHtml = ' <span class="CR-zia" onclick="ziaPeople.ziaChatClick()"></span>'),
                -1 != window.location.origin.indexOf("sparsh.sanmargroup.com") && (ZPeople.FOOTEROPTIONS_HTML = "",
                $("#zpadv_icon").remove());
                var html = ' <div class="zpfoot-nav" id="footerOptions">' + botHtml + ZPeople.FOOTEROPTIONS_HTML + "</div>";
                $("body").addClass(ZPeople.FOOTER_CLASS),
                "true" === ZPeople.ISCHAT ? ($("body").find("#wmsstatusbar").find("#footerOptions").remove(),
                $("body").append('<div class="zpfoot-nav" id="footerOptions">' + botHtml + "</div>"),
                WmsUIImpl.UIReady = function() {
                    $("body").find("#footerOptions").remove(),
                    WebMessanger.disableWMSStatus(),
                    WebMessanger.setServiceStatus(html)
                }
                ) : ($("body").find("#footerOptions").remove(),
                $("body").append(html)),
                isDefaultBannerOpen && setTimeout(function() {
                    $("body").find("#announce").trigger("click")
                }, 1e3)
            }),
            0 == $("#apibannerhead").length && ZPeople.showAuthtknDeprPopUp(),
            ZPeople.initBodyObserver()
        } catch (e) {}
    },
    initBodyObserver: function() {
        new MutationObserver(function(mobs) {
            for (var eInd = 0; eInd < mobs.length; eInd++) {
                var element = mobs[eInd];
                if (void 0 != element && void 0 != element.addedNodes && element.addedNodes.length > 0)
                    for (var i = 0; i < element.addedNodes.length; i++) {
                        var obj = element.addedNodes[i];
                        if ($(obj).find('[cstus="true"]').length > 0) {
                            var id = $(obj).find('[cstus="true"]').attr("uid");
                            if (!isNaN(id)) {
                                var cName = ZPUsers.getChatStatusClass(id);
                                ZPUtil.Validation.isEmpty(cName) || ($(obj).find('[cstus="true"]').removeClass("OnMob IC-mobi grn org onlin oflin busy idle"),
                                $(obj).find('[cstus="true"]').addClass(cName))
                            }
                        }
                        if ($(obj).find('[ischat="true"]').length > 0)
                            for (var chat = 0; chat < $(obj).find('[ischat="true"]').length; chat++) {
                                id = $($(obj).find('[ischat="true"]')[chat]).attr("uid");
                                isNaN(id) || $($(obj).find('[ischat="true"]')[chat]).attr("onclick", 'ZPeople.initUserChat(event,"' + id + '")')
                            }
                    }
            }
        }
        ).observe(document.body, {
            childList: !0,
            subtree: !0
        })
    },
    initUserChat: function(event, id) {
        event.stopPropagation(),
        void 0 !== id && WebMessanger.chat(id)
    },
    initFeedback: function() {
        if (ZPeople.isContactSupportVisible) {
            ZPeople.FOOTEROPTIONS_HTML += '<a class="CR-feedback ZPtitle" title data-original-title="Feedback" onclick="ZPeople.ContactSupport.openPopUp();"></a>'
        }
    },
    pageMaskLayer: function(freeze) {
        freeze ? 0 === $("#zp_mask_layer").length && $("#wrapper").append('<div class="ZPMask" id="zp_mask_layer"></div>') : $("#zp_mask_layer").remove()
    },
    toggleminmaxClass: function(isMax) {
        !0 === isMax ? ($("body").removeClass("ZPsbarMini"),
        setTimeout(function() {
            $("body").find("#zp_main_subtabs").addClass("in")
        }, 100),
        ZPTabs.registerTabHoverEvents(!1, !1)) : ($("body").addClass("ZPsbarMini"),
        $("body").find("#zp_main_subtabs").removeClass("in"),
        ZPTabs.registerTabHoverEvents(!1, !0))
    },
    minmaxTab: function(disableUpdate) {
        if ("0" !== ZPeople.USER_CUST_SETTINGS.USER_TAB_MINIMIZE || !$("body").hasClass("ZPsbarMini") || Layout.Page.isCP || "organization/employee/search" === Layout.Page.currentmode)
            if (Layout.Page.isCP && "1" == ZPeople.USER_CUST_SETTINGS.USER_TAB_MINIMIZE)
                $("#zp_main_subtabs").hasClass("in") ? $("#zp_main_subtabs").removeClass("in") : $("#zp_main_subtabs").addClass("in");
            else {
                var Obj = $("#zp_minimax_leftpanel")
                  , isSService = !1;
                "/hr" === ZPeople.CONTEXT || "/zp" == ZPeople.CONTEXT && "selfservice" !== ZPTabs.currMainTab && "announcements" !== ZPTabs.currMainTab && "#admin" !== Layout.Page.hash ? $("body").toggleClass("ZPsbarMini").one("transitionend", function() {
                    void 0 == $("#container").highcharts() && void 0 == $("#container1").highcharts() && void 0 == $("#deptCount").highcharts() || ($("#container").highcharts().reflow(),
                    $("#container1").highcharts().reflow(),
                    $("#deptCount").highcharts().reflow()),
                    setTimeout(function() {
                        Appraisal.Budget.handleTableHeader()
                    }, 200),
                    setTimeout(function() {
                        Timetracker.Util.handleTableHeader(),
                        Attendance.handleTableHeader()
                    }, 300)
                }) : isSService = !0,
                $("#zp_custdashboardselmodal").length > 0 && $("body").toggleClass("modal-openL modal-openLE");
                var value = "1"
                  , title = ZPI18N.getString("zp.maximize");
                !isSService && $("body").hasClass("ZPsbarMini") || (title = ZPI18N.getString("zp.minimize"),
                value = "0");
                Obj.attr("title", title).tooltip("fixTitle"),
                disableUpdate || Obj.tooltip("show"),
                "1" === value ? $("#zpeople_tabs_container").children().children("li.active").find("[id^=zp_tablist_]").slideUp(10) : $("#zpeople_tabs_container").children().children("li.active").find("[id^=zp_tablist_]").slideDown(),
                disableUpdate || ZPeople.User.updateTabMinimize(value)
            }
    },
    triggerMinMax: function() {
        "0" === ZPeople.USER_CUST_SETTINGS.USER_TAB_MINIMIZE ? ($("body").removeClass("ZPsbarMini"),
        $("body").find("#zp_main_subtabs").addClass("in"),
        $("#zp_minimax_leftpanel").attr("data-original-title", ZPI18N.getString("zp.minimize"))) : ($("body").find("#zp_main_subtabs").removeClass("in"),
        $("body").addClass("ZPsbarMini"),
        $("#zp_minimax_leftpanel").attr("data-original-title", ZPI18N.getString("zp.maximize")))
    },
    toggleDropdown: function(id) {
        $("#" + id).is(":visible") ? $("#" + id).hide() : ($(".ZPoverlap, #zp_user_profile_pop").hide(),
        $("#" + id).show())
    },
    ALL_USER_LOADED: !1,
    ALL_USERLIST: null,
    getUserListData: function() {
        return ZPeople.ALL_USER_LOADED || null !== ZPeople.ALL_USERLIST || (ZPeople.ALL_USERLIST = ZPeople.sendUserListAjax(void 0, !1, !0)),
        ZPeople.ALL_USERLIST
    },
    getUserDetailsByIds: function(list, isZuids) {
        for (var noUserList = [], returnList = [], usrCnt = 0; usrCnt < list.length; usrCnt++) {
            var userDtl = ZPeople.getUserDetailsById(list[usrCnt].empzuid ? list[usrCnt].empzuid : list[usrCnt], !0);
            void 0 != userDtl && userDtl.notFound ? noUserList.push(list[usrCnt]) : returnList.push(userDtl)
        }
        return noUserList.length > 0 && (returnList = returnList.concat(ZPeople.sendUserListAjax(noUserList, isZuids))),
        returnList
    },
    sendUserListAjax: function(userList, isZuids, isAll) {
        var result = []
          , params = {
            mode: "GET_ORG_USERLIST_NEW",
            isInit: !1,
            isZuids: isZuids,
            isAll: isAll,
            conreqcsr: csrfToken
        };
        if (!isAll) {
            var userIds = [];
            for (i = 0; i < userList.length; i++)
                ZPUtil.Validation.isEmpty(userList[i].trim()) || userIds.push(userList[i].trim());
            if (!(userIds.length > 0))
                return result;
            params.userIds = JSON.stringify(userIds)
        }
        return $.ajax({
            url: ZPeople.COMMON_URL,
            data: params,
            type: "POST",
            async: !1,
            success: function(data) {
                data.success && (ZPeople.isProfilePicDCFEnabled = data.response.hasProfilePicDCF,
                result = isAll ? ZPeople.constructUserDetailsAll(data.response) : ZPeople.constructUserDetails(data.response))
            }
        }),
        result
    },
    constructUserDetailsAll: function(response) {
        ZPeople.ALL_USERLIST = [];
        var returnList = [];
        if (void 0 != response) {
            var userList = response.userList;
            if (ZPeople.isProfilePicDCFEnabled = response.hasProfilePicDCF,
            void 0 != userList)
                for (var uCnt = 0; uCnt < userList.length; uCnt++) {
                    var userDtl = ZPeople.getUserJSON(userList[uCnt], response);
                    ZPeople.ALL_USERLIST.push(userDtl),
                    returnList.push(userDtl)
                }
        }
        return ZPeople.ALL_USER_LOADED = !0,
        ZPeople.ALL_USERLIST
    },
    constructUserDetails: function(response) {
        null == ZPeople.USER_LIST && (ZPeople.USER_LIST = []);
        var returnList = [];
        if (void 0 != response) {
            var userList = response.userList;
            if (ZPeople.isProfilePicDCFEnabled = response.hasProfilePicDCF,
            void 0 != userList)
                for (var uCnt = 0; uCnt < userList.length; uCnt++) {
                    var userDtl = ZPeople.getUserJSON(userList[uCnt], response);
                    ZPeople.USER_LIST.push(userDtl),
                    returnList.push(userDtl)
                }
        }
        return returnList
    },
    getUserDetailsByIdInList: function(id, userList) {
        for (var uCnt = 0; uCnt < userList.length; uCnt++) {
            var userDtl = userList[uCnt];
            if (id += "",
            userDtl.id === id || userDtl.usererec === id)
                return userDtl
        }
    },
    getUserDetailsByIdInAll: function(id) {
        if (ZPeople.ALL_USER_LOADED)
            for (var userList = ZPeople.ALL_USERLIST, uCnt = 0; uCnt < userList.length; uCnt++) {
                var userDtl = userList[uCnt];
                if (id += "",
                userDtl.id === id || userDtl.usererec === id)
                    return userDtl
            }
        else
            ZPeople.getUserDetailsById(id)
    },
    getSubUsers: function(erecNo, isSubOnly, isOnlyPrimarySub) {
        if (void 0 == erecNo && (erecNo = erecno),
        erecNo === erecno && !isSubOnly && !isOnlyPrimarySub)
            return ZPeople.SUB_USERLIST;
        if (erecNo === erecno && isSubOnly && !isOnlyPrimarySub) {
            for (var subUserList = [], subUserListLength = ZPeople.SUB_USERLIST.length, subUserCount = 0; subUserCount < subUserListLength; ++subUserCount)
                erecNo !== ZPeople.SUB_USERLIST[subUserCount] && subUserList.push(ZPeople.SUB_USERLIST[subUserCount]);
            return subUserList
        }
        var sub = []
          , loop = 1;
        for (i = 0; i < loop; i++) {
            for (var newsub = [], userList = ZPeople.getUserListData(), userCnt = 0; userCnt < userList.length; userCnt++) {
                var userDtl = userList[userCnt];
                userDtl.reportingTo !== erecNo && -1 === sub.indexOf(userDtl.reportingTo) && (isOnlyPrimarySub || userDtl.dualReportTo !== erecNo && -1 === sub.indexOf(userDtl.dualReportTo)) || -1 !== sub.indexOf(userDtl.usererec) || -1 !== newsub.indexOf(userDtl.usererec) || "true" !== userDtl.isLogEnb && "true" !== userDtl.isNonUser || newsub.push(userDtl.usererec)
            }
            newsub.length > 0 && loop++,
            sub = sub.concat(newsub)
        }
        return sub
    },
    getDRUserCount: function(erecNo) {
        for (var userList = ZPeople.getUserListData(), count = 0, userCnt = 0; userCnt < userList.length; userCnt++) {
            userList[userCnt].reportingTo === erecNo && count++
        }
        return count
    },
    getUserDetailsById: function(id, isCheck, isZuids) {
        if (id + "" != "null" && id + "" != "undefined") {
            for (var retuserDtl = {}, userList = ZPeople.USER_LIST, isFound = !1, uCnt = 0; uCnt < userList.length; uCnt++) {
                var userDtl = userList[uCnt];
                if (id += "",
                userDtl.id === id || userDtl.usererec === id) {
                    retuserDtl = userDtl,
                    isFound = !0;
                    break
                }
            }
            if (!isCheck && !isFound) {
                var userData = ZPeople.sendUserListAjax([id], isZuids);
                userData.length > 0 && (isFound = !0,
                retuserDtl = userData[0])
            }
            return isFound || (retuserDtl.notFound = !0),
            retuserDtl
        }
    },
    getUserDetailsByIdFromAllUsers: function(id) {
        if (id + "" != "null" && id + "" != "undefined") {
            for (var userList = ZPeople.getUserListData(), uCnt = 0; uCnt < userList.length; uCnt++) {
                var userDtl = userList[uCnt];
                if (id += "",
                userDtl.id === id || userDtl.usererec === id)
                    return userDtl
            }
            return {}
        }
    },
    userListKeys: ["avatar", "avatarid", "fname", "lname", "empid", "usererec", "id", "isLogEnb", "email", "isNonUser", "reportingTo", "dualReportTo", "isMobileUser", "deptId", "entityId", "unitId", "divId", "designation", "roleId", "locId", "empDOJ", "mobile", "extension", "workLoc", "workPhone"],
    setPhotoURL: function(path, zuid, userJson) {
        var isSet = !1;
        ZPUtil.Validation.isEmpty(path) || (void 0 != userJson.avatarid && "string" == typeof userJson.avatarid && null != userJson.avatarid && 0 == userJson.avatarid.indexOf("/newhr/images/sampleemployeephotos/") ? (isSet = !0,
        userJson.hasZPImg = !0,
        userJson.originalphoto = userJson.avatarid,
        userJson.zpeoplePhoto = userJson.avatarid,
        userJson.avatar = userJson.avatarid,
        userJson.thumb = userJson.avatarid) : "1" == path ? (isSet = !0,
        userJson.hasZPImg = !0,
        userJson.originalphoto = "viewPhoto?erecno=" + userJson.usererec + "&mode=0&avatarid=" + userJson.avatarid,
        userJson.zpeoplePhoto = "viewPhoto?erecno=" + userJson.usererec + "&mode=1&avatarid=" + userJson.avatarid,
        userJson.avatar = "viewPhoto?erecno=" + userJson.usererec + "&mode=2&avatarid=" + userJson.avatarid,
        userJson.thumb = "viewPhoto?erecno=" + userJson.usererec + "&mode=3&avatarid=" + userJson.avatarid) : "0" == path && (userJson.originalphoto = "viewPhoto?erecno=" + userJson.usererec + "&mode=1&avatarid=" + userJson.avatarid,
        userJson.zpeoplePhoto = "viewPhoto?erecno=" + userJson.usererec + "&mode=1&avatarid=" + userJson.avatarid,
        userJson.avatar = "viewPhoto?erecno=" + userJson.usererec + "&mode=0&avatarid=" + userJson.avatarid,
        userJson.thumb = "viewPhoto?erecno=" + userJson.usererec + "&mode=0&avatarid=" + userJson.avatarid,
        isSet = !0)),
        isSet || void 0 == zuid || "null" == zuid ? isSet || (userJson.thumb = ZPeople.getDefaultUserImagePath(),
        userJson.avatar = ZPeople.getDefaultUserImagePath(),
        userJson.zpeoplePhoto = ZPeople.getDefaultUserImagePath(),
        userJson.originalphoto = ZPeople.getDefaultUserImagePath()) : (userJson.thumb = contactUrl + "/file?ID=" + zuid + "&fs=thumb",
        userJson.avatar = contactUrl + "/file?ID=" + zuid + "&fs=thumb",
        userJson.zpeoplePhoto = contactUrl + "/file?ID=" + zuid + "&fs=original",
        userJson.originalphoto = contactUrl + "/file?ID=" + zuid + "&fs=original")
    },
    USER_ERECNO: [],
    getUserJSON: function(userDtlList, response, isUpdate) {
        for (var userJson = {}, usrCnt = 0; usrCnt < ZPeople.userListKeys.length; usrCnt++) {
            var key = ZPeople.userListKeys[usrCnt];
            if ("reportingTo" === key)
                ZPeople.setUserValues(userDtlList[usrCnt], userJson, response.reposList, void 0, void 0, "reportingTo");
            else if ("dualReportTo" === key)
                ZPeople.setUserValues(userDtlList[usrCnt], userJson, response.reposList, void 0, void 0, key);
            else if ("isLogEnb" === key || "isNonUser" === key || "isMobileUser" === key) {
                var value = userDtlList[usrCnt];
                userJson[key] = "1" === value ? "true" : "false"
            } else
                userJson[key] = userDtlList[usrCnt]
        }
        return ZPeople.setPhotoURL(userJson.avatar, userJson.id, userJson),
        userJson.name = ZPeople.getUserDisplayName(userJson.fname, userJson.lname),
        ZPeople.setUserValues(userJson.deptId, userJson, response.deptIdList, response.deptNameList, "deptName", "deptId"),
        ZPeople.setUserValues(userJson.designation, userJson, response.desiIdList, response.desiNameList, "designation", "desiId"),
        ZPeople.setUserValues(userJson.roleId, userJson, response.roleIdList, response.roleNameList, "roleName", "roleId"),
        ZPeople.setUserValues(userJson.locId, userJson, response.locIdList, response.locNameList, "locName", "locId"),
        ZPeople.setUserValues(userJson.entityId, userJson, response.entityIdList, response.entityNameList, "entityName", "entityId"),
        ZPeople.setUserValues(userJson.unitId, userJson, response.unitIdList, response.unitNameList, "unitName", "unitId"),
        ZPeople.setUserValues(userJson.divId, userJson, response.divIdList, response.divNameList, "divName", "divId"),
        isUpdate && -1 === ZPeople.USER_ERECNO.indexOf(userJson.usererec) && (ZPeople.USER_LIST.push(userJson),
        ZPeople.USER_ERECNO.push(userJson.usererec)),
        userJson
    },
    setUserValues: function(pos, userJson, ids, names, setName, setId) {
        ZPUtil.Validation.isEmpty(pos) ? userJson[setId] = "" : (userJson[setId] = ids[pos],
        void 0 !== names && (userJson[setName] = names[pos]))
    },
    getUserDisplayName: function(fname, lname) {
        fname = void 0 !== fname ? fname.trim() : "",
        lname = void 0 !== lname ? lname.trim() : "";
        var name = "";
        return "2" == userNameDisType ? name = lname : "4" == userNameDisType ? name = fname + " " + lname : "5" == userNameDisType && (name = lname + " " + fname),
        ZPUtil.Validation.isEmpty(name) && (name = fname),
        name
    },
    decodeTxt: function(txt) {
        var tempdiv = $("<div></div>");
        return (tempdiv = $(tempdiv)).html(txt),
        txt = tempdiv.text()
    },
    escapeHtml: function(string) {
        return string = (string = (string = (string = (string = string.replace(/&/g, "&amp;")).replace(/</g, "&lt;")).replace(/>/g, "&gt;")).replace(/'/g, "&apos;")).replace(/"/g, "&quot;")
    },
    IsNumeric: function(input) {
        return /^-{0,1}\d*\.{0,1}\d+$/.test(input)
    },
    registerFileInput: function() {
        Layout.Page.container.find("input[type=file]").on("change", function() {
            var filename = $(this).val();
            filename.length > 40 && (filename = filename.slice(0, 40) + " ...");
            var splitfileName = filename.split("\\");
            $(this).siblings("span#drop_file").html(ZPeople.escapeHtml(splitfileName[splitfileName.length - 1]))
        })
    },
    bannerVisible: function() {
        ZPeople.excludeTban && ($("#wrapper").addClass("tban"),
        $("#welcomebanner").slideDown("fast"))
    },
    bannerHide: function() {
        ZPeople.excludeTban = !0,
        $("#wrapper").removeClass("tban"),
        setTimeout(function() {
            $("#welcomebanner").slideUp("fast"),
            $("#wrapper").removeClass("tban")
        }, 100)
    },
    getCookie: function(cname) {
        for (var docCookie = document.cookie.split(";"), i = 0; i < docCookie.length; i++) {
            var x = docCookie[i].substr(0, docCookie[i].indexOf("=")).trim()
              , y = docCookie[i].substr(docCookie[i].indexOf("=") + 1).trim();
            if (x == cname)
                return unescape(y)
        }
    },
    setinCookie: function(name, value, exdays) {
        this.peopleCookie[name] = value;
        var exdate = new Date;
        exdate.setDate(exdate.getDate() + exdays);
        var cvalue = escape(value) + (null != exdays && exdays ? "; expires=" + exdate.toUTCString() : "");
        document.cookie = name + "=" + cvalue + "  ;SameSite=Strict; Secure"
    },
    deletebanner: function() {
        var version = $("#versionId").text();
        setTimeout(function() {
            var accMsgBann = $("#accountsMsgBanner");
            0 == accMsgBann.length || accMsgBann.hasClass("hide") ? $("#peoplebanner").remove() : $("#welcomebanner").remove(),
            $("#wrapper").removeClass("tban")
        }, 100),
        ZPeople.setinCookie("People_banner", version, 365)
    },
    refBannerRemove: function() {
        $("#refbanner").slideUp("fast"),
        setTimeout(function() {
            $("#refbanner").remove()
        }, 100)
    },
    setUserList: function(data) {
        ZPeople.constructUserDetails(data.response),
        ZPeople.CURR_USER = ZPeople.getUserDetailsById(erecno),
        ZPForm.USER_EMPLOYEEPERM = data.empFormPerm,
        Layout.Page.loadComponent()
    },
    getUserListNew: function() {
        ZPeople.Request.send(ZPeople.COMMON_URL, {
            mode: "GET_ORG_USERLIST_NEW",
            isInit: !0
        }, ZPeople.setUserList)
    },
    redirectFix: function(event) {
        var href = event.target.href;
        if (void 0 !== href && 0 === href.indexOf("http")) {
            if (event.preventDefault(),
            void 0 !== event.target.parentNode && "zp-fdimg" === event.target.parentNode.className)
                return;
            if ("_blank" === event.target.target)
                window.open(href).opener = null;
            else
                -1 !== event.currentTarget.URL.indexOf("#performance/myteam/review") && null != Appraisal.Reviewer.copyRecordId ? Appraisal.Reviewer.checkForCopyReview(href, !1) : window.location.href = href
        }
        return !1
    },
    checkRedirectURL: function(urlVal) {
        return 0 === urlVal.indexOf("http") && (urlVal = "/people/redirect.zp?url=" + encodeURIComponent(urlVal)),
        urlVal
    },
    getShortName: function(name) {
        var returnVal = ""
          , nameSplit = name.split(" ");
        return $.each(nameSplit, function(ind, str) {
            if (returnVal += str.charAt(0).toUpperCase(),
            1 === ind)
                return !1
        }),
        returnVal
    },
    isAdmin: function(module) {
        var isAdmin = isadmin;
        if (!isAdmin) {
            if (void 0 === module && (module = ZPeople.Help.getHelpModuleKey()),
            "attendance" === module)
                return attsettingsadmin || attdataadmin;
            if ("USERS" === module)
                return ZPeople.isAssignedUserAdmin
        }
        return isAdmin
    },
    showLogoutModal: function() {
        ZPeople.isZPNewUI() ? $("#zp_user_information").length > 0 && $("#zp_user_information").find("#zp_modal_body").length > 0 ? $("#zp_user_information").hasClass("in") ? ($("#zp_user_information").removeClass("in"),
        $("#logoutbackdrop")[0].remove(),
        ZPeople.OPENMODAL = null) : ($("#zp_user_information").addClass("in"),
        $("body").append('<div class="modal-backdrop  in" id="logoutbackdrop"> </div>'),
        ZPeople.OPENMODAL = $("#zp_user_information")[0]) : ZPeople.constructLogoutModal() : $("#zp_user_information").length > 0 && $("#zp_user_information").find("#zp_modal_body").length > 0 ? $("#zp_user_information").hasClass("in") ? $("#zp_user_information").modal("hide") : $("#zp_user_information").modal("show") : ZPeople.constructLogoutModal()
    },
    constructLogoutModal: function() {
        $("#zp_user_information").remove();
        var orgsArray, anchorHtml = ZPeople.isZPNewUI() ? '<a href="mailto:' + ZPeople.CURR_USER.email + '">' + ZPeople.CURR_USER.email + "</a>" : '<span><a href="mailto:' + ZPeople.CURR_USER.email + '">' + ZPeople.CURR_USER.email + "</a></span>", bodyHtml = '<div class="ZPUserAcc"><i data-dismiss="modal" class="IC-cls-1px red S21 CP ZPUclse" onclick="ZPeople.showLogoutModal();"></i><div class="ZPprofdt"><img src="' + ZPeople.CURR_USER.zpeoplePhoto + '" /><h4>' + ZPeople.CURR_USER.empid + "&nbsp;-&nbsp;" + ZPeople.CURR_USER.name + "</h4>" + anchorHtml;
        result = ZPeople.ORGLIST,
        orgsArray = result.serviceOrgs,
        bodyHtml += (ZPUtil.Validation.isEmpty(ZPeople.CURR_USER.designation) ? "" : "<span>" + ZPeople.CURR_USER.designation + "</span>") + '<div class="ZPMyacc"><a class="btn btn-default btn-myAcc" target="_blank" href="' + ZPeople.IAMURL + '">' + ZPI18N.getString("zp.myaccount") + '</a><a href="/Logout.do" class="ZPSOut">' + ZPI18N.getString("zp.logout") + '</a></div></div><div class="ZPMultiOrg"> <div id="orgListView"><a><span id="ZPChangeOrg">' + result.currServiceOrg + '<i class="IC-Setting-02"></i></span></a> <ul id="ZPChangeOrgUL" class="dropdown-menu" style="display: block;"> ',
        $.each(orgsArray, function(k, v) {
            v.orgName != result.currServiceOrg && (v.domainPath = decodeURIComponent(v.domainPath),
            bodyHtml += '<li><a href="' + v.domainPath + '"  id="' + v.orgName + '" target="_blank">' + v.orgName + "</a></li>")
        });
        var themeColorHtml = ZPeople.isZPNewUI() ? '<ul class="ZPClists ZPThemeOpt" id="zp_selection_theme"><li class="ZPTC1" theme="0"></li><li class="ZPTC2" theme="1"></li><li class="ZPTC3" theme="2"></li><li class="ZPTC4" theme="3"></li></ul>' : '<div class="ZPThemeOpt"><ul class="ZPClists" id="zp_selection_theme"><li class="ZPTC1" theme="0"></li><li class="ZPTC2" theme="1"></li><li class="ZPTC3" theme="2"></li><li class="ZPTC4" theme="3"></li></ul></div>';
        bodyHtml += '<li class="manage"><span id="ZPManageOrg"><a href="/organizations" target="_blank" ><i>' + ZPI18N.getString("zp.manageorganization") + '</i></a></span></li></ul></div></div><div class="ZPSelthemes"><h4>' + ZPI18N.getString("zp.themes") + '</h4><div class="ZPdeftheme"><span>' + ZPI18N.getString("zp.menucolor") + '</span><div class="ZPThemeOpt"><div class="onoffswitch"><input name="onoffswitch" class="onoffswitch-checkbox" id="toggle_theme" type="checkbox"><label class="onoffswitch-label" for="toggle_theme"><span class="onoffswitch-inner"><i></i><i></i><i></i></span><span class="onoffswitch-switch"></span></label></div></div></div><div class="ZPdeftheme"><span>' + ZPI18N.getString("zp.themecolor") + "</span>" + themeColorHtml + '</div><div class="ZPdeftheme"><a href="javascript:;" id="zp_organizetab">' + ZPI18N.getString("zp.organizetabs") + "</a></div></div>",
        null != ZPeople.PLANDETAILS && void 0 != ZPeople.PLANDETAILS.Trial && null != ZPeople.PLANDETAILS.Trial && (bodyHtml += '<div class="ZPsubscr">' + ZPI18N.getString("zpp.pptrialexpire", [ZPeople.PLANDETAILS.Trial.daysToExpire]) + ' days <br><a href="' + $(".ZPHeadRgt #subscriptionLink").attr("href") + '" target="_blank">' + ZPI18N.getString("zp.upgrade") + "</a> ",
        ZPeople.PLANDETAILS.isPeoplePlusOwner && (bodyHtml += '<a class="red" onclick="ZPServices.showCancelTrailPopUp()"> ' + ZPI18N.getString("zp.cancel") + "  </a>"),
        bodyHtml += " </div>"),
        bodyHtml += '<div class="ZSPlinks"> <ul>' + (isadmin ? '<li> <i class="CR-getstart S18"> <i class="path1"></i><i class="path2"></i><i class="path3"></i> </i> <a onclick="GettingStarted.init()" id="gettingStartedbtn" href="#admin/gettingStarted" target="_blank">' + ZPI18N.getString("zp.gettingStarted") + "</a> </li>" : ""),
        bodyHtml += '<li> <i class="CR-help S18"><i class="path1"></i><i class="path2"></i><i class="path3"></i></i> <a target="_blank" href="' + (ZPeople.isChinaSetup ? "//www.zoho.com.cn/" + (Layout.isPeoplePlus ? "peopleplus" : "people/help") + "/resources.html" : ZPeople.isZPNewUI() ? "//www.zoho.com/" + (Layout.isPeoplePlus ? "peopleplus/resources.html" : "people/help/adminguide/overview.html") : "//www.zoho.com/people/oldhelp/administrator/") + '">' + ZPI18N.getString("zp.help") + "</a> </li>",
        ZPeople.isContactSupportVisible && (bodyHtml += '<li> <i class="CR-support S18"><i class="path1"></i><i class="path2"></i><i class="path3"></i></i> <a href="javascript:;" onclick="ZPeople.ContactSupport.openPopUp();"> ' + ZPI18N.getString("zp.contactsupport") + "</a> </li>"),
        bodyHtml += '<li> <i class="CR-wnew S18"><i class="path1"></i><i class="path2"></i><i class="path3"></i></i><a target="_blank" href="' + (ZPeople.isChinaSetup ? "//www.zoho.com.cn/people/whats-new.html" : "//www.zoho.com/people/whats-new.html") + '">' + ZPI18N.getString("zp.whatsnew") + "</a></li>",
        bodyHtml += '<li> <i class="CR-hr S18"><i class="path1"></i><i class="path2"></i><i class="path3"></i><i class="path4"></i><i class="path5"></i></i><a target="_blank" href="//creatorapp.zohopublic.com/zohopeople/zoho-people-community-invite/form-perma/Invite_Form/hAzbPxdXbNh0gCCCt4zXBW1HWXKaBRROhSxTOaxs7fuEvEX7kKOwK1B5rpRnM0NY0fDp8Z3S7zACWA6F1mMqtrtJ2DH2bT8xqBgF?src=inapp">' + ZPI18N.getString("zp.joinhrcommunity") + "</a></li>",
        bodyHtml += "</ul> </div>";
        var footerHtml = '<div class="' + (ZPeople.isZPNewUI() ? "zp_mdl-ftr" : "modal-footer") + '">';
        if (footerHtml += '<ul class="ZPMFlinks"><li> <a target="_blank" href="' + (ZPeople.isChinaSetup ? "http://appstore.huawei.com/app/C100056843" : "//play.google.com/store/apps/details?id=com.zoho.people") + '"> <i class="CR-android"><i class="path1"></i><i class="path2"></i></i></a></li>',
        footerHtml += '<li><a target="_blank" href="' + (ZPeople.isChinaSetup ? "//itunes.apple.com/cn/app/zoho-people/id680525956?mt=8" : "//itunes.apple.com/in/app/zoho-people-smartest-way-to/id680525956?mt=8") + '";> <i class="CR-apple"><i class="path1"></i><i class="path2"></i></i> </a> </li>',
        footerHtml += '<li><a target="_blank" href="' + (ZPeople.isChinaSetup ? "//ke.qq.com/webcourse/index.html#course_id=279488&term_id=100330982&taid=1826726900679616&vid=n1424t2gmy8" : "//www.zoho.com/people/free-webinar.html") + '"> <i class="CR-video"><i class="path1"></i><i class="path2"></i><i class="path3"></i><i class="path4"></i></i> </a></li>',
        footerHtml += (ZPeople.isChinaSetup ? "" : '<li> <a target="_blank" href="//youtube.com/channel/UCvBTxIHDnBW8ip1cdB0x8zg" > <i class="CR-ytube"><i class="path1"></i><i class="path2"></i><i class="path3"></i></i> </a></li>') + "</ul></div>",
        ZPeople.isZPNewUI())
            ZPeople.constructOuterModal(bodyHtml, footerHtml);
        else
            ZPeople.BSModal.setup({
                id: "zp_user_information",
                type: 1,
                disableHeader: !0,
                closeonEsc: !0,
                body: bodyHtml,
                footer: footerHtml,
                bodyClass: "Nomdlhead",
                dialogClass: "ZPRMpnl ZPPopProVw",
                modalClass: "popRgtModel ZPAdpop PopXmModel",
                overwriteModalClass: !0,
                isWrapperAppend: !0
            });
        -1 != window.location.origin.indexOf("sparsh.sanmargroup.com") && ($("#zp_user_information").find(".ZSPlinks").remove(),
        $("#zp_user_information").find(".zp_mdl-ftr").remove()),
        "714921085" != _LOGGEDIN_ZSOID && "746603108" != _LOGGEDIN_ZSOID || (document.querySelector("#zp_user_information .CR-support").nextElementSibling.innerText = " Globalization Partners Support"),
        ZPeople.manageOrg(),
        ZPeople.User.Theme.setActiveTheme(),
        ZPeople.User.Theme.registerThemes()
    },
    constructOuterModal: function(bodyHtml, footerHtml) {
        outerModal = $('<div id="zp_user_information" class="zp_mdl prof_mdl"><div class="zp_mdl-cnt"><div class="zp_mdl-bdy Nomdlhead" id="zp_modal_body"></div></div></div>'),
        $("#wrapper").append(outerModal),
        outerModal.attr("tabindex", "-1"),
        outerModal.find(".zp_mdl-bdy").after(footerHtml),
        outerModal.find(".zp_mdl-bdy").html(bodyHtml),
        outerModal.find(".zp_mdl-bdy").scrollTop(0),
        outerModal.addClass("in"),
        $("body").append('<div class="modal-backdrop  in" id="logoutbackdrop"></div>'),
        ZPeople.OPENMODAL = $("#zp_user_information")[0],
        $("#zp_user_information").on("click", function(event) {
            event.stopPropagation()
        })
    },
    manageOrg: function() {
        $("#ZPChangeOrgUL").hide(),
        clk = !1,
        $("#ZPChangeOrg").on("click", function() {
            clk ? (clk = !1,
            $("#ZPChangeOrgUL").hide()) : (clk = !0,
            $("#ZPChangeOrgUL").show())
        }),
        $(document).mouseup(function(e) {
            var orgListContainer = $("#ZPChangeOrgUL")
              , orgViewContainer = $("#orgListView");
            orgViewContainer.is(e.target) || 0 !== orgViewContainer.has(e.target).length ? orgListContainer.show() : (orgListContainer.hide(),
            clk = !1)
        })
    },
    refreshSession: function(mode) {
        ZPeople.Request.send("/commonAction.zp", {
            mode: "REF_SESS",
            sub_mode: mode || 0
        })
    },
    INIT_DATA: void 0,
    initZP: function() {
        ZPeople.Request.send(ZPTabs.URL, {
            MODE: "INIT_PEOPLE"
        }, function(response) {
            ZPeople.INIT_DATA = response,
            (ZPLoader.ISDONE || Layout.ISDEV) && (ZPeople.setUp(),
            Layout.ISDEV && ZPLoader.loadWms())
        })
    },
    initWms: function() {
        ZPeople.OtherScript.init(),
        ZPeople.initChat()
    },
    initMics: function() {
        null !== ZPLoader.CONSTANTS.MICS_SERVICE_ID && null !== ZPLoader.CONSTANTS.MICS_DOMAIN_URL && new $mics(_LOGGEDIN_ACCZSOID,ZPLoader.CONSTANTS.MICS_SERVICE_ID,ZPLoader.CONSTANTS.MICS_DOMAIN_URL).init()
    },
    setUp: function() {
        if (void 0 != ZPeople.INIT_DATA) {
            Layout.URLS["home/dashboard"] = {
                url: "",
                initialCallback: "ZPDashboard.init",
                callback: "ZPDashboard.Widget.loadModule",
                skipPage: !0,
                disableCallback: !0,
                wrapperClass: "zp_Dtbar"
            };
            var response = ZPeople.INIT_DATA;
            isadmin || (ZPeople.adminPerms = response.adminPerms),
            ZPTabs.TAB_JSON = response.userTabs,
            ZPTabs.ADMIN_TAB = response.adminTabs,
            ZPTabs.construct(),
            ZPeople.initializePage(),
            ZPeople.CURRENT_VIEWKEY = ZPeople.VIEWKEYS.ALL,
            ZPeople.USER_EMPLOYEEPERM = response.empFormPerm,
            ZPeople.USER_ADMIN_LOCATIONS = response.empLocations,
            ZPeople.USER_ISADMIN = response.ismodAdmin,
            ZPeople.isRegReasonsEnabled = response.isRegReasonsEnabled,
            ZPeople.isWFOEnabled = response.isWFOEnabled,
            $("body").removeClass("DN"),
            delete ZPeople.INIT_DATA,
            AcsApi.init("People", csrfParamName, "CSRF_TOKEN"),
            Announcement.getAnnouncementTabDisplayname(ZPServices.SERVICE_JSON),
            ZPeople.defineCalVariables(),
            ZPSearch.init(),
            ZE_Init.initialiseCommonSteps(),
            ZPFeeds.Notifications.initComponents(),
            ZPFeeds.Groups.getMyGroups(),
            Timetracker.currentlyRunningTimer.getCurrentTimerDetails(),
            ZPeople.showBanner()
        }
    },
    defineCalVariables: function() {
        defineConstant("months", [ZPI18N.getString("zp.jan"), ZPI18N.getString("zp.feb"), ZPI18N.getString("zp.mar"), ZPI18N.getString("zp.apr"), ZPI18N.getString("zp.may"), ZPI18N.getString("zp.jun"), ZPI18N.getString("zp.jul"), ZPI18N.getString("zp.aug"), ZPI18N.getString("zp.sep"), ZPI18N.getString("zp.oct"), ZPI18N.getString("zp.nov"), ZPI18N.getString("zp.dec")]),
        defineConstant("days", new Array(ZPI18N.getString("zp.sun"),ZPI18N.getString("zp.mon"),ZPI18N.getString("zp.tue"),ZPI18N.getString("zp.wed"),ZPI18N.getString("zp.thu"),ZPI18N.getString("zp.fri"),ZPI18N.getString("zp.sat"))),
        defineConstant("daysFull", new Array(ZPI18N.getString("zp.sunday"),ZPI18N.getString("zp.monday"),ZPI18N.getString("zp.tuesday"),ZPI18N.getString("zp.wednesday"),ZPI18N.getString("zp.thursday"),ZPI18N.getString("zp.friday"),ZPI18N.getString("zp.saturday")))
    },
    setUpUsers: function(users) {
        ZPeople.constructUserDetails(users),
        ZPeople.orgStructureTagMap = JSON.parse(users.tagMap),
        ZPeople.orgStructureDispNameMap = JSON.parse(users.orgStructureDispNameMap),
        ZPeople.isOrgstructureFilterRestricted = users.isOrgstructureFilterRestricted,
        ZPeople.CURR_USER = ZPeople.getUserDetailsById(erecno)
    },
    /*initializePage: function() {
        ZPeople.init(),
        $("#page-wrapper").html("").removeClass("H100"),
       Layout.Page.getPage(!0)
    },*/
    showBanner: function(data) {
        if (isadmin && !IS_RO_MODE) {
            var params = {
                mode: "GET_BANNER",
                conreqcsr: csrfToken,
                id: ZPeople.PLANID
            };
            ZPeople.Request.send("/commonAction.zp", params, function(data) {
                var number = ZPeople.getCookie("People_banner");
                if (void 0 !== (data = data.bannerObj).content && null !== data.content) {
                    var bannerContent = data.content;
                    data.banner && isadmin && !ZPUtil.Validation.isEmpty(data.version) && number != data.version && ($("#wrapper").after('<div class="Apos ZPApos" onclick="ZPeople.bannerVisible()" id="peoplebanner"><div id="welcomebanner" class="alert ZP-info fade" role="alert" style="display:block;">' + bannerContent.content + '<i class="IC-ar-top ML10 ZPBcls" id="bannerclose" onclick="ZPeople.bannerHide()"></i><span id="versionId" style="display:none;">' + data.version + '</span><a class="dsagain" onclick="ZPeople.deletebanner()">' + ZPI18N.getString("zp.dontshow") + "</a></div></div>"),
                    $("#wrapper").addClass("tban"))
                }
            })
        }
    },
    showBannerForUnconfirmedAccount: function() {
        $("#wrapper").hasClass("tban") ? $("div#welcomebanner").after('<div class="ZP-noti" id="accountsMsgBanner" onClick=ZPeople.stopPropogationForBanner()>' + ZPI18N.getString("zp.accountsConfirmMsg", ["ZPeople.sendIAMConfirmation()"]) + '<span class="FR CP" onClick=ZPeople.hideUnconfBannerTemp()><i class="IC-cls"></i></span></div>') : $("#wrapper").after('<div class="Apos ZPApos" onclick="ZPeople.bannerVisible()" id="peoplebanner"><div id="accountsMsgBanner" class="ZP-noti hide" onClick=ZPeople.stopPropogationForBanner()>' + ZPI18N.getString("zp.accountsConfirmMsg", ["ZPeople.sendIAMConfirmation()"]) + '<span class="FR CP" onClick=ZPeople.hideUnconfBannerTemp()><i class="IC-cls"></i></span></div></div>'),
        $("div#wrapper").addClass("tbanExp"),
        $("div#accountsMsgBanner").removeClass("hide")
    },
    showROBanner: function() {
        $("#wrapper").after('<div class="Apos ZPApos" id="peoplerobanner"><div id="RObanner" class="alert ZP-info fade" role="alert" style="display:block;"> ' + ZPI18N.getString("zp.romodebanner") + "</div></div>"),
        $("#wrapper").addClass("tban")
    },
    hideUnconfBannerTemp: function() {
        $("#wrapper").removeClass("tbanExp"),
        $("div#accountsMsgBanner").addClass("hide"),
        $("#wrapper").hasClass("tban") || $("div#peoplebanner").addClass("hide")
    },
    stopPropogationForBanner: function() {
        ZPeople.excludeTban = !1
    },
    showAuthtknDeprPopUp: function() {
        ZPeople.Request.send(ZPeople.COMMON_URL, {
            mode: "GETORUPDATE_BANNEROBJ",
            opermode: "GET",
            erecno: erecno
        }, function(data) {
            if (data.success && data.oper_response) {
                var header = ZPI18N.getString("zp.headerAdmin");
                isadmin || (header = ZPI18N.getString("zp.headerUser"));
                var popup_div = '<div class="api_pop open" id="apibannerhead"><div class="api_wrap center"><i class="IC-cls close" onclick="ZPeople.removeauth_popup()"></i><img width="160" src="' + newUIImageUrl + 'svg/apiattention.svg" alt="">';
                popup_div += "<h4>" + header + '</h4><div class="api_cont">' + data.content,
                popup_div += '<div class="alert_cont">' + ZPI18N.getString("zp.bannnerboxcont"),
                popup_div += '<div><a class="">API calls by any means</a><a>Functions - Integration Tasks</a><a>Any third party application</a></div></div>',
                popup_div += ZPI18N.getString("zp.bannersuggest", ["https://www.zoho.com/people/api/oauth-steps.html", "https://www.zoho.com/people/help/adminguide/connections.html"]) + ZPI18N.getString("zp.bannerbut") + ZPI18N.getString("zp.bannerfooter", [ZPeople.peopleSupportEmail]),
                popup_div += "</div></div></div>",
                $("#page-wrapper").append(popup_div)
            }
        })
    },
    removeauth_popup: function() {
        ZPeople.Request.send(ZPeople.COMMON_URL, {
            mode: "GETORUPDATE_BANNEROBJ",
            opermode: "UPDATE",
            erecno: erecno
        }),
        $("#apibannerhead").remove()
    },
    getSubUsersCount: function(erecNo) {
        return void 0 == erecNo ? 0 : ZPeople.getSubUsers(erecNo, !0).length
    },
    getUserDetailsById: function(id, isCheck, isZuids) {
        if (id + "" != "null" && id + "" != "undefined") {
            for (var retuserDtl = {}, userList = ZPeople.USER_LIST, isFound = !1, uCnt = 0; uCnt < userList.length; uCnt++) {
                var userDtl = userList[uCnt];
                if (id += "",
                userDtl.id === id || userDtl.usererec === id) {
                    retuserDtl = userDtl,
                    isFound = !0;
                    break
                }
            }
            if (!isCheck && !isFound) {
                var userData = ZPeople.sendUserListAjax([id], isZuids);
                userData.length > 0 && (isFound = !0,
                retuserDtl = userData[0])
            }
            return isFound || (retuserDtl.notFound = !0),
            retuserDtl
        }
    },
    initHR: function() {
        ZPeople.Request.send("gettabdetails.zp", {
            mode: "INIT_ZP"
        }, ZPeople.setUpHR)
    },
    INITIATED: !1,
    setUpHR: function(response, params) {
        ZPeople.constructUserDetails(response.users),
        ZPeople.USER_EMPLOYEEPERM = response.empFormPerm,
        ZPeople.CURR_USER = ZPeople.getUserDetailsById(erecno),
        ZPeople.USER_ADMIN_LOCATIONS = response.empLocations,
        ZPeople.USER_ISADMIN = response.ismodAdmin,
        ZPeople.INITIATED = !0,
        (ZPScript.IS_JSREADY || Layout.ISDEV) && ZPeople.initComponents()
    },
    initComponents: function() {
        ZPeople.OtherScript.init(),
        ZPeople.CURRENT_VIEWKEY = ZPeople.VIEWKEYS.ALL,
        Timetracker.currentlyRunningTimer.getCurrentTimerDetails(),
        $("#page-wrapper").html("").removeClass("H100"),
        Layout.UrlConf.updateHashInformation(),
        ZPeople.init(),
        Layout.Page.getPage(!0)
    },
    toggleUserVersion: function() {
        "/hr" === ZPeople.CONTEXT ? ZPeople.User.updateUserVersion("1") : ZPeople.User.updateUserVersion("0")
    },
    constructAdvertiseMentModal: function() {
        if (0 == $("#zpadv_addpop").length) {
            var html = '<div class="zp_rfErn DN" id="zpadv_addpop"> <div class="zp_rfEIn"> <div class="zp_rfTtl"> <h4>' + ZPI18N.getString("zp.adv_rfheader") + '</h4> <i class="IC-cls" onclick="ZPeople.closeAdvertiseModal();"></i> </div> <div class="rfImg"> <img src="' + newUIImageUrl + 'svg/referandearn.svg" alt=""> </div> <div class="zp_rfTxt"> <h4>' + ZPI18N.getString("zp.adv_rfnowandern") + "</h4> <h4><span>$ 100</span>" + ZPI18N.getString("zp.adv_zwalletcredit") + '</h4> <a href="https://referrals.zoho.com/html/referral/index.html?servicename=ZohoPeople" target="_blank">' + ZPI18N.getString("zp.adv_rfandern") + "</a> </div>" + ZPI18N.getString("zp.adv_bodycontent") + "</div>";
            $("body").append(html),
            $("#zpadv_addpop").fadeIn(200)
        }
    },
    closeAdvertiseModal: function() {
        $("#zpadv_addpop").fadeOut(200, function() {
            $("#zpadv_addpop").remove()
        })
    }
}).Welcome = {
    CURR_LAYOUT: 0,
    getPopUp: function() {
        for (var html = '<div class="zpwelmd_bg" id="zpwel_html"> <div class="zpwelmd_bx"> <div class="zpwelmd_sl">', ind = 1; ind < 7; ind++)
            html += ZPeople.Welcome.getPopHtml(ind);
        html += "</div>",
        html += '<span class="zpwelmd_skp" onclick="ZPeople.Welcome.removePopup()"><a>' + ZPI18N.getString("zp.skip") + '<i class="IC-ar-rgt"></i></a></span> <div class="zpwelmd_slpn"> <div class="zpwelmd_slar"> <a class="FL" onclick="ZPeople.Welcome.changeDivs(-1)"> <i class="IC-ar-lft"></i></a> <a class="FR" onclick="ZPeople.Welcome.changeDivs(1)"> <i class="IC-ar-rgt"></i></a><a class="FR btnwelget DNI" onclick="ZPeople.Welcome.removePopup()">' + ZPI18N.getString("zp.welgetstarted") + '</a></div> <a class="zpwelmd_slnbm" onclick="ZPeople.Welcome.goToSpecificView(0)">0</a> <a class="zpwelmd_slnbm" onclick="ZPeople.Welcome.goToSpecificView(1)">1</a> <a class="zpwelmd_slnbm" onclick="ZPeople.Welcome.goToSpecificView(2)">2</a> <a class="zpwelmd_slnbm" onclick="ZPeople.Welcome.goToSpecificView(3)">3</a> <a class="zpwelmd_slnbm" onclick="ZPeople.Welcome.goToSpecificView(4)">4</a> <a class="zpwelmd_slnbm" onclick="ZPeople.Welcome.goToSpecificView(5)">5</a></div> </div> </div>',
        $("body").append(html),
        $("body").addClass("zpwelmd"),
        $($("body").find("#zpwel_html").find(".zpwelmd_sl").children()[ZPeople.Welcome.CURR_LAYOUT]).css("display", "block"),
        $($("body").find("#zpwel_html").find(".zpwelmd_slpn").find(".zpwelmd_slnbm")[ZPeople.Welcome.CURR_LAYOUT]).addClass("active"),
        0 === ZPeople.Welcome.CURR_LAYOUT && $("body").find(".zpwelmd_bx").find(".zpwelmd_slar").find(".IC-ar-lft").parent().addClass("DNI")
    },
    getPopHtml: function(index) {
        return "<div class='zpwelmd_sllst'> <div class='zpwelmd_slimg'> <img src='/newzp/images/welmdslider" + index + ".png'></div> <div class='zpwelmd_slcnt'> <h3>" + ZPI18N.getString("zp.header" + index) + "</h3> <p>" + ZPI18N.getString("zp.slide" + index) + "</p> </div> </div>"
    },
    changeDivs: function(value) {
        var pDiv = $("body").find("#zpwel_html").find(".zpwelmd_sl").children();
        pDiv.css("display", "none");
        var dlen = pDiv.length;
        ZPeople.Welcome.CURR_LAYOUT >= 0 && ZPeople.Welcome.CURR_LAYOUT < dlen && (1 == value ? ZPeople.Welcome.CURR_LAYOUT++ : -1 == value && ZPeople.Welcome.CURR_LAYOUT--,
        $(pDiv[ZPeople.Welcome.CURR_LAYOUT]).css("display", "block"),
        $("body").find("#zpwel_html").find(".zpwelmd_slpn").find(".zpwelmd_slnbm").removeClass("active"),
        $($("body").find("#zpwel_html").find(".zpwelmd_slpn").find(".zpwelmd_slnbm")[ZPeople.Welcome.CURR_LAYOUT]).addClass("active"),
        $("body").find(".zpwelmd_bx").find(".zpwelmd_slar").find(".IC-ar-rgt").parent().removeClass("DNI"),
        $("body").find(".zpwelmd_bx").find(".zpwelmd_slar").find(".IC-ar-lft").parent().removeClass("DNI"),
        $("body").find(".zpwelmd_bx").find(".zpwelmd_slar").find(".btnwelget").addClass("DNI"),
        ZPeople.Welcome.CURR_LAYOUT === dlen - 1 ? ($("body").find(".zpwelmd_bx").find(".zpwelmd_slar").find(".IC-ar-rgt").parent().addClass("DNI"),
        $("body").find(".zpwelmd_bx").find(".zpwelmd_slar").find(".btnwelget").removeClass("DNI")) : 0 === ZPeople.Welcome.CURR_LAYOUT && $("body").find(".zpwelmd_bx").find(".zpwelmd_slar").find(".IC-ar-lft").parent().addClass("DNI"))
    },
    goToSpecificView: function(value) {
        var pDiv = $("body").find("#zpwel_html").find(".zpwelmd_sl").children()
          , dlen = pDiv.length;
        value >= 0 && value < dlen && (pDiv.css("display", "none"),
        ZPeople.Welcome.CURR_LAYOUT = value,
        $(pDiv[ZPeople.Welcome.CURR_LAYOUT]).css("display", "block"),
        $("body").find("#zpwel_html").find(".zpwelmd_slpn").find(".zpwelmd_slnbm").removeClass("active"),
        $($("body").find("#zpwel_html").find(".zpwelmd_slpn").find(".zpwelmd_slnbm")[ZPeople.Welcome.CURR_LAYOUT]).addClass("active"),
        $("body").find(".zpwelmd_bx").find(".zpwelmd_slar").find(".IC-ar-rgt").parent().removeClass("DNI"),
        $("body").find(".zpwelmd_bx").find(".zpwelmd_slar").find(".IC-ar-lft").parent().removeClass("DNI"),
        $("body").find(".zpwelmd_bx").find(".zpwelmd_slar").find(".btnwelget").addClass("DNI"),
        ZPeople.Welcome.CURR_LAYOUT === dlen - 1 ? ($("body").find(".zpwelmd_bx").find(".zpwelmd_slar").find(".IC-ar-rgt").parent().addClass("DNI"),
        $("body").find(".zpwelmd_bx").find(".zpwelmd_slar").find(".btnwelget").removeClass("DNI")) : 0 === ZPeople.Welcome.CURR_LAYOUT && $("body").find(".zpwelmd_bx").find(".zpwelmd_slar").find(".IC-ar-lft").parent().addClass("DNI"))
    },
    removePopup: function() {
        ZPeople.Request.send(ZPeople.User.URL, {
            mode: "REMOVE_WELCOMEPOPUP"
        }),
        $("body").removeClass("zpwelmd"),
        ZPeople.Welcome.CURR_LAYOUT = 0,
        $("body").find("#zpwel_html").remove()
    },
    isEnterprize: function() {
        return 19 == ZPeople.PLANID || 13 == ZPeople.PLANID || 8 == ZPeople.PLANID || 5 == ZPeople.PLANID || 16 == ZPeople.PLANID || 22 == ZPeople.PLANID
    },
    initoldUIremovalPopUp: function() {
        ZPeople.Welcome.isoldUIremovalPopUpDisabled() && ($("body").addClass("zpwelmd"),
        ZPeople.Welcome.isEnterprize() ? $("body").append('<div style="z-index: 11111; position:absolute; top: 0; left: 0; right: 0; bottom: 0;" id="welcmeBanner"><div class="zp_lmsintro"><i class="IC-cls" onclick="ZPeople.Welcome.removeoldUIremovalPopUp()"></i><div><div class="zp_lmshd"><p>Introducing our</p> <h4>Learning Management System (Beta)</h4></div><div class="zp_lmscrd"><div><div class="zp_incrd1"><label class="zp_lmsimg1"></label><div><p>Create</p> <span>compelling courses</span></div> </div></div><div><div class="zp_incrd2"><label class="zp_lmsimg2"></label><div><p>Deliver</p><span>to the right employees</span></div></div><button onclick="ZPeople.Welcome.accesslms()">Get Started</button></div><div><div class="zp_incrd3"><label class="zp_lmsimg3"></label><div><p>Upskill</p><span>your workforce</span> </div> </div></div></div><div class="zp_lmsdes">The feature is now a beta edition. We encourage you to explore and share your feedback.</div></div></div> </div>') : $("body").append('<div style="z-index: 11111; position:absolute; top: 0; left: 0; right: 0; bottom: 0;" id="welcmeBanner"><div class="zp_lmsintro"><i class="IC-cls" onclick="ZPeople.Welcome.removeoldUIremovalPopUp()"></i> <div><div class="zp_lmshd"> <p>Introducing our</p><h4>Learning Management System (Beta)</h4>  <span>  Take a 90-day free trial of LMS and explore its functionalities.</span></div><div class="zp_lmscrd"><div><div class="zp_incrd1"> <label class="zp_lmsimg1"></label><div> <p>Create</p><span>compelling courses</span></div></div></div> <div>  <div class="zp_incrd2"><label class="zp_lmsimg2"></label>  <div> <p>Deliver</p><span>to the right employees</span></div> </div><button onclick="ZPeople.Welcome.accesslms()">Get Started</button></div><div><div class="zp_incrd3"><label class="zp_lmsimg3"></label> <div> <p>Upskill</p> <span>your workforce</span></div></div></div></div> <div class="zp_lmsdes">To continue enjoying the feature after 90 days, subscribe for an add-on or upgrade to the Enterprise edition.</div> </div></div>'),
        ZPeople.setinCookie("People_CustomBanner", 0, 100))
    },
    accesslms: function() {
        lms.initiate(),
        ZPeople.Welcome.removeoldUIremovalPopUp()
    },
    isoldUIremovalPopUpDisabled: function() {
        var bcookie = ZPeople.getCookie("People_CustomBanner");
        return void 0 === bcookie || "0" === bcookie
    },
    removeoldUIremovalPopUp: function() {
        $("body").removeClass("zpwelmd"),
        $("body").find("#welcmeBanner").remove(),
        ZPeople.setinCookie("People_CustomBanner", 1, 100)
    },
    showIntroBannerPopUp: function(data) {
        if (ZPeople.Welcome.isoldUIremovalPopUpDisabled()) {
            var params = {
                mode: "getIntropopup",
                planId: ZPeople.PLANID,
                version: ZPeople.USER_CUST_SETTINGS.INTRO_BANNER
            };
            ZPeople.Request.send(ZPeople.User.URL, params, function(data) {
                1 == data.banner && $("body").append('<div style="z-index: 11111;position:absolute;top: 0;left: 0;right: 0;bottom: 0;background:rgba(255, 255, 255, 0.75)" id="welcmeBanner" class="zpintromodal" version="' + data.version + '"><i  class="IC-cls CP" onclick="ZPeople.Welcome.hideIntroPopUp(\'' + data.version + "')\"></i>" + data.content.content + "</div>")
            })
        } else
            ZPeople.Welcome.hideIntroPopUp("1")
    },
    hideIntroPopUp: function(version) {
        void 0 === version && (version = $("#welcmeBanner").attr("version"));
        var params = {
            mode: "HIDE_INTROPOPUP",
            value: version
        };
        ZPeople.Request.send(ZPeople.User.URL, params),
        $("#welcmeBanner").remove()
    }
},
ZPeople.Request = {
    ISLOADING: !1,
    send: function(url, params, callback, otherdetails, failureCallback) {
        params.conreqcsr = csrfToken,
        ZPeople.Request.ISLOADING = !0,
        $.post(url, params, function(resultDate) {
            void 0 == Layout.Page.hashDtl || void 0 === Layout.Page.hashDtl.hash || Layout.Page.hashDtl.hash === Layout.Page.currentmode ? (ZPeople.Request.ISLOADING = !1,
            null !== callback && void 0 !== callback && "function" == typeof callback && callback(resultDate, params, otherdetails)) : Layout.Page.hashDtl.isCalled = !1
        }).fail(function(resultData) {
            ZPeople.Request.ISLOADING = !1,
            null !== failureCallback && void 0 !== failureCallback && "function" == typeof failureCallback && failureCallback(resultData, params, otherdetails)
        })
    },
    getAPI: function(url, params, callback, otherdetails, failureCallback) {
        params.portalName = portalName,
        ZPeople.Request.ISLOADING = !0,
        $.get(window.location.protocol + "//" + window.location.host + url, params, function(resultDate) {
            void 0 == Layout.Page.hashDtl || void 0 === Layout.Page.hashDtl.hash || Layout.Page.hashDtl.hash === Layout.Page.currentmode ? (ZPeople.Request.ISLOADING = !1,
            null !== callback && void 0 !== callback && "function" == typeof callback && callback(resultDate, params, otherdetails)) : Layout.Page.hashDtl.isCalled = !1
        }).fail(function(resultData) {
            ZPeople.Request.ISLOADING = !1,
            null !== failureCallback && void 0 !== failureCallback && "function" == typeof failureCallback && failureCallback(resultData, params, otherdetails)
        })
    },
    postAPI: function(url, params, callback, otherdetails, failureCallback) {
        params.portalName = portalName,
        params.conreqcsr = csrfToken,
        ZPeople.Request.ISLOADING = !0,
        $.post(window.location.protocol + "//" + window.location.host + url, params, function(resultDate) {
            void 0 == Layout.Page.hashDtl || void 0 === Layout.Page.hashDtl.hash || Layout.Page.hashDtl.hash === Layout.Page.currentmode ? (ZPeople.Request.ISLOADING = !1,
            null !== callback && void 0 !== callback && "function" == typeof callback && callback(resultDate, params, otherdetails)) : Layout.Page.hashDtl.isCalled = !1
        }).fail(function(resultData) {
            ZPeople.Request.ISLOADING = !1,
            null !== failureCallback && void 0 !== failureCallback && "function" == typeof failureCallback && failureCallback(resultData, params, otherdetails)
        })
    },
    sendAsyncPost: function(url, params, callback, otherdetails, failureCallback) {
        params.conreqcsr = csrfToken,
        ZPeople.Request.ISLOADING = !0,
        $.ajax({
            type: "POST",
            async: !1,
            url: url,
            data: params,
            success: function(data) {
                ZPeople.Request.ISLOADING = !1,
                null !== callback && void 0 !== callback && "function" == typeof callback && callback(data, params, otherdetails)
            },
            error: function(err) {
                ZPeople.Request.ISLOADING = !1,
                null !== failureCallback && void 0 !== failureCallback && "function" == typeof failureCallback && failureCallback(err, params, otherdetails)
            }
        })
    },
    sendFormData: function(url, formData, callback, otherdetails, failureCallback) {
        formData.set("conreqcsr", csrfToken),
        $.ajax({
            url: url,
            type: "POST",
            data: formData,
            contentType: !1,
            processData: !1,
            success: function(data) {
                null !== callback && void 0 !== callback && "function" == typeof callback && callback(data, formData, otherdetails)
            },
            error: function(req) {
                null !== failureCallback && void 0 !== failureCallback && "function" == typeof failureCallback && failureCallback(err, formData, otherdetails)
            }
        })
    },
    sendRequest: function(url, params, method, callback, otherdetails, failureCallback) {
        return ZPeople.Request.ISLOADING = !0,
        method = method || "GET",
        params = params || {},
        $.ajax({
            url: url,
            type: method,
            data: params,
            headers: "GET" != method.toUpperCase() ? {
                "X-ZCSRF-TOKEN": "conreqcsr=" + csrfToken
            } : {},
            success: function(resultData) {
                void 0 == Layout.Page.hashDtl || void 0 === Layout.Page.hashDtl.hash || Layout.Page.hashDtl.hash === Layout.Page.currentmode ? (ZPeople.Request.ISLOADING = !1,
                null !== callback && void 0 !== callback && "function" == typeof callback && callback(resultData, params, otherdetails)) : Layout.Page.hashDtl.isCalled = !1
            },
            error: function(resultData) {
                ZPeople.Request.ISLOADING = !1,
                null !== failureCallback && void 0 !== failureCallback && "function" == typeof failureCallback && failureCallback(resultData, params, otherdetails)
            }
        })
    }
},
ZPeople.Message = {
    TIMEOUTOBJ: null,
    setMessageTime: function(id, time) {
        this.TIMEOUTOBJ = setTimeout(function() {
            ZPeople.Message.fadeMessage(id)
        }, time)
    },
    fadeMessage: function(id) {
        (void 0 !== id ? $("#top_message_outer").find("." + id) : $("#top_message_outer").children("div:visible")).fadeOut(300, function() {
            $(this).remove()
        }),
        this.clearTimeout()
    },
    showSuccessMsg: function(message) {
        this.handleMessage("alert-success", message)
    },
    showWarningMsg: function(message) {
        this.handleMessage("alert-info", message)
    },
    showFailureMsg: function(message) {
        this.handleMessage("alert-danger", message)
    },
    handleMessage: function(id, message) {
        var outerCont = $("#top_message_outer");
        if ($("#top_message_outer").children("div").is(":visible")) {
            var prevId = $("#top_message_outer").children("div").attr("id");
            this.clearTimeout(),
            ZPeople.Message.fadeMessage(prevId)
        }
        outerCont.html('<div class="alert Apos ' + id + '" id="' + id + '">' + message + '<button class="close IC-cls-1px" type="button" onclick="ZPeople.Message.fadeMessage()"></button></div>'),
        outerCont.find("." + id).fadeIn(300),
        this.setMessageTime(id, 5e3)
    },
    clearTimeout: function() {
        null !== ZPeople.Message.TIMEOUTOBJ && clearTimeout(ZPeople.Message.TIMEOUTOBJ)
    }
},
ZPeople.OrgTree = {
    POPUP_TIME: null,
    USERSLOADED: !1,
    TREE: null,
    ALL_USERLIST: {},
    STREAM_MAP: {},
    EMP_TYPE_MAP: {},
    KEY: "",
    emptype_options: [],
    FILTERS: ["locid", "entity", "unit", "division", "department", "emp_type"],
    uerkeys: ["usererec", "avatar", "avatarid", "name", "empid", "zuid", "email", "deptId", "designation", "reportingTo", "subcnt", "dummy"],
    toggleFilter: function() {
        Layout.Page.container.find("#treepar").hasClass("in") ? (Layout.Page.container.find("#treepar").removeClass("in"),
        Layout.Page.container.find("#treepar").find(".IC-filter").removeClass("ZPFilsel")) : ZPeople.OrgTree.showFilter()
    },
    enableDisbaleOrgStructureFilters: function() {
        for (var key in ZPeople.orgStructureTagMap)
            ZPeople.orgStructureTagMap.hasOwnProperty(key) && (ZPeople.orgStructureTagMap[key] ? Layout.Page.container.find('input[name="' + key + '"]').parent().parent().removeClass("hide") : Layout.Page.container.find('input[name="' + key + '"]').parent().parent().addClass("hide"))
    },
    showFilter: function() {
        if (ZPeople.OrgTree.emptype_options && ZPeople.OrgTree.emptype_options.length > 0) {
            if ("" == Layout.Page.container.find('select[name="emp_type"]').html()) {
                for (optn_html = '<option value="-1" > ' + ZPI18N.getString("zp.allEmpTypes") + "</option>",
                i = 0; i < ZPeople.OrgTree.emptype_options.length; i++)
                    optn_html += '<option value="' + ZPeople.OrgTree.emptype_options[i].optionId + '">' + ZPeople.OrgTree.emptype_options[i].optionValue + "</option>";
                Layout.Page.container.find('select[name="emp_type"]').html(optn_html)
            }
        } else
            Layout.Page.container.find('select[name="emp_type"]').parent().parent().addClass("hide");
        if ($.each(ZPeople.OrgTree.FILTERS, function(key, val) {
            Layout.Page.urlparam[val] ? Layout.Page.container.find('[name="' + val + '"]').val(Layout.Page.urlparam[val]) : Layout.Page.container.find('[name="' + val + '"]').val(-1)
        }),
        Layout.Page.container.find('input[name="locid"]').select2(CustomSelect.Orgstruct.getSelect2Properties({
            multi: !1,
            defSelect: -1,
            defSelectText: ZPI18N.getString("zp.alllocations")
        })),
        isOrgStructureEnabled) {
            var text = ZPI18N.getString("zp.addlegalentity");
            ZPeople.orgStructureDispNameMap.hasOwnProperty("entity") && (text = ZPeople.orgStructureDispNameMap.entity),
            text = ZPI18N.getString("zp.AllOrgStructureElements", [text]),
            Layout.Page.container.find('input[name="entity"]').select2(CustomSelect.Orgstruct.getSelect2Properties({
                multi: !1,
                defSelect: -1,
                defSelectText: text
            })),
            text = ZPI18N.getString("zp.addbusinessunit"),
            ZPeople.orgStructureDispNameMap.hasOwnProperty("unit") && (text = ZPeople.orgStructureDispNameMap.unit),
            text = ZPI18N.getString("zp.AllOrgStructureElements", [text]),
            Layout.Page.container.find('input[name="unit"]').select2(CustomSelect.Orgstruct.getSelect2Properties({
                multi: !1,
                defSelect: -1,
                defSelectText: text
            })),
            text = ZPI18N.getString("zp.adddivision"),
            ZPeople.orgStructureDispNameMap.hasOwnProperty("division") && (text = ZPeople.orgStructureDispNameMap.division),
            text = ZPI18N.getString("zp.AllOrgStructureElements", [text]),
            Layout.Page.container.find('input[name="division"]').select2(CustomSelect.Orgstruct.getSelect2Properties({
                multi: !1,
                defSelect: -1,
                defSelectText: text
            })),
            Layout.Page.container.find('input[name="department"]').select2(CustomSelect.Orgstruct.getSelect2Properties({
                multi: !1,
                defSelect: -1,
                defSelectText: ZPI18N.getString("zp.alldepartment")
            })),
            ZPeople.OrgTree.enableDisbaleOrgStructureFilters()
        }
        Layout.Page.container.find('select[name="emp_type"]').select2(),
        Layout.Page.container.find("input[name]").on("change", function(ele) {
            CustomSelect.Orgstruct.clearSelection(ele)
        }),
        Layout.Page.container.find("#treepar").addClass("in"),
        Layout.Page.container.find("#treepar").find(".IC-filter").addClass("ZPFilsel")
    },
    submitFilter: function() {
        Layout.Page.container.find("#location").val();
        var url = "";
        $.each(ZPeople.OrgTree.FILTERS, function(key, val) {
            var filterval = Layout.Page.container.find('[name="' + val + '"]').val();
            filterval && -1 != filterval && (url += ("" == url ? "-" : "/") + val + ":" + filterval)
        }),
        window.location.href = "#organization/tree/employee" + url,
        ZPeople.OrgTree.toggleFilter()
    },
    restFilter: function() {
        $.each(ZPeople.OrgTree.FILTERS, function(key, val) {
            -1 != Layout.Page.container.find('[name="' + val + '"]').val() && (Layout.Page.container.find('[name="' + val + '"]').val(-1),
            Layout.Page.container.find('[name="' + val + '"]').trigger("change"))
        })
    },
    create: function() {
        if (void 0 === Layout.Page.urlparam.zuid) {
            var empTreeObj = Layout.Page.container.find("#zp_org_tree");
            0 === empTreeObj.length && (!0,
            empTreeObj = $('<div class="ZPOrgSS" id="treepar"> <div class="well ZPPhed" id="filterdiv"><div class="FR" onclick="ZPeople.OrgTree.toggleFilter()"><i class="IC-filter"></i></div><div class="S18 dgry FR MT10 CP"><i data-toggle="dropdown" class="IC-print DIB" aria-expanded="false" onclick="ZPeople.OrgTree.constructPdfPage()"></i></div></div><div class="Scrcont" style="overflow: hidden;"><i class="IC-ar-top ZPemptop DN"></i><div class="ZPemptree"><div class="ZPet" tree="true" id="zp_org_tree">' + ZPeople.LOADING_HTML + '</div></div><i class="IC-ar-dwn ZPempdwn DN"></i></div><div class="ZPFilMain TLbnd PA" id="orgtreefilter" name="orgfilter"><div class="well ZPFil">    <i class="IC-cls-1px S14 red CP" onclick="ZPeople.OrgTree.toggleFilter();"></i>    <div class="row"><div class="col-md-2">    <div class="form-group"><label>' + ZPI18N.getString("zp.location") + '</label><input id="location" name="locid"></input></div></div><div class="col-md-2">    <div class="form-group"><label>' + ZPI18N.getString("zp.local.Employeetype") + '</label><select id="emp_type" name="emp_type"></select></div></div>' + (isOrgStructureEnabled ? '<div class="col-md-2"> <div class="form-group" id="employee_entity"><label>' + (ZPeople.orgStructureDispNameMap.hasOwnProperty("entity") ? ZPeople.orgStructureDispNameMap.entity : ZPI18N.getString("zp.employeeentity")) + '</label><input id="zp_views_employeeentity" name="entity"></input></div></div><div class="col-md-2"> <div class="form-group" id="employee_unit"><label>' + (ZPeople.orgStructureDispNameMap.hasOwnProperty("unit") ? ZPeople.orgStructureDispNameMap.unit : ZPI18N.getString("zp.employeeunit")) + '</label><input name="unit" id="zp_views_employeeunit"></input></div></div><div class="col-md-2"> <div class="form-group" id="employee_division"><label>' + (ZPeople.orgStructureDispNameMap.hasOwnProperty("division") ? ZPeople.orgStructureDispNameMap.division : ZPI18N.getString("zp.employeedivision")) + '</label><input id="zp_views_employeedivision" name="division"></input></div></div><div class="col-md-2"> <div class="form-group" id="employee_department"><label>' + ZPI18N.getString("zp.employeedepartment") + '</label><input id="zp_views_employeedepartment" name="department"></input></div></div>' : "") + '<div class="col-md-2"><button type="button" class="btn btn-primary btn-md MT20 MR10" onclick="ZPeople.OrgTree.submitFilter();">' + ZPI18N.getString("zp.apply") + '</button><button type="button" class="btn btn-default btn-md MT20" onclick="ZPeople.OrgTree.restFilter();">' + ZPI18N.getString("zp.reset") + "</button></div></div></div></div></div>"),
            Layout.Page.container.append(empTreeObj),
            empTreeObj = Layout.Page.container.find("#zp_org_tree"),
            Layout.Page.container.find(".IC-ar-top, .IC-ar-dwn").on("mouseenter mouseleave", function() {
                ZPeople.OrgTree.ARROW_HOVER = !ZPeople.OrgTree.ARROW_HOVER
            }),
            Layout.Page.container.find(".IC-ar-top, .IC-ar-dwn").on("click", function() {
                var i = 0;
                if (null !== ZPeople.OrgTree.CURRTREEOBJ) {
                    var scrollVal = $(this).hasClass("IC-ar-dwn") ? -20 : 20;
                    ZPeople.OrgTree.scroll(ZPeople.OrgTree.CURRTREEOBJ, scrollVal);
                    var autoScrollInter = setInterval(function() {
                        i++,
                        ZPeople.OrgTree.scroll(ZPeople.OrgTree.CURRTREEOBJ, scrollVal),
                        20 === i && clearInterval(autoScrollInter)
                    }, 1)
                }
            }));
            var empId = Layout.Page.urlparam.id
              , params = {
                mode: "EMPLOYEE_TREE",
                isint: !0,
                erecno: empId
            };
            void 0 === empId && (empId = params.erecno = erecno);
            var key = ""
              , isLoaded = empTreeObj.attr("loaded");
            $.each(ZPeople.OrgTree.FILTERS, function(filetrkey, val) {
                Layout.Page.urlparam[val] && (params[val] = Layout.Page.urlparam[val],
                key += Layout.Page.urlparam[val])
            });
            var recreate = !1;
            if (key != ZPeople.OrgTree.KEY && (isLoaded = "false",
            ZPeople.OrgTree.ALL_USERLIST = {},
            recreate = !0),
            ZPeople.OrgTree.KEY = key,
            "true" === isLoaded) {
                var currentUser = empTreeObj.find("#tree_content_" + empId);
                parmap = {
                    params: params,
                    empId: empId
                },
                currentUser.length > 0 ? (parmap.recreate = !1,
                currentUser.parent().parent().parent().nextAll().remove()) : parmap.recreate = !0,
                ZPeople.OrgTree.constructPassiveTree(parmap)
            } else {
                var fullinitparam = {
                    mode: "EMPLOYEE_TREE"
                };
                $.each(ZPeople.OrgTree.FILTERS, function(key, val) {
                    Layout.Page.urlparam[val] && (fullinitparam[val] = Layout.Page.urlparam[val])
                }),
                ZPeople.OrgTree.isFullTreeLoaded = !1,
                ZPeople.Request.send("/peopleAction.zp", fullinitparam, ZPeople.OrgTree.constructFullTree, empId),
                ZPeople.Request.send("/peopleAction.zp", params, ZPeople.OrgTree.constructInitTree, {
                    empId: empId,
                    recreate: recreate
                })
            }
        } else {
            var zuidUser = ZPeople.getUserDetailsById(Layout.Page.urlparam.zuid, !1, !0);
            window.location.href = "#organization/tree/employee-id:" + zuidUser.usererec
        }
    },
    constructPdfPage: function() {
        var newWindow = window.open();
        $(newWindow).trigger("focus");
        var content = $("#zp_org_tree").html()
          , themeClassName = "TBlue";
        $("body").hasClass("TPink") ? themeClassName = "TPink" : $("body").hasClass("TYellow") ? themeClassName = "TYellow" : $("body").hasClass("TGreen") && (themeClassName = "TGreen");
        var newContent = "<!DOCTYPE html><html><head><title>Zoho People</title><script>function callprint(){window.print();}<\/script>\x3c!--Stylesheet --\x3e";
        newContent = (newContent += "<link href='/newzp/css/theme.css' rel='stylesheet' type='text/css' /><link href='/newzp/css/zporgprint.css' rel='stylesheet' type='text/css' /></head>\x3c!--Script --\x3e") + "<body class='zp-v4 " + themeClassName + "' onload ='callprint();'><div class='' id='page-wrapper-print'><div class='cont-wrap' id='zp-contwrap-organization-tree-print'><div class='main-wrp' id='organization-tree-employee-print'><div class='ZPOrgSS' id='treepar'><div class='Scrcont'><div class='ZPemptree'><div class='ZPet' tree='true' id='zp_org_tree_print' loaded='true'>",
        newContent += content,
        newContent += "</div></div></div></div></div></div></body></html>",
        newWindow.document.write(newContent),
        newWindow.document.close()
    },
    constructFullTree: function(response) {
        response = response.users,
        ZPeople.OrgTree.populateUserJson(response, !0),
        ZPeople.OrgTree.isFullTreeLoaded = !0
    },
    constructPassiveTree: function() {
        if (ZPeople.OrgTree.IS_LIST_LOADED)
            ZPeople.OrgTree.constructTree(parmap.response, parmap.params, parmap.empId, parmap.recreate);
        else if (ZPeople.OrgTree.ALL_USERLIST[parmap.empId] && (0 == ZPeople.OrgTree.ALL_USERLIST[parmap.empId].subcnt || ZPeople.OrgTree.ALL_USERLIST[parmap.empId].subList.length > 0))
            ZPeople.OrgTree.constructTree(parmap.response, parmap.params, {
                empId: parmap.empId,
                recreate: parmap.recreate
            });
        else {
            var map = {
                empId: parmap.empId,
                recreate: parmap.recreate
            };
            delete parmap.recreate,
            ZPeople.Request.send("/peopleAction.zp", parmap.params, ZPeople.OrgTree.constructInitTree, map)
        }
    },
    getSubUsersCount: function(erecNo) {
        return ZPeople.OrgTree.getOrgSubUsers()[erecNo] ? ZPeople.OrgTree.getOrgSubUsers()[erecNo].subcnt : 0
    },
    getOrgSubUsers: function(userList) {
        return userList ? (ZPeople.OrgTree.ORG_SUB_LIST = {},
        $.each(userList, function(erecno, userDtl) {
            ZPeople.OrgTree.ORG_SUB_LIST[userDtl.usererec] = usrObj,
            userDtl.reportingTo && "" != userDtl.reportingTo && (ZPeople.OrgTree.ORG_SUB_LIST[userDtl.reportingTo] ? 0 != ZPeople.OrgTree.ORG_SUB_LIST[userDtl.reportingTo].isActive && (usrObj.reportingTo = userDtl.reportingTo,
            ZPeople.OrgTree.addSubCountOrgTree(userDtl.reportingTo, usrObj.subcnt + 1, []),
            ZPeople.OrgTree.ORG_SUB_LIST[userDtl.reportingTo].subList.push(userDtl.usererec)) : (repObj = {
                subcnt: usrObj.subcnt + 1,
                subList: [userDtl.usererec]
            },
            ZPeople.OrgTree.ORG_SUB_LIST[userDtl.reportingTo] = repObj,
            usrObj.reportingTo = userDtl.reportingTo))
        }),
        ZPeople.OrgTree.ORG_SUB_LIST) : ZPeople.OrgTree.ORG_SUB_LIST
    },
    addSubCount: function(id, count, ids) {
        void 0 == id || null == id || "" == id || -1 == ids.indexOf(id) ? null != ZPeople.OrgTree.ORG_SUB_LIST && void 0 != id && null != id && ZPeople.OrgTree.ORG_SUB_LIST[id] && (ZPeople.OrgTree.ORG_SUB_LIST[id].subcnt += count,
        ids.push(id),
        ZPeople.OrgTree.addSubCountOrgTree(ZPeople.OrgTree.ORG_SUB_LIST[id].reportingTo, count, ids)) : ZPeople.OrgTree.ORG_SUB_LIST.isCyclic = !0
    },
    getFirstLevelSubUsers: function(userId, isUserDtlOnly) {
        var level = [];
        return isUserDtlOnly ? level.push(ZPeople.OrgTree.ALL_USERLIST[userId]) : $.each(ZPeople.OrgTree.ALL_USERLIST[userId].subList, function() {
            level.push(ZPeople.OrgTree.ALL_USERLIST[this])
        }),
        level
    },
    showTreeError: function(message, containerId) {
        0 === Layout.Page.container.find("#" + containerId).siblings(".ZPNdata").length ? Layout.Page.container.find("#" + containerId).addClass("DN").after(ZPUtil.newNoDataHTML("CR-nodata", 8, message, void 0, void 0, void 0)) : Layout.Page.container.find("#" + containerId).addClass("DN").siblings(".ZPNdata").removeClass("DN")
    },
    constructInitTree: function(response, params, map) {
        ZPeople.OrgTree.IS_EMPTREE = response.isEmpTreeAllowed,
        ZPeople.OrgTree.IS_SUBTREE = response.isSubTree,
        ZPeople.OrgTree.emptype_options = response.users.emp_types_list ? response.users.emp_types_list : [],
        ZPeople.OrgTree.emptypeAllowed = response.users.emptypeAllowed;
        var empTreeObj = Layout.Page.container.find("#zp_org_tree");
        return response.filter && ZPeople.OrgTree.constructSelectedFilters(response.filter),
        response.isEmpTreeAllowed || ZPeople.OrgTree.IS_SUBTREE ? response.isCyclic ? (empTreeObj.empty(),
        void ZPeople.OrgTree.showTreeError(ZPI18N.getString("zp.treeycyclicerror"), "zp_org_tree")) : void 0 == response.users.userList || 0 == response.users.userList.length ? (empTreeObj.empty(),
        void ZPeople.OrgTree.showTreeError(ZPI18N.getString("zp.nodatafound"), "zp_org_tree")) : (response = response.users,
        ZPeople.OrgTree.populateUserJson(response),
        map.empId = response.empId,
        void ZPeople.OrgTree.constructTree(response, params, map)) : (empTreeObj.empty(),
        void ZPeople.OrgTree.showTreeError(ZPI18N.getString("zp.permissiondeniedtoaccessthispage"), "zp_org_tree"))
    },
    populateUserJson: function(response, fulltree) {
        var usersList = {}
          , userList = response.userList;
        ZPeople.OrgTree.STREAM_MAP = response.streamMap,
        ZPeople.OrgTree.EMP_TYPE_MAP = response.empTypeMap,
        userList && $.each(response.userList, function(dataind, data) {
            var userJson = {
                subList: []
            };
            for (ind = 0; ind < ZPeople.OrgTree.uerkeys.length; ind++)
                userJson[ZPeople.OrgTree.uerkeys[ind]] = data[ind];
            ZPeople.setPhotoURL(userJson.avatar, userJson.zuid, userJson),
            ZPeople.setUserValues(userJson.deptId, userJson, response.deptIdList, response.deptNameList, "deptName", "deptId"),
            ZPeople.setUserValues(userJson.designation, userJson, response.desiIdList, response.desiNameList, "designation", "desiId"),
            ZPeople.setUserValues(userJson.reportingTo, userJson, response.reposList, void 0, void 0, "reportingTo"),
            ZPeople.setUserValues(userJson.usererec, userJson, response.streamList, void 0, void 0, "repStreamList"),
            ZPeople.setUserValues(userJson.usererec, userJson, response.empTypeList, void 0, void 0, "repEmpTypeList"),
            usersList[userJson.usererec] = userJson
        }),
        usersList[""] = {
            subList: []
        },
        userList && $.each(response.userList, function(usererec, data) {
            usersList[usersList[data[0]].reportingTo] && usersList[usersList[data[0]].reportingTo].subList.push(data[0])
        }),
        !fulltree && ZPeople.OrgTree.isFullTreeLoaded || (ZPeople.OrgTree.ALL_USERLIST = usersList)
    },
    IS_SUBTREE: !1,
    constructTree: function(response, params, parmap) {
        var empId = parmap.empId
          , recreate = parmap.recreate
          , empTreeObj = Layout.Page.container.find("#zp_org_tree")
          , currentTree = empTreeObj.find("#tree_content_" + empId).parent().parent().parent();
        Layout.Page.container.find("#zp_org_tree").removeClass("DN").siblings(".ZPNdata").addClass("DN");
        var isOnload = !params.isint;
        if (!ZPeople.OrgTree.ALL_USERLIST[empId])
            return empId = ZPeople.OrgTree.ALL_USERLIST[empId],
            void (Object.keys(ZPeople.OrgTree.ALL_USERLIST)[0] && (window.location.href = "#organization/tree/employee-id:" + Object.keys(ZPeople.OrgTree.ALL_USERLIST)[0]));
        if (!isOnload) {
            var isLoaded = empTreeObj.attr("loaded");
            "true" !== isLoaded || recreate ? empTreeObj.empty().attr("loaded", "true") : empTreeObj.find(".Clinetop, .Clinebot, .Glinetop, .Glinebot").remove();
            for (var treeLevel = 1, repoTo = empId, isFirstLevel = !1, curUserRepo = !1, level = 0; level < treeLevel; level++) {
                var subUsers = ZPeople.OrgTree.getFirstLevelSubUsers(repoTo, curUserRepo);
                if (subUsers.length > 0) {
                    var treeHtml = ZPeople.OrgTree.constructLevel(subUsers, curUserRepo);
                    ZPeople.OrgTree.regTreeFun(treeHtml),
                    "true" !== isLoaded || recreate ? empTreeObj.prepend(treeHtml) : empTreeObj.append(treeHtml)
                } else
                    isFirstLevel || (isFirstLevel = !0,
                    treeLevel++);
                if (treeLevel > 20 || "true" === isLoaded && !recreate || curUserRepo)
                    break;
                if (ZPeople.OrgTree.IS_SUBTREE && ZPeople.CURR_USER.usererec === repoTo && isOnload)
                    curUserRepo = !0,
                    treeLevel++;
                else if (!ZPUtil.Validation.isEmpty(repoTo) && !curUserRepo) {
                    var repoUser = ZPeople.OrgTree.ALL_USERLIST[repoTo];
                    ZPUtil.Validation.isEmpty(repoUser.reportingTo) ? repoTo = "" : (repoTo = repoUser.reportingTo,
                    treeLevel++)
                }
                ZPUtil.Validation.isEmpty(repoTo) && !isFirstLevel && (isFirstLevel = !0,
                treeLevel++)
            }
            empTreeObj.children().each(function(i) {
                $(this).attr("id", "zp_tree_level_" + (i + 1)),
                $(this).attr("level", i + 1),
                0 === i && $(this).find("li").attr("parentid", "")
            }),
            ("true" !== isLoaded || recreate) && ZPeople.OrgTree.showSelectedTreeUsers(empId);
            var lastChild = empTreeObj.find(".emtdiv:last");
            lastChild.addClass("ETexp").siblings().removeClass("ETexp"),
            lastChild.prev().addClass("ETexp"),
            ZPeople.OrgTree.findAndSelRootUser(empId, !1, !0),
            currentTree.each(function() {
                Layout.Page.container.find(".IC-ar-top, .IC-ar-dwn").css("left", $(this).position().left + 120 + "px")
            })
        }
    },
    constructSelectedFilters: function(filter) {
        if (Object.keys(filter).length > 0) {
            0 == Layout.Page.container.find("#filterbyheader").length && Layout.Page.container.find("#filterdiv").prepend('<div class="FL MT15 MR20 S13" id="filterbyheader">Filtered by</div>'),
            0 == Layout.Page.container.find("#filterbycols").length && $('<ul class="nav nav-pills ZPSFtrm" id="filterbycols"></ul>').insertAfter(Layout.Page.container.find("#filterbyheader"));
            var html = "";
            $.each(ZPeople.OrgTree.FILTERS, function(ind, key) {
                if (filter[key]) {
                    var filtermap = filter[key];
                    html += '<li class="active"><a>' + filtermap.val + ' <div class="IC-cls" filtercol="' + key + '" filterid="' + filtermap.id + '" name="filtercols" ></div></a></li>',
                    CustomSelect.Orgstruct.pushnode(key, filtermap.id, filtermap.val)
                }
            }),
            Layout.Page.container.find("#filterbycols").html(html),
            Layout.Page.container.find("#filterbycols").find('[name="filtercols"]').on("click", function(ele) {
                ZPeople.OrgTree.removefiltercol($(ele.currentTarget).attr("filtercol"))
            })
        } else
            Layout.Page.container.find("#filterbyheader").remove(),
            Layout.Page.container.find("#filterbycols").remove()
    },
    removefiltercol: function(toberemoved) {
        var url = "";
        $.each(Layout.Page.urlparam, function(key, val) {
            key != toberemoved && (url += ("" == url ? "-" : "/") + key + ":" + val)
        }),
        window.location.href = "#organization/tree/employee" + url
    },
    constructLevel: function(subUsers, curUserRepo) {
        var treeHtml = $('<div class="emtdiv"><div class="abdiv"><ul></ul></div></div>');
        return $.each(subUsers, function(userInd, user) {
            var subCount = ZPeople.OrgTree.ALL_USERLIST[user.usererec].subcnt;
            void 0 === subCount && (subCount = 0);
            var userObj = $('<li nodeid ="' + user.usererec + '" id="tree_content_' + user.usererec + '" parentid="' + (curUserRepo ? "" : ZPeople.OrgTree.ALL_USERLIST[user.usererec].reportingTo) + '" subcount="' + subCount + '" class="' + (subCount > 0 ? "ecot" : "") + '"><div class="conta' + ("1" == ZPeople.OrgTree.ALL_USERLIST[user.usererec].dummy ? " otList" : "") + '" user="true"><img class="" id="zp_emptree_oripho" src="' + user.avatar + '"/><img src="' + ZPeople.getDefaultUserImagePath() + '" id="dummy_loading_image"/><div class="det" ><b>' + user.name + "</b><span>" + (ZPUtil.Validation.isEmpty(user.designation) ? "-" : user.designation) + '</span></div></div><div class="lin"></div>' + (subCount > 0 ? '<div class="ecount">' + subCount + "</div>" : "") + (0 === userInd ? '<div class="Hlinetop"></div>' : "") + (subUsers.length == userInd + 1 ? '<div class="Hlinebot"></div>' : "") + "</li>");
            userObj.on("click", function() {
                var url = "-id:" + $(this).attr("nodeid").split("_")[0];
                $.each(Layout.Page.urlparam, function(key, val) {
                    "id" != key && (url += ("" == url ? "-" : "/") + key + ":" + val)
                }),
                window.location.href = "#organization/tree/employee" + url
            }),
            treeHtml.find("ul").append(userObj)
        }),
        treeHtml
    },
    POPOBJ: null,
    regTreeFun: function(treeRow, disablePop) {
        treeRow.find("#zp_emptree_oripho").on("error", function() {
            this.src = ZPeople.getDefaultUserImagePath()
        }),
        treeRow.find("#zp_emptree_oripho").on("load", function() {
            $(this).removeClass("DN"),
            $(this).siblings("#dummy_loading_image").remove()
        }),
        treeRow.on("mousewheel", function(event, delta) {
            ZPeople.OrgTree.scroll(this, event.deltaY * event.deltaFactor)
        }),
        treeRow.find("[id^=tree_content_]").find(".conta[user=true], .ecount").on("click", function() {
            var obj = this;
            if ($(event.target).hasClass("ecount") && (obj = $(this).siblings(".conta[user=true]")[0],
            ZPeople.OrgTree.emptypeAllowed && "true" === ZPeople.isSearchAllowed))
                return ZPeople.OrgTree.POPOBJ = obj,
                void ZPeople.OrgTree.showUserDtldPopupNew();
            $(obj).attr("hover", "false"),
            ZPeople.OrgTree.hideUserDetails(obj)
        });
        var isAllow = !isadmin && ZPeople.isSearchAllowed;
        treeRow.find("[id^=tree_content_]").find(".conta[user=true], .ecount").mouseenter(function() {
            var obj = this;
            $(this).hasClass("ecount") && (obj = $(this).siblings(".conta[user=true]")[0]);
            var subCount = $(obj).parent().attr("subcount");
            (void 0 !== subCount && 0 == parseInt(subCount) || isAllow) && (null != ZPeople.OrgTree.POPOBJ && $(ZPeople.OrgTree.POPOBJ).attr("hover", "false"),
            ZPeople.OrgTree.POPOBJ = obj,
            $(obj).attr("hover", "true"),
            null !== ZPeople.OrgTree.POPUP_TIME && (clearTimeout(ZPeople.OrgTree.POPUP_TIME),
            ZPeople.OrgTree.POPUP_TIME = null),
            ZPeople.OrgTree.POPUP_TIME = setTimeout(function() {
                ZPeople.OrgTree.showUserDtldPopup()
            }, 1e3))
        }),
        treeRow.find("[id^=tree_content_]").find(".conta[user=true], .ecount").mouseleave(function() {
            $(ZPeople.OrgTree.POPOBJ).attr("hover", "false");
            var subCount = $(ZPeople.OrgTree.POPOBJ).parent().attr("subcount");
            (void 0 !== subCount && 0 == parseInt(subCount) || isAllow) && (null !== ZPeople.OrgTree.POPUP_INTERVAL && clearInterval(ZPeople.OrgTree.POPUP_INTERVAL),
            ZPeople.OrgTree.POPUP_INTERVAL = setInterval(function() {
                ZPeople.OrgTree.hideUserDetails()
            }, 500))
        }),
        treeRow.mouseenter(function() {
            null !== ZPeople.OrgTree.TREE_INTERVAL && (clearInterval(ZPeople.OrgTree.TREE_INTERVAL),
            ZPeople.OrgTree.CURRTREEOBJ = null,
            Layout.Page.container.find(".IC-ar-top, .IC-ar-dwn").hide(),
            ZPeople.OrgTree.TREE_INTERVAL = null);
            var treePos = $(this).position()
              , treeTop = (Layout.Page.container.find(".ZPet"),
            parseInt($(this).children(".abdiv").css("top")));
            Layout.Page.container.find(".IC-ar-top, .IC-ar-dwn").removeClass("DN Tclr").show(),
            0 !== treeTop && Layout.Page.container.find(".IC-ar-top").addClass("Tclr");
            var windowHei = Layout.Page.container.find(".ZPet").height()
              , treeActualHei = 68 * $(this).find("li").length
              , isBotCmt = $(this).attr("isBotCmt");
            (windowHei < treeActualHei || void 0 !== isBotCmt && "true" !== isBotCmt) && Layout.Page.container.find(".IC-ar-dwn").addClass("Tclr");
            var left = treePos.left + ($(this).hasClass("ETexp") ? 120 : 12);
            "1" !== $(this).attr("level") && (left += 24),
            Layout.Page.container.find(".IC-ar-top, .IC-ar-dwn").hasClass("Tclr") ? (Layout.Page.container.find(".IC-ar-top, .IC-ar-dwn").css("left", left + "px"),
            ZPeople.OrgTree.CURRTREEOBJ = this) : Layout.Page.container.find(".IC-ar-top, .IC-ar-dwn").hide()
        }),
        treeRow.mouseleave(function() {
            null !== ZPeople.OrgTree.TREE_INTERVAL && (clearInterval(ZPeople.OrgTree.TREE_INTERVAL),
            ZPeople.OrgTree.TREE_INTERVAL = null),
            ZPeople.OrgTree.TREE_INTERVAL = setInterval(function() {
                clearInterval(ZPeople.OrgTree.TREE_INTERVAL),
                ZPeople.OrgTree.TREE_INTERVAL = null,
                ZPeople.OrgTree.ARROW_HOVER || (ZPeople.OrgTree.CURRTREEOBJ = null,
                Layout.Page.container.find(".IC-ar-top, .IC-ar-dwn").hide(),
                clearInterval(ZPeople.OrgTree.TREE_INTERVAL),
                ZPeople.OrgTree.TREE_INTERVAL = null)
            }, 1e3)
        })
    },
    scroll: function(Obj, delta, totalTop) {
        var top = 1
          , isBotScrl = delta < 0
          , prevTop = $(Obj).children(".abdiv").attr("top")
          , treeLev = parseInt($(Obj).attr("level"));
        isNaN(prevTop) || (top = parseInt(prevTop)),
        void 0 === totalTop && (totalTop = top + delta);
        var windowHei = $(Obj).parent().parent().height()
          , actualTreehei = 68 * $(Obj).children(".abdiv").find("ul").children("li").length
          , lastElemTop = $(Obj).children(".abdiv").children("ul").children("li:last").offset().top + 68 - 145;
        if (windowHei < actualTreehei) {
            Layout.Page.container.find(".IC-ar-dwn").addClass("Tclr");
            var isBotCmt = !1;
            totalTop >= 0 && !isBotScrl ? totalTop = 0 : isBotScrl && windowHei > lastElemTop && (totalTop = -(actualTreehei - $(Obj).height()),
            Layout.Page.container.find(".IC-ar-dwn").removeClass("Tclr"),
            isBotCmt = !0),
            $(Obj).attr("isBotCmt", isBotCmt),
            $(Obj).children(".abdiv").css("top", totalTop + "px"),
            $(Obj).children(".abdiv").attr("top", totalTop);
            var currObj = $(Obj).find("li.sel");
            0 === currObj.length && (currObj = $(Obj).find("li:first")),
            void 0 !== currObj && ZPeople.OrgTree.selLineHandler(currObj, treeLev),
            0 === totalTop ? Layout.Page.container.find(".IC-ar-top").removeClass("Tclr") : Layout.Page.container.find(".IC-ar-top").addClass("Tclr")
        }
    },
    showUserDtldPopupNew: function() {
        if ("true" === ZPeople.isSearchAllowed) {
            var Obj = ZPeople.OrgTree.POPOBJ
              , emperecno = $(Obj).parent().attr("id").split("_").pop();
            if (0 !== Layout.Page.container.find(".Scrcont").find("[empid=" + emperecno + "]").length)
                return;
            $("#orgtreepopup #closeBtn").trigger("click"),
            $("#orgtreepopup").remove();
            var popuphtml, empdetail = ZPeople.OrgTree.ALL_USERLIST[emperecno], subCount = $(Obj).parent().attr("subcount"), isEmpFormViewAll = isadmin || ZPForm.USER_ISADMIN && ZPUtil.checkIsExistInArray(ZPForm.USER_ADMIN_LOCATIONS, empdetail.locId) || ZPForm.Permission.isAllowed([emperecno], ZPeople.USER_EMPLOYEEPERM.viewperm);
            if (popuphtml = '<div class="modal popRgtModel PopXsModel Nomdlhead in" empid="' + emperecno + '" id="orgtreepopup" isActive="true" ><div class="modal-dialog"><div class="modal-content"><div class="modal-body Nomdlhead NomdlFoot PT0I PB0I"><div class="prodir"><a id="closeBtn" class="IC-cls-1px close" data-dismiss="modal"></a><div class="prohead">',
            popuphtml += '<img class="" src="' + empdetail.zpeoplePhoto + '">',
            popuphtml += '<h4 id="zp_tree_empname">' + empdetail.empid + "&nbsp;-&nbsp;" + empdetail.name + "</h4>",
            popuphtml += '<div class="dpt">' + (ZPUtil.Validation.isEmpty(empdetail.designation) ? "" : empdetail.designation),
            popuphtml += ZPUtil.Validation.isEmpty(empdetail.designation) || ZPUtil.Validation.isEmpty(empdetail.deptName) ? "" : " &nbsp;-&nbsp; ",
            popuphtml += (ZPUtil.Validation.isEmpty(empdetail.deptName) ? "" : empdetail.deptName) + "</div>",
            popuphtml += ZPUtil.Validation.isEmpty(empdetail.email) ? "" : '<a href="mailto:' + empdetail.email + '">' + empdetail.email + "</a>",
            popuphtml += '<div id="repToCount"></div></div>',
            popuphtml += '<div class="prolst" id="repEmpTypeandStream"></div>',
            void 0 !== subCount && parseInt(subCount) > 0 && (popuphtml += ZPeople.LOADING_HTML),
            popuphtml += "</div></div></div></div></div>",
            $(popuphtml).modal({
                backdrop: "static",
                keyboard: !1
            }),
            void 0 !== subCount && parseInt(subCount) > 0) {
                var streamhtml = ""
                  , empTypehtml = ""
                  , drCount = empdetail.subList.length;
                repCounthtml = '<div class="ln"><b class="org">' + subCount + "</b><span>" + ZPI18N.getString("zp.totalmembers") + "</span></div><div><b>" + drCount + "</b><span>" + ZPI18N.getString("zp.directreports") + "</span></div>",
                empdetail.repEmpTypeList && ($.each(empdetail.repEmpTypeList, function(key, val) {
                    ZPUtil.Validation.isEmpty(ZPeople.OrgTree.EMP_TYPE_MAP[key]) || 0 == key || (empTypehtml += "<div><span>" + ZPeople.OrgTree.EMP_TYPE_MAP[key] + "</span> <b>" + val + "</b></div>")
                }),
                empdetail.repEmpTypeList[0] && (empTypehtml += "<div><span> - </span><b>" + empdetail.repEmpTypeList[0] + "</b></div>")),
                "true" == ZPeople.isStreamEnabled && empdetail.repStreamList && (streamhtml = "<p>" + ZPI18N.getString("zp.streams") + "</p>",
                $.each(empdetail.repStreamList, function(key, val) {
                    ZPUtil.Validation.isEmpty(ZPeople.OrgTree.STREAM_MAP[key]) || 0 == key || (streamhtml += "<div><span>" + ZPeople.OrgTree.STREAM_MAP[key] + "</span> <b>" + val + "</b></div>")
                }),
                empdetail.repStreamList[0] && (streamhtml += "<div><span> - </span><b>" + empdetail.repStreamList[0] + "</b></div>")),
                ZPUtil.Validation.isEmpty(streamhtml) || (empTypehtml += '<div class="ln"><span></span><b></b></div>'),
                ZPUtil.Validation.isEmpty(empTypehtml) || (empTypehtml = "<p>" + ZPI18N.getString("zp.employeeType") + "</p>" + empTypehtml),
                $("#orgtreepopup #zp_page_loading").remove(),
                $("#orgtreepopup #repToCount").addClass("tcount").append($(repCounthtml)),
                $("#orgtreepopup #repEmpTypeandStream").html($("<div>" + empTypehtml + streamhtml + "</div>"))
            }
            isEmpFormViewAll && "true" === ZPeople.isSearchAllowed && $("#orgtreepopup #zp_tree_empname").on("click", function() {
                $("#orgtreepopup").attr("isActive", "false"),
                ZPeople.OrgTree.hideUserDetails(!0),
                ZPeople.getUserPage(emperecno)
            })
        }
    },
    showUserDtldPopup: function() {
        if ("true" === ZPeople.isSearchAllowed) {
            var Obj = ZPeople.OrgTree.POPOBJ
              , isHover = $(Obj).attr("hover")
              , emperecno = $(Obj).parent().attr("id").split("_").pop();
            if ("false" === isHover || 0 !== Layout.Page.container.find(".Scrcont").find("[empid=" + emperecno + "]").length)
                return;
            Layout.Page.container.find("#orgtreepopup").remove();
            var popuphtml, empdetail = ZPeople.OrgTree.ALL_USERLIST[emperecno], subCount = $(Obj).parent().attr("subcount"), isEmpFormViewAll = isadmin || ZPForm.USER_ISADMIN && ZPUtil.checkIsExistInArray(ZPForm.USER_ADMIN_LOCATIONS, empdetail.locId) || ZPForm.Permission.isAllowed([emperecno], ZPeople.USER_EMPLOYEEPERM.viewperm);
            if (void 0 !== subCount && parseInt(subCount) > 0) {
                var drCount = empdetail.subList.length;
                popuphtml = $('<div id="orgtreepopup" empid="' + emperecno + '" class="ETPovr open"><div class="dropdown-menu ZPCmn-Arrow top lt gray WAI"><div class="ETlft"><b ' + (isEmpFormViewAll ? 'class="CP" ' : "") + 'id="zp_tree_empname">' + empdetail.name + ",&nbsp;" + empdetail.empid + "</b>" + (ZPUtil.Validation.isEmpty(empdetail.designation) ? "" : "<span>" + empdetail.designation + "</span>") + (ZPUtil.Validation.isEmpty(empdetail.deptName) ? "" : '<span class="MT20" title="' + empdetail.deptName + '">' + empdetail.deptName + "</span>") + (ZPUtil.Validation.isEmpty(empdetail.email) ? "" : '<a href="mailto:' + empdetail.email + '">' + empdetail.email + "</a><br>") + '</div><div class="ETRgt"><div class="TDmems"><span class="Tclr">' + subCount + "</span><div>" + ZPI18N.getString("zp.totalmembers") + '</div></div><div class="TDmems"><span class="Tclr">' + drCount + "</span><div>" + ZPI18N.getString("zp.directreports") + "</div></div></div></div></div>")
            } else
                popuphtml = $('<div id="orgtreepopup" empid="' + emperecno + '" class="ETPovr open"><div class="dropdown-menu ZPCmn-Arrow top lt gray"><b ' + (isEmpFormViewAll ? 'class="CP" ' : "") + 'id="zp_tree_empname">' + empdetail.name + ",&nbsp;" + empdetail.empid + "</b>" + (ZPUtil.Validation.isEmpty(empdetail.designation) ? "" : "<span>" + empdetail.designation + "</span>") + (ZPUtil.Validation.isEmpty(empdetail.deptName) ? "" : '<span class="MT20" title="' + empdetail.deptName + '">' + empdetail.deptName + "</span>") + (ZPUtil.Validation.isEmpty(empdetail.email) ? "" : '<a href="mailto:' + empdetail.email + '">' + empdetail.email + "</a><br>") + "</div></div>");
            popuphtml.mouseenter(function() {
                $(ZPeople.OrgTree.POPOBJ).attr("hover", "true")
            }),
            popuphtml.mouseleave(function() {
                $(ZPeople.OrgTree.POPOBJ).attr("hover", "false")
            }),
            isEmpFormViewAll && popuphtml.find("#zp_tree_empname").on("click", function() {
                ZPeople.getUserPage(emperecno),
                ZPeople.OrgTree.hideUserDetails(!0)
            }),
            Layout.Page.container.find(".Scrcont").append(popuphtml);
            var posTop = $(Obj).offset().top
              , posLeft = $(Obj).offset().left
              , popupObj = Layout.Page.container.find("#orgtreepopup").children(".dropdown-menu.ZPCmn-Arrow.top.gray")
              , windowHei = $(window).height()
              , totalPopTop = posTop + 175
              , bannerHei = $("#peoplebanner").height();
            void 0 !== bannerHei && null !== bannerHei && $("#peoplebanner").is(":visible") || (bannerHei = 0),
            totalPopTop > windowHei ? (popupObj.removeClass("top").addClass("bottom"),
            popupObj.css("top", posTop - 85 - (popupObj.outerHeight() + 20 + bannerHei) + "px")) : popupObj.css("top", posTop - 85 - bannerHei + 65 + "px"),
            popupObj.css("margin-top", "-40px"),
            $("body").hasClass("ZPsbarMini") ? popupObj.css("left", posLeft - 50 + "px") : popupObj.css("left", ($(Obj).width() > 46 ? posLeft - 205 : posLeft - 210) + "px")
        }
    },
    showEditRecord: function() {
        ZPeople.OrgTree.showUserRecordByMode("EDIT", ZPForm.CURRFORM_PARAM.recordId)
    },
    showUserRecordByMode: function(mode, recordId) {
        ZPForm.load({
            formId: ZPeople.EMP_FORMID,
            recordId: recordId,
            formMode: void 0 === mode ? "VIEW" : mode,
            isEmbed: !0,
            isProfile: !0,
            disableUrlTrack: !0,
            editCallback: ZPeople.OrgTree.showEditRecord
        })
    },
    hideUserDetails: function(forceHide) {
        var Obj = ZPeople.OrgTree.POPOBJ;
        ("false" === $(Obj).attr("hover") || forceHide) && ($("[id=orgtreepopup]").fadeOut(200, function() {
            var isActive = $("#orgtreepopup").attr("isActive");
            void 0 !== isActive && "false" !== isActive || ($("[id=orgtreepopup]").find("#closeBtn").trigger("click"),
            $(this).remove())
        }),
        $(Obj).attr("hover", "false"),
        clearInterval(ZPeople.OrgTree.POPUP_INTERVAL))
    },
    selLineHandler: function(curSelEle, treeLev) {
        var nextRowSel = Layout.Page.container.find("#zp_tree_level_" + (treeLev + 1)).find("li.sel")
          , prevRowSel = Layout.Page.container.find("#zp_tree_level_" + (treeLev - 1)).find("li.sel");
        0 === nextRowSel.length && (nextRowSel = Layout.Page.container.find("#zp_tree_level_" + (treeLev + 1)).find("li:first"));
        var scrollLvlOffet = curSelEle.offset();
        if (0 !== nextRowSel.length) {
            var nextUseOffSet = nextRowSel.offset()
              , offsetTop = scrollLvlOffet.top - nextUseOffSet.top;
            nextRowSel.hasClass("sel") ? offsetTop > 0 ? (ZPeople.OrgTree.findAndRemoveSelClass("Clinetop", "Clinebot", nextRowSel),
            nextRowSel.find(".Clinetop").css("height", offsetTop + 3 + "px").css("top", "32px")) : (ZPeople.OrgTree.findAndRemoveSelClass("Clinebot", "Clinetop", nextRowSel),
            nextRowSel.find(".Clinebot").css("height", -(offsetTop - 3) + "px").css("bottom", "33px")) : offsetTop > 0 ? (ZPeople.OrgTree.findAndRemoveSelClass("Glinetop", "Glinebot", nextRowSel),
            nextRowSel.find(".Glinetop").css("height", offsetTop + 1 + "px").css("top", "33px")) : (ZPeople.OrgTree.findAndRemoveSelClass("Glinebot", "Glinetop", nextRowSel),
            nextRowSel.find(".Glinebot").css("height", -(offsetTop - 1) + "px").css("bottom", "32px"))
        }
        if (0 === prevRowSel.length && (prevRowSel = Layout.Page.container.find("#zp_tree_level_" + (treeLev - 1)).find("li:first")),
        0 !== prevRowSel.length) {
            var prevUseOffSet = prevRowSel.offset();
            offsetTop = scrollLvlOffet.top - prevUseOffSet.top;
            curSelEle.hasClass("sel") ? offsetTop > 0 ? (ZPeople.OrgTree.findAndRemoveSelClass("Clinebot", "Clinetop", curSelEle),
            0 !== offsetTop && curSelEle.find(".Clinebot").css("height", offsetTop + 3 + "px").css("bottom", "33px")) : (ZPeople.OrgTree.findAndRemoveSelClass("Clinetop", "Clinebot", curSelEle),
            curSelEle.find(".Clinetop").css("height", -(offsetTop - 3) + "px").css("top", "32px")) : offsetTop > 0 ? (ZPeople.OrgTree.findAndRemoveSelClass("Glinebot", "Glinetop", curSelEle),
            curSelEle.find(".Glinebot").css("height", offsetTop + 1 + "px").css("bottom", "32px")) : (ZPeople.OrgTree.findAndRemoveSelClass("Glinetop", "Glinebot", curSelEle),
            curSelEle.find(".Glinetop").css("height", -(offsetTop - 1) + "px").css("top", "33px"))
        }
    },
    findAndRemoveSelClass: function(addClass, removeClass, userObj) {
        0 === userObj.find("." + addClass).length && 0 === userObj.find("." + removeClass).length ? userObj.append("<div class='" + addClass + "'></div>") : userObj.find("." + removeClass).attr("style", "").addClass(addClass).removeClass(removeClass)
    },
    findAndSelRootUser: function(id, isRecCall, selCurrUser) {
        var obj = Layout.Page.container.find("#tree_content_" + id);
        if (obj.length > 0) {
            (isRecCall || selCurrUser) && obj.addClass("sel").siblings().removeClass("sel"),
            ZPeople.OrgTree.selLineHandler(obj, parseInt(obj.parent().parent().parent().attr("level")));
            var parentId = obj.attr("parentid");
            ZPUtil.Validation.isEmpty(parentId) || ZPeople.OrgTree.findAndSelRootUser(parentId, !0)
        }
    },
    showSelectedTreeUsers: function(id) {
        if (void 0 != id) {
            var obj = Layout.Page.container.find("#tree_content_" + id)
              , position = obj.position()
              , prevAllHei = 68 * obj.prevAll().length
              , actualHei = 68 * obj.siblings().length
              , winHei = Layout.Page.container.find('[tree="true"]').parent().height()
              , totalTop = 0;
            if (0 !== position.top && position.top > winHei) {
                if (actualHei > winHei + prevAllHei)
                    totalTop = obj.offset().top;
                else
                    totalTop = obj.siblings(":last").offset().top - winHei;
                obj.parent().parent().css("top", -totalTop + "px"),
                obj.parent().parent().attr("top", -totalTop)
            }
            var parentId = obj.attr("parentid");
            ZPUtil.Validation.isEmpty(parentId) || ZPeople.OrgTree.showSelectedTreeUsers(parentId)
        }
    }
},
ZPeople.DepartmentTree = {
    DEPARTMENT_DATA: null,
    DEPARTMENT_FM_DATA: null,
    PREV_DEPTID: null,
    getData: function() {
        return "organization/tree/department/female" != Layout.Page.currentmode ? ZPeople.DepartmentTree.DEPARTMENT_DATA : ZPeople.DepartmentTree.DEPARTMENT_FM_DATA
    },
    updateData: function(data) {
        "organization/tree/department/female" != Layout.Page.currentmode ? ZPeople.DepartmentTree.DEPARTMENT_DATA = data : ZPeople.DepartmentTree.DEPARTMENT_FM_DATA = data
    },
    create: function() {
        0 === Layout.Page.container.find("#zp_deprtment_tree").length && Layout.Page.container.html($('<div class="Scrcont" style="overflow: hidden;"><i class="IC-ar-top ZPemptop DN"></i><div class="ZPemptree"><div class="ZPet" tree="true" id="zp_deprtment_tree">' + ZPeople.LOADING_HTML + '</div></div><i class="IC-ar-dwn ZPempdwn DN"></div>')),
        Layout.Page.container.find(".IC-ar-top, .IC-ar-dwn").on("mouseenter mouseleave", function() {
            ZPeople.OrgTree.ARROW_HOVER = !ZPeople.OrgTree.ARROW_HOVER
        }),
        Layout.Page.container.find(".IC-ar-top, .IC-ar-dwn").on("click", function() {
            var i = 0;
            if (null !== ZPeople.OrgTree.CURRTREEOBJ) {
                var scrollVal = $(this).hasClass("IC-ar-dwn") ? -20 : 20;
                ZPeople.OrgTree.scroll(ZPeople.OrgTree.CURRTREEOBJ, scrollVal);
                var autoScrollInter = setInterval(function() {
                    i++,
                    ZPeople.OrgTree.scroll(ZPeople.OrgTree.CURRTREEOBJ, scrollVal),
                    20 === i && clearInterval(autoScrollInter)
                }, 1)
            }
        });
        var params = {
            mode: "DEPARTMENT_TREE",
            isFlonly: "organization/tree/department/female" == Layout.Page.currentmode
        }
          , id = Layout.Page.urlparam.id;
        if (void 0 === id && (id = ""),
        null === ZPeople.DepartmentTree.getData())
            ZPeople.Request.send("/peopleAction.zp", params, ZPeople.DepartmentTree.constructTree, id);
        else if (ZPeople.DepartmentTree.PREV_DEPTID !== id) {
            var currObj = Layout.Page.container.find("#zp_deprtment_tree").find("#tree_content_" + id);
            currObj.length > 0 ? (currObj.parent().parent().parent().nextAll().remove(),
            ZPeople.DepartmentTree.constructTree(ZPeople.DepartmentTree.getData(), params, id)) : ZPeople.DepartmentTree.constructTree(ZPeople.DepartmentTree.getData(), params, id, !0)
        } else {
            var selId = id;
            void 0 !== Layout.Page.urlparam.user && (selId = Layout.Page.urlparam.user),
            Layout.Page.container.find("#zp_deprtment_tree").find(".Clinetop, .Clinebot, .Glinetop, .Glinebot").remove(),
            ZPeople.OrgTree.findAndSelRootUser(selId, !1, !0)
        }
    },
    constructTree: function(resultData, prams, deptId, recreate) {
        var deptTreeObj = Layout.Page.container.find("#zp_deprtment_tree");
        if ("NO_DATA" === resultData.response.message)
            deptTreeObj.empty(),
            ZPeople.OrgTree.showTreeError(ZPI18N.getString("zp.nodatafound"), "zp_deprtment_tree");
        else if ("NO_PERMISSION" === resultData.response.message)
            deptTreeObj.empty(),
            ZPeople.OrgTree.showTreeError(ZPI18N.getString("zp.permissiondeniedtoaccessthispage"), "zp_deprtment_tree");
        else if (resultData.success && void 0 !== resultData.response.treeArr && resultData.response.treeArr.length > 0) {
            var isLoaded = deptTreeObj.attr("loaded");
            "true" !== isLoaded || recreate ? deptTreeObj.empty().attr("loaded", "true") : deptTreeObj.find(".Clinetop, .Clinebot, .Glinetop, .Glinebot").remove(),
            null === ZPeople.DepartmentTree.getData() && ZPeople.DepartmentTree.updateData(resultData);
            for (var treeLvl = 1, id = deptId, isFirstLevel = !1, treeHtml = "", deptIds = [], isCyclicDep = !1, treeCnt = 0; treeCnt < treeLvl; treeCnt++) {
                if (ZPUtil.Validation.isEmpty(id) || (-1 === deptIds.indexOf(id) ? deptIds.push(id) : isCyclicDep = !0),
                isCyclicDep) {
                    deptTreeObj.empty(),
                    ZPeople.OrgTree.showTreeError(ZPI18N.getString("zp.treeycyclicerror"), "zp_deprtment_tree");
                    break
                }
                if (ZPeople.DepartmentTree.PREV_DEPTID !== id) {
                    var level = ZPeople.DepartmentTree.getLevel(id)
                      , deptUsers = ZPeople.DepartmentTree.getDepartmentMembers(id);
                    if (level.length > 0 || deptUsers.length > 0) {
                        treeHtml = ZPeople.DepartmentTree.constructLevel(level, deptUsers, id);
                        ZPeople.OrgTree.regTreeFun(treeHtml, !0),
                        "true" !== isLoaded || recreate ? deptTreeObj.prepend(treeHtml) : deptTreeObj.append(treeHtml)
                    }
                }
                if (ZPUtil.Validation.isEmpty(id) ? ZPUtil.Validation.isEmpty(id) && !isFirstLevel && 0 === level.length && (treeLvl++,
                id = "",
                isFirstLevel = !0) : (id = ZPeople.DepartmentTree.getDepartmentParentId(id),
                treeLvl++),
                treeLvl > 20 || "true" === isLoaded && !recreate)
                    break
            }
            deptTreeObj.attr("loaded", "true").children().each(function(i) {
                $(this).attr("id", "zp_tree_level_" + (i + 1)),
                $(this).attr("level", i + 1),
                0 === i && $(this).find("li").attr("parentid", "")
            });
            var selId = deptId;
            void 0 !== Layout.Page.urlparam.user && (selId = Layout.Page.urlparam.user),
            ZPUtil.Validation.isEmpty(selId) || (("true" !== isLoaded || recreate) && ZPeople.OrgTree.showSelectedTreeUsers(selId),
            ZPeople.OrgTree.findAndSelRootUser(selId, !1, !0),
            ZPeople.DepartmentTree.PREV_DEPTID = deptId);
            id = Layout.Page.urlparam.id;
            void 0 !== Layout.Page.urlparam.user && (id = Layout.Page.urlparam.user),
            deptTreeObj.find("#tree_content_" + id).parent().parent().parent().each(function() {
                Layout.Page.container.find(".IC-ar-top, .IC-ar-dwn").css("left", $(this).position().left + 120 + "px")
            })
        }
    },
    constructLevel: function(level, users, id) {
        var treeHtml = $('<div class="emtdiv ETexp"><div class="abdiv"><ul></ul></div></div>');
        return $.each(users, function(ind, user) {
            var userObj = $('<li id="tree_content_' + user.id + '" parentid="' + id + '" user="true" subcount="0" class=""><div class="conta" user="true"><img class="" id="zp_emptree_oripho" src="' + user.thumb + '"/><img src="' + ZPeople.getDefaultUserImagePath() + '" id="dummy_loading_image"/><div class="det" title="' + user.name + '"><b>' + user.name + "</b><span>" + (ZPUtil.Validation.isEmpty(user.designation) ? "-" : user.designation) + '</span></div></div><div class="lin"></div>' + (0 === ind ? '<div class="Hlinetop"></div>' : "") + (0 === level.length && users.length == ind + 1 ? '<div class="Hlinebot"></div>' : "") + "</li>");
            userObj.on("click", function() {
                var userid = $(this).attr("id").split("_").pop();
                window.location.href = "#" + Layout.Page.currentmode + "-id:" + id + "/user:" + userid
            }),
            treeHtml.find("ul").append(userObj)
        }),
        $.each(level, function(ind, data) {
            var subCount = ZPeople.DepartmentTree.getSubCount(data.id)
              , obj = $('<li id="tree_content_' + data.id + '" subcount="' + subCount + '" parentid="' + id + '" class="' + (subCount > 0 ? "ecot" : "") + '"><div class="conta"><div class="dpcnt">' + ZPeople.getShortName(data.name) + '</div><div class="det" title="' + data.name + '"><b>' + data.name + "</b><span>" + ZPForm.Field.getNoValueString(data.mail) + '</span></div></div><div class="lin"></div>' + (subCount > 0 ? '<div class="ecount">' + subCount + "</div>" : "") + (0 === ind && 0 === users.length ? '<div class="Hlinetop"></div>' : "") + (level.length == ind + 1 ? '<div class="Hlinebot"></div>' : "") + "</li>");
            obj.on("click", function() {
                $(this).attr("id").split("_").pop();
                window.location.href = "#" + Layout.Page.currentmode + "-id:" + data.id
            }),
            treeHtml.find("ul").append(obj)
        }),
        treeHtml
    },
    getSubCount: function(id) {
        for (var count = 0, treeData = ZPeople.DepartmentTree.getData().response.treeArr, deptLevel = 1, sub = [], level = 0; level < deptLevel; level++) {
            for (var newsub = [], deptCnt = 0; deptCnt < treeData.length; deptCnt++) {
                var data = treeData[deptCnt];
                data[2] !== id && -1 === sub.indexOf(data[2]) && data[0] !== id || -1 !== sub.indexOf(data[0]) || -1 !== newsub.indexOf(data[0]) || (newsub.push(data[0]),
                count += data[4].length)
            }
            if (newsub.length > 0 && deptLevel++,
            sub = sub.concat(newsub),
            level > 20)
                break
        }
        return count
    },
    getDepartmentParentId: function(id) {
        var parentId = "";
        return $.each(ZPeople.DepartmentTree.getData().response.treeArr, function(ind, data) {
            if (data[0] === id)
                return parentId = data[2],
                !1
        }),
        parentId
    },
    getLevel: function(id) {
        var result = [];
        return $.each(ZPeople.DepartmentTree.getData().response.treeArr, function(ind, data) {
            (data[2] === id || ZPUtil.Validation.isEmpty(data[2]) && ZPUtil.Validation.isEmpty(id)) && result.push({
                id: data[0],
                name: data[1],
                parentId: data[2],
                mail: data[3]
            })
        }),
        result
    },
    getDepartmentMembers: function(id) {
        var users = []
          , desiIdList = ZPeople.DepartmentTree.getData().response.desiIdList
          , desiNameList = ZPeople.DepartmentTree.getData().response.desiNameList;
        return $.each(ZPeople.DepartmentTree.getData().response.treeArr, function(ind, data) {
            if (data[0] === id && void 0 !== data[4] && data[4].length > 0)
                return $.each(data[4], function(ind, user) {
                    var userJson = {
                        usererec: user[0],
                        id: user[0],
                        empid: user[1],
                        name: ZPeople.getUserDisplayName(user[2], user[3]),
                        mail: user[4],
                        avatarid: user[6]
                    };
                    ZPeople.setPhotoURL(user[5], user[7], userJson),
                    ZPeople.setUserValues(user[8], userJson, desiIdList, desiNameList, "designation", "desiId"),
                    users.push(userJson)
                }),
                !1
        }),
        users
    }
},
ZPeople.Module = {
    MODULE_DATA: {},
    CURRENT_MODULEPREFIX: null,
    getModulePrefix: function(level) {
        var startInd = 0;
        Layout.Page.isCP && (startInd = 1,
        level -= 1);
        var modeArr = Layout.UrlConf.getOriginalHash().split("/");
        "form/listview" !== Layout.Page.currentmode && -1 !== Layout.Page.currentmode.indexOf("form/listview") && (startInd = 1);
        var modulePrefix = modeArr[startInd];
        return 2 === level && void 0 !== modeArr[startInd + 1] ? modulePrefix += "-" + modeArr[startInd + 1] : 3 === level && void 0 !== modeArr[startInd + 1] && void 0 !== modeArr[startInd + 2] && (modulePrefix += "-" + modeArr[startInd + 1] + "-" + modeArr[startInd + 2]),
        modulePrefix
    },
    getInitModulePrefix: function() {
        var modulePfx, moduleConf = ZPConf.getModuleProperties(), hashDtl = Layout.UrlConf.getHashDetails();
        return ZPUtil.Validation.isEmpty(hashDtl.initModuleMode) ? hashDtl.initModule ? modulePfx = Layout.UrlConf.getOriginalHash().replace(/\//g, "-") : void 0 !== moduleConf && moduleConf.initModule && (modulePfx = ZPeople.Module.getModulePrefix()) : modulePfx = hashDtl.initModuleMode,
        Layout.UrlConf.isServiceMode && void 0 !== Layout.Page.urlparam.formId && (modulePfx += "_" + Layout.Page.urlparam.formId),
        modulePfx
    },
    getData: function(key) {
        if (key = void 0 === key ? ZPeople.Module.CURRENT_MODULEPREFIX : key,
        void 0 !== ZPeople.Module.MODULE_DATA[key])
            return ZPeople.Module.MODULE_DATA[key]
    },
    getInitModuleParams: function(hashDtl) {
        hashDtl.hash = Layout.Page.currentmode;
        var params = null
          , modulePfx = ZPeople.Module.getInitModulePrefix();
        if (void 0 === modulePfx || ZPeople.Module.isInitiated(modulePfx))
            void 0 !== modulePfx && (ZPeople.Module.CURRENT_MODULEPREFIX = -1 !== modulePfx.indexOf("form-listview") ? ZPeople.Module.getModuleKey() : modulePfx);
        else {
            params = {
                modulePrefix: modulePfx
            },
            ZPeople.Module.setModuleSpecificParams(modulePfx, params)
        }
        return params
    },
    setModulePrefix: function() {
        var modulePrefix = ZPeople.Module.getInitModulePrefix();
        void 0 !== modulePrefix && ZPeople.Module.isInitiated(modulePrefix) && (ZPeople.Module.CURRENT_MODULEPREFIX = -1 !== modulePrefix.indexOf("form-listview") ? ZPeople.Module.getModuleKey() : modulePrefix)
    },
    setUpModuleResponse: function(data, params) {
        if (ZPeople.Module.CURRENT_MODULEPREFIX = -1 !== params.modulePrefix.indexOf("form-listview") ? ZPeople.Module.getModuleKey() : params.modulePrefix,
        Layout.UrlConf.isModuleForm() && ZPeople.Module.getModuleKey() === params.modulePrefix) {
            var json = {
                viewDetails: data.viewDetails,
                isAdmin: data.isAdmin
            };
            ZPeople.Module.MODULE_DATA[ZPeople.Module.getModuleKey()] = json
        }
        data.domStatus && (ZPForm.isDomainPresent = data.domStatus.isDomainPresent,
        ZPForm.isMobileUserAllowed = Import.isMobileUserAllowed = data.domStatus.ALLOW_MOBILEUSER_ADDITION,
        ZPeople.isAllowedToAddUserDirectly = !0),
        data.formDetailsMap && ZPForm.updateFormConf(data.formDetailsMap),
        ZPeople.Module.MODULE_DATA[-1 !== params.modulePrefix.indexOf("form-listview") ? ZPeople.Module.getModuleKey() : params.modulePrefix] = data,
        "performance" == ZPeople.Module.getModuleKey() && Appraisal.setappdata()
    },
    setModuleSpecificParams: function(modulePfx, params) {
        try {
            if (Layout.UrlConf.isForm()) {
                void 0 !== Layout.Page.urlparam.formId && (params.formId = Layout.Page.urlparam.formId),
                void 0 !== Layout.Page.urlparam.transferId && (params.transferId = Layout.Page.urlparam.transferId);
                var modeArr = Layout.UrlConf.getOriginalHash().split("/");
                Layout.UrlConf.isFormActionMode(modeArr[modeArr.length - 1]) && modeArr.pop(),
                params.submode = modeArr.join("-")
            }
        } catch (e) {}
    },
    getModuleKey: function() {
        var modulePrf = this.getModulePrefix();
        return Layout.Page.hashDtl.initModule && (ZPUtil.Validation.isEmpty(Layout.Page.hashDtl.initModuleMode) ? Layout.UrlConf.isServiceMode || "services" === modulePrf || "form" === modulePrf ? modulePrf += "_" + Layout.Page.urlparam.formId : modulePrf = Layout.Page.currentmode.replace(/\//g, "-") : modulePrf = Layout.Page.hashDtl.initModuleMode),
        modulePrf
    },
    isInitiated: function(mode) {
        -1 !== (mode = void 0 === mode ? this.getModuleKey() : mode).indexOf("form-listview") && (mode = ZPeople.Module.getModuleKey());
        var moduleData = ZPeople.Module.MODULE_DATA[mode];
        return void 0 !== moduleData && ("timetracker" !== mode || void 0 !== moduleData.formDetails)
    },
    checkModuleInit: function(mode) {
        var moduleKey = mode.split("/")[0];
        return !(ZPConf.getModuleProperties(moduleKey).initModule && !ZPeople.Module.isInitiated(moduleKey))
    }
},
ZPeople.confirm = function(ele, head, desc, func, isAlert, ismessage, btnval, isHtml, isdelete, cancelCallback) {
    var popup = $("#confirmationPopup");
    popup.find("#textConfirmationPopupHeader").empty(),
    popup.find("#textConfirmationPopupBody").empty();
    var hd = ""
      , dsc = "";
    "" != head && (hd = ismessage ? head : ZPI18N.getString(head)),
    "" != desc && (dsc = ismessage ? desc : ZPI18N.getString(desc)),
    isHtml ? (popup.find("#textConfirmationPopupHeader").append(jQuery("<p />", {
        class: "ZPbold S16"
    }).html(hd)),
    popup.find("#textConfirmationPopupBody").append(jQuery("<p />").html(dsc))) : (popup.find("#textConfirmationPopupHeader").append(jQuery("<p />", {
        class: "ZPbold S16"
    }).text(hd)),
    popup.find("#textConfirmationPopupBody").append(jQuery("<p />").text(dsc))),
    popup.find("#confirmConfirmationPopup").off(),
    "function" == typeof func && popup.find("#confirmConfirmationPopup").on("click", function() {
        func(ele)
    }),
    popup.find("#cancelConfirmationPopup").off(),
    cancelCallback && "function" == typeof cancelCallback && popup.find("#cancelConfirmationPopup").on("click", ()=>cancelCallback(ele)),
    isAlert ? (popup.find("#cancelConfirmationPopup").hide(),
    btnval = void 0 == btnval || "" == btnval ? ZPI18N.getString("zp.done") : btnval,
    popup.find("#confirmConfirmationPopup").text(btnval)) : (popup.find("#cancelConfirmationPopup").show(),
    btnval = void 0 == btnval || "" == btnval ? ZPI18N.getString("zp.confirm") : btnval,
    popup.find("#confirmConfirmationPopup").text(btnval)),
    isdelete ? popup.find("#confirmConfirmationPopup").removeClass("btn-primary").addClass("btn-danger") : popup.find("#confirmConfirmationPopup").addClass("btn-primary").removeClass("btn-danger"),
    popup.modal({
        backdrop: "static"
    })
}
,
ZPeople.FireScroll = {
    TRIGGERED: !1,
    FIRESCROLL_EVENT: {},
    getCurrentMode: function() {
        var mode = Layout.Page.currentmode;
        if ("organization/department/searchdepts" == mode) {
            var curDeptId = Layout.Page.urlparam.deptId;
            void 0 === Layout.Page.urlparam.deptId && (curDeptId = ZPeople.isZPNewUI() ? ZPUsers.Department.CUR_DEPT_ID : ZPUserList.CUR_DEPT_ID),
            mode = mode + "-" + curDeptId
        }
        return mode.replace(/\//g, "-")
    },
    init: function(callback, id, extraDtls) {
        (void 0 === id ? Layout.Page.parentContainer.find("[scroll=enabled]") : $("#" + id).find("[scroll=enabled]")).off("scroll").on("scroll", function() {
            if (ZPeople.FireScroll.getFireScrollPropertie().triggered)
                return !1;
            this.scrollHeight - 100 < $(this).scrollTop() + $(window).height() && (ZPeople.FireScroll.getFireScrollPropertie().triggered = !0,
            extraDtls ? callback(extraDtls) : callback())
        })
    },
    getFireScrollPropertie: function() {
        var mode = ZPeople.FireScroll.getCurrentMode();
        return ZPeople.FireScroll.initializeMode(mode),
        ZPeople.FireScroll.FIRESCROLL_EVENT[mode]
    },
    setRecordCount: function(recordCount) {
        ZPeople.FireScroll.getFireScrollPropertie().count = recordCount
    },
    increaseRecordCount: function(recordCount) {
        ZPeople.FireScroll.getFireScrollPropertie().count += recordCount
    },
    getRecordCount: function() {
        return ZPeople.FireScroll.getFireScrollPropertie().count
    },
    setParam: function(paramName, paramVal) {
        ZPeople.FireScroll.getFireScrollPropertie()[paramName] = paramVal
    },
    initializeMode: function(mode) {
        void 0 === ZPeople.FireScroll.FIRESCROLL_EVENT[mode] && (ZPeople.FireScroll.FIRESCROLL_EVENT[mode] = {},
        ZPeople.FireScroll.FIRESCROLL_EVENT[mode].triggered = !1)
    },
    reset: function() {
        ZPeople.FireScroll.getFireScrollPropertie().triggered = !1
    }
},
ZPeople.BSModal = {
    MODAL_FOOTER: '<div class="modal-footer"><button type="button" id="zp_modal_blubtn" class="btn btn-primary">' + ZPI18N.getString("zp.submit") + '</button><button type="button" class="btn btn-default" id="zp_modal_whitebtn" data-dismiss="modal">' + ZPI18N.getString("zp.cancel") + "</button></div>",
    MODAL_1: '<div id="zp_modal_popup_1" class="modal fade ZPmdl" role="dialog" aria-labelledby="modal"><div class="modal-dialog"><div class="modal-content"><div class="modal-header PR"><button data-dismiss="modal" class="close"><span><i class="IC-cls-1px red S21 CP"></i></span></button><h4 class="modal-title" id="zp_modal_header"></h4></div><div class="modal-body" id="zp_modal_body"></div></div></div></div>',
    MODAL_2: '<div class="modal" id="zp_modal_popup_2" role="dialog" aria-labelledby="modal"><div class="modal-dialog" role="document"><div class="modal-content"><div class="modal-header PR"><button aria-label="Close" data-dismiss="modal" class="close" type="button"><span aria-hidden="true"><div class="IC-cls-1px red S21 CP"></div></span></button><h6 class="addPopTitle" id="zp_modal_header"></h6></div><div class="modal-body" id="zp_modal_body"></div></div></div></div>',
    MODAL_3: '<div class="modal fade ZPmdl DelMdl" role="dialog" aria-labelledby="modal" id="zp_modal_popup_3"><div class="modal-dialog" role="document"><div class="modal-content"><div class="modal-header PR"><div class="Icn"><i id="zp_modal_icon" class="whi S24"></i></div><button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true"><div class="IC-cls-1px red S21 CP"></div></span></button><h4 id="zp_modal_header" class="modal-title"></h4></div><div class="modal-body"><div class="container-fluid"><p class="text-center LH20" id="zp_confirm_body"></p></div></div></div></div></div>',
    MODAL_4: '<div id="zp_modal_popup_4" class="modal fade ZPsecModal" aria-labelledby="modal"><div class="modal-dialog" role="document"><div class="modal-content"><div class="modal-header"><button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true"><div class="IC-cls-1px red S21 CP"></div></span></button><h4 id="zp_modal_header" class="modal-title"></h4></div><div class="modal-body" id="zp_modal_body"></div></div></div></div>',
    MODAL_5: '<div class="modal fade ZPmdl DelMdl" role="dialog" aria-labelledby="modal" id="zp_modal_popup_5"><div class="modal-dialog" role="document"><div class="modal-content"><div class="modal-header PR"><div class="Icn"><i id="zp_modal_icon" class="whi S24"></i></div><button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true"><div class="IC-cls-1px red S21 CP"></div></span></button><h4 id="zp_modal_header" class="modal-title"></h4></div><div class="modal-cmn"><div id="step1"><div class="modal-body"></div></div></div></div></div></div>',
    MODAL_22: '<div class="modal" id="zp_modal_popup_2" role="dialog" aria-labelledby="modal"><div class="modal-dialog" role="document"><div class="modal-content"><div class="modal-header PR"><h6 class="addPopTitle" id="zp_modal_header"></h6></div><div class="modal-body" id="zp_modal_body"></div></div></div></div>',
    MODAL_23: '<div class="modal"><div class="modal-dialog" role="document"><div class="modal-content"><div class="modal-header"></div><div class="ZPListing"><div class="ZPListingHdr"><ul class="ZPListingUL"><li class="name W500">' + ZPI18N.getString("zp.empdtls") + '</li><li id="ackTime">' + ZPI18N.getString("zp.acktime") + '</li></ul></div></div><div class="modal-body" id="zp_modal_body"  scroll="enabled"></div></div></div></div>',
    setup: function(json) {
        var modal = ZPeople.BSModal.get(json);
        return ZPeople.BSModal.show(modal, json),
        modal
    },
    get: function(json) {
        var modal;
        return 0 === (modal = void 0 !== json.LayerId ? $("#" + json.LayerId).find("#" + json.id) : Layout.Page.container.find("#" + json.id)).length && (modal = $(this["MODAL_" + json.type]),
        !0 === json.isWrapperAppend ? $("#wrapper").append(modal) : void 0 === json.LayerId ? Layout.Page.container.append(modal) : $("#" + json.LayerId).append(modal),
        modal.on("hidden.bs.modal", function() {
            if (json.deleteOnHide) {
                var modal = this;
                setTimeout(function() {
                    $(modal).remove()
                }, 500)
            }
            void 0 !== json.hiddenCallback && "function" == typeof json.hiddenCallback && json.hiddenCallback()
        })),
        modal.data("modal", json),
        json.extraDetails && modal.data("extraDetails", json.extraDetails),
        json.disableHeader && modal.find(".modal-header").remove(),
        json.headerClass && modal.find(".modal-header").addClass(json.headerClass),
        json.removeHeaderClass && modal.find(".modal-header").removeClass(json.removeHeaderClass),
        json.closeonEsc && modal.attr("tabindex", "-1"),
        json.overwriteModalClass && modal.attr("class", "modal"),
        json.modalClass && modal.addClass(json.modalClass),
        json.dialogClass && modal.find(".modal-dialog").addClass(json.dialogClass),
        json.contentClass && modal.find(".modal-content").addClass(json.contentClass),
        json.removeModalClass && modal.removeClass(json.removeModalClass),
        json.bodyClass && modal.find(".modal-body").addClass(json.bodyClass),
        json.customBodyAttr && $.each(json.customBodyAttr, function(key, value) {
            modal.find(".modal-body").attr(key, value)
        }),
        json.iconClass && modal.find("#zp_modal_icon").addClass(json.iconClass),
        json.iconParenClass && modal.find("#zp_modal_icon").parent().addClass(json.iconParenClass),
        json.disableFooter || (json.footer && 0 === modal.find(".modal-footer").length ? modal.find(".modal-body").after(json.footer) : 0 === modal.find(".modal-footer").length && modal.find(".modal-body").after(ZPeople.BSModal.MODAL_FOOTER)),
        !json.disableFooter && modal.find("#zp_modal_blubtn").length > 0 && (json.disableSubmitButton ? modal.find("#zp_modal_blubtn").hide() : void 0 !== json.successCallback && "function" == typeof json.successCallback && (modal.find("#zp_modal_blubtn")[0].onclick = function() {
            json.successCallback(modal),
            json.closeOnSubmit && ZPeople.BSModal.hide(json.id)
        }
        )),
        modal.attr("id", json.id),
        json.disableHeader ? modal.find("#zp_modal_header").remove() : json.headerHtml ? modal.find(".modal-header").html(json.headerHtml) : void 0 !== json.header && modal.find("#zp_modal_header").html(json.header),
        void 0 !== json.tabs && modal.find(".modal-body").before(json.tabs),
        void 0 !== json.body && (3 !== json.type || json.isConfirm ? modal.find(".modal-body").html(json.body) : modal.find("#zp_confirm_body").html(json.body)),
        json.searchHtml && modal.find(".modal-body").prepend(json.searchHtml),
        !json.disableFooter && json.buttonValue && modal.find("#zp_modal_blubtn").html(json.buttonValue),
        "" != json.whitebtnvalue && void 0 != json.whitebtnvalue && modal.find("#zp_modal_whitebtn").html(json.whitebtnvalue),
        json.removeContentClass && modal.find(".modal-content").removeClass(json.removeContentClass),
        json.removeBodyClass && modal.find(".modal-body").removeClass(json.removeBodyClass),
        json.removeDialogClass && modal.find(".modal-dialog").removeClass(json.removeDialogClass),
        json.confirmButtonClass && modal.find("#zp_modal_blubtn").addClass(json.confirmButtonClass),
        json.removeConfirmButtonClass && modal.find("#zp_modal_blubtn").removeClass(json.removeConfirmButtonClass),
        json.cancelButtonClass && modal.find("#zp_modal_whitebtn").addClass(json.cancelButtonClass),
        json.removeCancelButtonClass && modal.find("#zp_modal_whitebtn").removeClass(json.removeCancelButtonClass),
        json.footerClass && modal.find(".modal-footer").addClass(json.footerClass),
        json.removeFooterClass && modal.find(".modal-footer").removeClass(json.removeFooterClass),
        modal
    },
    show: function(modal, options) {
        var comp = "show";
        void 0 !== options && (comp = {
            backdrop: options.backdrop
        }),
        modal.find(".modal-body").scrollTop(0),
        modal.modal(comp)
    },
    hide: function(id) {
        var modal;
        void 0 === id ? modal = Layout.Page.container.find("[aria-labelledby=modal]:visible") : (modal = Layout.Page.container.find("#" + id)).length <= 0 && (modal = $("#" + id)),
        void 0 !== modal && modal.modal("hide")
    },
    confirm: function(callback, header, body, btnVal, extraDtls, whitebtnvalue, hiddenCallback) {
        header = void 0 === header ? ZPI18N.getString("zp.zpalert") : header,
        body = void 0 === body ? ZPI18N.getString("zp.deleteconfirmmessage") : body,
        ZPeople.BSModal.setup({
            id: "zp_modal_confirmpop",
            type: 3,
            header: header,
            body: body,
            deleteOnHide: !0,
            closeOnSubmit: !0,
            isConfirm: !1,
            iconParenClass: "orgbgi",
            buttonValue: ZPUtil.Validation.isEmpty(btnVal) ? ZPI18N.getString("zp.confirm") : btnVal,
            iconClass: "IC-alert",
            backdrop: null == ZPeople.OPENMODAL && "static",
            keyboard: !1,
            successCallback: callback,
            extraDetails: extraDtls,
            hiddenCallback: hiddenCallback,
            whitebtnvalue: whitebtnvalue
        })
    },
    delete: function(callback, header, body, btnVal, extraDtls, whitebtnvalue, hiddenCallback) {
        header = void 0 === header ? ZPI18N.getString("zp.zpalert") : header,
        body = void 0 === body ? ZPI18N.getString("zp.deleteconfirmmessage") : body,
        ZPeople.BSModal.setup({
            id: "zp_modal_confirmpop",
            type: 3,
            header: header,
            body: body,
            deleteOnHide: !0,
            closeOnSubmit: !0,
            isConfirm: !1,
            iconParenClass: "delbgi",
            removeConfirmButtonClass: "btn-primary",
            confirmButtonClass: "btn btn-danger",
            buttonValue: ZPUtil.Validation.isEmpty(btnVal) ? ZPI18N.getString("zp.delete") : btnVal,
            iconClass: "IC-alert",
            backdrop: null == ZPeople.OPENMODAL && "static",
            keyboard: !1,
            successCallback: callback,
            extraDetails: extraDtls,
            hiddenCallback: hiddenCallback,
            whitebtnvalue: whitebtnvalue
        })
    }
},
ZPeople.User = {
    URL: "/userAction.zp",
    TABJSON: {},
    updateTabMinimize: function(value) {
        var params = {
            mode: "UPDATE_USERSETTING",
            key: "USER_TAB_MINIMIZE",
            value: value
        };
        ZPeople.Request.send(ZPeople.User.URL, params, ZPeople.User.handleResponse)
    },
    handleResponse: function(data, params) {
        if (data.success)
            if ("UPDATE_USERSETTING" === params.mode && (ZPeople.USER_CUST_SETTINGS = data.userSutObj),
            "USER_VERSION" === params.key) {
                var href = "";
                ZPUtil.Validation.isEmpty(ZPeople.PORTAL_NAME) || "null" == ZPeople.PORTAL_NAME || (href = "/" + ZPeople.PORTAL_NAME),
                "1" == params.value ? href += "/zp" : href += "/hr",
                window.location.href = href
            } else if ("USER_TAB_MINIMIZE" === params.key) {
                var isMin = "1" === params.value;
                ZPView.handleTablePosition(isMin),
                "/hr" == ZPeople.CONTEXT ? ZPTabs.registerHoverMinimizedTab(void 0, isMin) : ("1" === ZPeople.USER_CUST_SETTINGS.USER_TAB_MINIMIZE ? ($("#zp_active_subtabs").removeAttr("opened"),
                $("body").find("#zp_main_subtabs").removeClass("in"),
                ZPTabs.registerTabHoverEvents()) : ($("#zpeople_tabs").find("#zp_maintabs li[id!=zp_maintab_more]").off("mouseenter"),
                $("#zpeople_tabs").find("#zp_maintabs li[id!=zp_maintab_more]").off("mouseleave"),
                ZPTabs.constructSubtabsBasedOnHash(!1, ZPTabs.currMainTab, !0, !1)),
                null !== Layout.Page.hashDtl && void 0 !== Layout.Page.hashDtl.resizecallback && Layout.Page.call(Layout.Page.hashDtl.resizecallback))
            }
    },
    getEmployeeListWithNonUsers: function(type) {
        for (var result = "", userList = ZPeople.getUserListData(), uCnt = 0; uCnt < userList.length; uCnt++) {
            var userDtl = userList[uCnt];
            "true" !== userDtl.isLogEnb && "true" !== userDtl.isNonUser || "option" === type && (0 === uCnt && (result = '<option value="-Select-">-' + ZPI18N.getString("zp.select") + "-</option>"),
            result += '<option value="' + userDtl.usererec + '">' + userDtl.name + ",&nbsp;" + userDtl.empid + "</option>")
        }
        return result
    },
    getEmployeeListFormatByType: function(type) {
        for (var result = "", userList = ZPeople.getUserListData(), uCnt = 0; uCnt < userList.length; uCnt++) {
            var userDtl = userList[uCnt];
            "true" === userDtl.isLogEnb && "option" === type && (0 === uCnt && (result = '<option value="-Select-">-' + ZPI18N.getString("zp.select") + "-</option>"),
            result += '<option value="' + userDtl.usererec + '">' + userDtl.name + ",&nbsp;" + userDtl.empid + "</option>")
        }
        return result
    },
    getPhoto: function(photo) {
        return void 0 !== photo && "" !== photo.trim() || (photo = ZPeople.getDefaultUserImagePath()),
        photo
    },
    Theme: {
        MAIN_THEME: {
            0: " ZPDark ",
            1: "ZPLight"
        },
        COLOR_THEME: {
            0: "TBlue",
            1: "TPink",
            2: "TYellow",
            3: "TGreen"
        },
        setActiveTheme: function() {
            $("body").hasClass("ZPDark") && $("#zp_user_information").children().find("#toggle_theme").attr("checked", "checked");
            var theme = ZPeople.User.Theme.getActiveTheme();
            $("#zp_user_information").find("#zp_selection_theme").find(".ZPTC" + theme).addClass("active").html('<a><b class="IC-tick"></b></a>')
        },
        getActiveTheme: function() {
            var theme = 1;
            return $("body").hasClass("TPink") ? theme = 2 : $("body").hasClass("TYellow") ? theme = 3 : $("body").hasClass("TGreen") && (theme = 4),
            theme
        },
        registerThemes: function() {
            $("#zp_user_information").children().find("#toggle_theme").on("click", function() {
                var theme = "0";
                $("body").hasClass("ZPDark") ? (theme = "1",
                $("body").removeClass("ZPDark").addClass("ZPLight")) : $("body").removeClass("ZPLight").addClass("ZPDark");
                var params = {
                    mode: "UPDATE_USERSETTING",
                    value: theme,
                    key: "USER_MAIN_THEME"
                };
                ZPeople.Request.send(ZPeople.User.URL, params, ZPeople.User.Theme.themeResponse)
            }),
            $("#zp_user_information").children().find("#zp_selection_theme").children().on("click", function() {
                $("body").removeClass(ZPeople.User.Theme.COLOR_THEME[$(this).parent().children(".active").attr("theme")]),
                $(this).siblings().removeClass("active").html(""),
                $(this).addClass("active").html('<a><b class="IC-tick"></b></a>');
                var theme = $(this).attr("theme");
                $("body").hasClass("ZPDark"),
                $("body").addClass(ZPeople.User.Theme.COLOR_THEME[theme]);
                var params = {
                    mode: "UPDATE_USERSETTING",
                    value: theme,
                    key: "USER_COLOR_THEME"
                };
                ZPeople.Request.send(ZPeople.User.URL, params, ZPeople.User.Theme.themeResponse)
            })
        },
        themeResponse: function(resultdata) {
            resultdata.success ? (ZPeople.Message.showSuccessMsg(ZPI18N.getString("zp.themechangedsuccessfully")),
            PersonalSettings.userThemes.setActiveTheme()) : ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.sorryservererror"))
        }
    },
    updateUserVersion: function(version) {
        var params = {
            mode: "UPDATE_USERSETTING",
            value: version,
            key: "USER_VERSION"
        };
        ZPeople.Request.send(ZPeople.User.URL, params, ZPeople.User.handleResponse)
    },
    updateOtherUsersVersion: function(mode, id, zsoid, version, isBtnEnable) {
        var params = {
            mode: "UPDATE_USERSETTING",
            value: version,
            key: "USER_VERSION",
            idMode: mode,
            userId: id,
            userZsoid: zsoid,
            isBtnEnable: isBtnEnable
        };
        ZPeople.Request.send(ZPeople.User.URL, params)
    },
    updateUserTabs: function(tabJson, seq, ObjId) {
        var params = {
            mode: "UPDATE_USERTABS"
        };
        void 0 !== tabJson[ObjId].disName ? params.actionType = "RENAME" : void 0 !== tabJson[ObjId].isHidden && (params.actionType = "ENABLEDISABLE"),
        params.tabId = ObjId,
        params.name = tabJson[ObjId].disName,
        params.isHidden = tabJson[ObjId].isHidden,
        ZPeople.Request.send(ZPeople.User.URL, params, ZPeople.User.handleTabsResponse, {
            id: ObjId
        })
    },
    handleTabsResponse: function(data, params, otherDtls) {
        if (!0 === data.success) {
            if (void 0 !== data.tabJson) {
                data.tabJson.tabId;
                ZPeople.User.updateTabJson(data.tabJson)
            }
        } else
            ZPeople.Message.showFailureMsg(ZPI18N.getString("zp.sorryservererror"))
    },
    updateTabJson: function(tabObj) {
        if (1 != tabObj.isSeq)
            for (var i = 0; i < ZPTabs.TAB_JSON.length; i++) {
                var tempObj = ZPTabs.TAB_JSON[i];
                tabObj.tabId === tempObj.tbId && (void 0 !== tabObj.disName ? (ZPTabs.TAB_JSON[i].disName = tabObj.disName,
                ZPTabs.TAB_JSON[i].orgDisName = tabObj.name) : ZPTabs.TAB_JSON[i].isHidden = 0 != tabObj.isHidden),
                ZPeople.User.showMangeTabModal(),
                ZPTabs.construct()
            }
        else {
            var tabtempObj = ZPTabs.TAB_JSON.slice();
            for (i = 0; i < tabtempObj.length; i++) {
                tempObj = tabtempObj[i];
                tabObj.oldSeq < tabObj.newSeq ? (tempObj.seq > tabObj.oldSeq || tempObj.seq == tabObj.newSeq) && tempObj.seq <= tabObj.newSeq && (tempObj.seq = tempObj.seq - 1,
                tabtempObj[i] = tempObj) : tempObj.seq <= tabObj.oldSeq && (tempObj.seq > tabObj.newSeq || tempObj.seq == tabObj.newSeq) && (tempObj.seq = tempObj.seq + 1,
                tabtempObj[i] = tempObj)
            }
            for (i = 0; i < tabtempObj.length; i++) {
                tempObj = tabtempObj[i];
                1 == tabObj.isSeq && tabObj.tabId === tempObj.tbId && (tabtempObj[i].seq = tabObj.newSeq)
            }
            ZPeople.User.rearrangeTabObject(tabtempObj, tabObj)
        }
    },
    rearrangeTabObject: function(tabtempObj, tabObj) {
        for (var copiedJson = tabtempObj.slice(), i = 0; i < tabtempObj.length; i++) {
            var tempJson = tabtempObj[i];
            tabObj.newSeq == tempJson.seq && (copiedJson.splice(tabObj.newSeq - 1, 0, tempJson),
            delete copiedJson[i + 1])
        }
        var newJSON = [];
        for (i = 0; i < copiedJson.length; i++) {
            void 0 !== (tempJson = copiedJson[i]) && null != tempJson && newJSON.push(tempJson)
        }
        ZPTabs.TAB_JSON = newJSON,
        ZPTabs.construct()
    },
    ISMODIFIED: !1,
    showMangeTabModal: function() {
        var bodyhtml = '<ul class="tabCont">';
        if ($.each(ZPTabs.TAB_JSON, function(index, value) {
            !0 === value.isStatic && (bodyhtml += '<li id="' + value.tbId + '" isEdit="false"><div class="mvr"><i class="IC-lock2"></i><span>' + value.disName + "</span> </div> </li>"),
            ZPeople.User.TABJSON[value.tbId] = {
                disName: value.disName,
                orgDisName: value.orgDisName,
                seq: value.seq,
                isHidden: value.isHidden
            }
        }),
        bodyhtml += "</ul>",
        bodyhtml += '<ul class="tabCont dragger">',
        $.each(ZPTabs.TAB_JSON, function(index, value) {
            !0 !== value.isStatic && "Admin" !== value.name && (bodyhtml += '<li id="' + value.tbId + '" isEdit="false" ' + (value.isSysTab || void 0 != value.subtabs && 0 != value.subtabs.length ? "" : "class='DN'") + '"><div class="mvr"><i class="CR-drag"></i><span>' + value.disName + '</span> <i class="IC-pen zp_edt gry" id="zp_tabedit"></i><label class="btnactive"> <input class="cmn-toggle-small cmn-toggle-round-small" id="zp_tabEnblDsbl" type="checkbox" ' + (1 == value.isHidden ? "" : ' checked="true" ') + '> <span class="M0"></span> </label> </div> </li>')
        }),
        bodyhtml += "</ul>",
        0 == $("#zp_organizetabmodal").length) {
            var modal = ZPeople.BSModal.get({
                id: "zp_organizetabmodal",
                type: 1,
                headerHtml: '<h6 class="addPopTitle">' + ZPI18N.getString("zp.customizetabs") + '</h6> <a data-dismiss="modal" class="close" type="button"> <i class="IC-cls-1px red S21 CP"></i> </a>',
                body: bodyhtml,
                disableFooter: !0,
                closeonEsc: !0,
                overwriteModalClass: !0,
                modalClass: "zptabOrg popRgtModel popLtModel",
                removeModalClass: "fade ZPmdl",
                deleteOnHide: !0,
                isWrapperAppend: !0
            });
            ZPeople.BSModal.show(modal)
        } else
            $("#zp_organizetabmodal").find("#zp_modal_body").html(bodyhtml);
        var mBody = $("#zp_organizetabmodal").find("#zp_modal_body");
        mBody.find(".dragger").sortable({
            placeholder: "mvr-hldr",
            update: function(e, ui) {
                var itemId = $(ui.item).attr("id");
                mBody.find(".dragger").children().each(function(ind, obj) {
                    if (itemId == $(obj).attr("id")) {
                        var param = {};
                        param.OSeq = ZPeople.User.TABJSON[$(obj).attr("id")].seq,
                        param.NSeq = ind + 4,
                        param.tabId = itemId,
                        ZPeople.User.updateTabsSequence(param)
                    }
                    ZPeople.User.TABJSON[$(obj).attr("id")].seq = ind + 4
                }),
                ZPeople.User.ISMODIFIED = !0
            }
        }).disableSelection(),
        mBody.find("[id='zp_tabedit']").on("click", function() {
            ZPeople.User.showHideEditMode($(this))
        }),
        mBody.find("[id='zp_tabEnblDsbl']").on("change", function() {
            ZPeople.User.enableDisableTabs($(this))
        })
    },
    updateTabsSequence: function(params) {
        params.mode = "UPDATE_USERTABS",
        params.actionType = "SEQUENCE",
        ZPeople.Request.send(ZPeople.User.URL, params, ZPeople.User.handleTabsResponse)
    },
    showHideEditMode: function(Obj) {
        var liObj = Obj.parents("li")
          , c = liObj.find(".mvr")
          , tabObj = ZPeople.User.TABJSON[liObj.attr("id")];
        "false" == liObj.attr("isEdit") ? (c.addClass("mv-edt"),
        c.find("span").addClass("DNI"),
        c.find("#zp_tabedit").addClass("DN"),
        c.find(".btnactive").addClass("DN"),
        c.append('<input type="text" class="form-control zptxt-edit" id="zp_tabname" value="' + ZPeople.escapeHtml(tabObj.orgDisName) + '"><div class="ZPActIcn"><div class="IC-cls red MT3 CP FR" id="zptab_cancel"></div><div class="IC-tick grn MR10 FR CP " id="zptab_save"></div> </div>'),
        c.find("input#zp_tabname").trigger("focus"),
        c.find("#zptab_save").on("click", function() {
            ZPeople.User.saveTabChange(tabObj, liObj)
        }),
        c.find("#zptab_cancel").on("click", function() {
            liObj.attr("isEdit", "true"),
            ZPeople.User.showHideEditMode(Obj)
        })) : (liObj.attr("isEdit", "false"),
        c.removeClass("mv-edt"),
        c.find("span").removeClass("DNI"),
        c.find("#zp_tabedit").removeClass("DN"),
        c.find(".btnactive").removeClass("DN"),
        c.find("input#zp_tabname").remove(),
        c.find("#zptab_save,#zptab_cancel").remove())
    },
    enableDisableTabs: function(Obj) {
        var liObj = Obj.parents("li")
          , c = liObj.find(".mvr")
          , tabObj = ZPeople.User.TABJSON[liObj.attr("id")];
        tabObj.isHidden = 1 != c.find("input#zp_tabEnblDsbl").is(":checked");
        var id = liObj.attr("id");
        if (void 0 !== id) {
            var tabDtl = {};
            tabDtl[id] = {
                isHidden: tabObj.isHidden
            },
            ZPeople.User.updateUserTabs(tabDtl, !1, id)
        }
    },
    saveTabChange: function(tabObj, liObj) {
        var tempName = liObj.find(".mvr").find("input#zp_tabname").val();
        if (!ZPUtil.Validation.isEmpty(tempName) && tempName.trim().length <= 50) {
            tabObj.disName = tempName;
            var id = liObj.attr("id");
            if (void 0 !== id) {
                var tabDtl = {};
                tabDtl[id] = {
                    disName: tabObj.disName
                },
                ZPeople.User.updateUserTabs(tabDtl, !1, id)
            }
        } else
            ZPUtil.Validation.isEmpty(tempName) ? ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.tabnameemptywarning")) : tempName.trim().length > 20 && ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.tabnamelengthmax"))
    }
},
ZPeople.ResponeCodes = {
    SUCCESS: 7e3,
    PERMISSION_ERR: 7040
},
ZPeople.Translation = {
    FORMNAMES: {
        "zp.PA": "Performance Appraisal",
        "zp.formasset": "Asset",
        "zp.formbenefit": "Benefit",
        "zp.formmedical": "Medical",
        "zp.salary": "Salary",
        "zp.formdisciplinary": "Disciplinary",
        "zp.formirca": "Irca",
        "zp.formeeo": "EEO",
        "zp.formada": "ADA",
        "zp.formfmla": "FMLA",
        "zp.formvets100": "VETS 100",
        "zp.formosha": "OSHA",
        "zp.employee": "Employee",
        "zp.department": "Department",
        "zp.designation": "Designation",
        "zp.training": "Training",
        "zp.formtrainingregistration": "Training Registration",
        "zp.formtrainingfeedback": "Training Feedback",
        "zp.formtravelrequest": "Travel Request",
        "zp.formtravelexpense": "Travel Expense",
        "zp.formexpense": "Expense",
        "zp.formworkexperiance": "Work Experience",
        "zp.formeducation": "Education",
        "zp.formdependent": "Dependent",
        "zp.formexitdetails": "Exit Details",
        "zp.formcompanypolicy": "Company Policy"
    },
    TABNAMES: {
        "zp.home": "Home",
        "zp.selfservice": "Self-Service",
        "zp.capleavetracker": "Leave Tracker",
        "zp.captimetracker": "Time Tracker",
        "zp.attendance": "Attendance",
        "zp.organization": "Organization",
        "zp.files": "Files",
        "zp.analytics": "Analytics",
        "zp.compliances": "Compliances",
        "zp.compensation": "Compensation",
        "zp.travel": "Travel",
        "zp.training": "Training"
    },
    checkAndGetTranslateValue: function(value, arr) {
        return $.each(arr, function(key, name) {
            value === name && (value = ZPI18N.getString(key))
        }),
        value
    },
    getFormName: function(value) {
        return this.checkAndGetTranslateValue(value, this.FORMNAMES)
    },
    getTabName: function(value) {
        return this.checkAndGetTranslateValue(value, this.TABNAMES)
    }
},
ZPeople.Help = {
    QALIST: {
        timetracker: {
            link: ["//www.zoho.com/people/help/administrator/time-tracker-intro.html", "//www.zoho.com/people/help/employee/time-tracker-intro.html"]
        },
        attendance: {
            link: ["//www.zoho.com/people/help/administrator/attendance-intro.html", "//www.zoho.com/people/help/employee/attendance-intro.html"]
        },
        leavetracker: {
            link: ["//www.zoho.com/people/help/administrator/leave-intro.html", "//www.zoho.com/people/help/employee/leave-intro.html"]
        },
        performance: {
            link: ["//www.zoho.com/people/help/administrator/performance-intro.html", "//www.zoho.com/people/help/employee/performance-intro.html"]
        },
        files: {
            link: ["//www.zoho.com/people/help/administrator/files.html", "//www.zoho.com/people/help/employee/files-intro.html"]
        },
        announcements: {
            link: ["//www.zoho.com/people/help/adminguide/announcements.html", ""]
        },
        admin_approval: {
            link: ["//www.zoho.com/people/help/administrator/approval-approvals.html", "//www.zoho.com/people/help/administrator/approval-approvals.html"]
        },
        admin_automation: {
            link: ["//www.zoho.com/people/help/administrator/automation.html", "//www.zoho.com/people/help/administrator/automation.html"]
        }
    },
    getModuleData: function() {
        var mkey = ZPeople.Help.getHelpModuleKey();
        return void 0 === ZPeople.Help.QALIST[mkey] && (ZPeople.Help.QALIST[mkey] = {}),
        ZPeople.Help.QALIST[mkey]
    },
    get: function(helpKey, isLink) {
        var moduleData = ZPeople.Help.getModuleData();
        return (isLink = void 0 === isLink ? ZPeople.Help.isLink() : isLink) ? isadmin ? moduleData.link[0] : moduleData.link[1] : void 0 !== moduleData[helpKey] ? moduleData[helpKey] : void 0
    },
    set: function(data) {
        ZPeople.Help.getModuleData()[data.key] = data.list
    },
    response: function(result, params) {
        ZPeople.Help.set(result),
        ZPeople.Help.show(!0)
    },
    show: function(isFromReq) {
        if (ZPeople.isAdmin() && void 0 !== Layout.Page.hashDtl.helpKey && !ZPeople.Help.isLink()) {
            var helpKey = Layout.Page.hashDtl.helpKey
              , arr = ZPeople.Help.get(helpKey);
            if (void 0 !== arr) {
                for (var bodyHtml = $('<div class="zhc-maindiv"><div class="zhc-ansdiv zhc-back" id="zp_help_answercont"><div class="zhc-ans-hdr" id="zp_question"></div><div class="zhc-ans-content" id="zp_answer_cont"></div></div><div class="zhc-listdiv zhc-front zhc-show" id="zp_help_answerlist"><ul class="help-lists" id="zp_help_quetions"></ul></div></div>'), i = 1; i <= arr.length; i++)
                    bodyHtml.find("#zp_help_quetions").append($('<li ind="' + i + '"><a href="javascript:;">' + arr[i - 1][0] + "</a></li>").on("click", ZPeople.Help.showAnswer));
                var headerHtml = $('<h2 class="ZPbgblue"><i id="zp_hel_ques_ico" class="IC-qus gry S22 FL MT8 MR5"></i><i id="zp_hel_back_ico" class="gry IC-ar-lft blu DN"></i>&nbsp;<span>' + ZPI18N.getString("zp.helpcenter") + '</span></h2><button aria-label="Close" data-dismiss="modal" class="close" type="button"><span aria-hidden="true"><div class="IC-cls-1px red S21 CP"></div></span></button>');
                headerHtml.find("#zp_hel_back_ico").on("click", function() {
                    ZPeople.Help.toggle()
                }),
                ZPeople.BSModal.setup({
                    modalClass: "popRgtModel ZPAdpop PopSmModel",
                    id: "zp_help_modal",
                    type: 2,
                    bodyClass: "NomdlFoot zhc-modal",
                    LayerId: "wrapper",
                    headerHtml: headerHtml,
                    body: bodyHtml,
                    disableFooter: !0
                })
            } else
                isFromReq || ZPeople.Request.send("/commonAction.zp", {
                    mode: "GET_HELP",
                    helpKey: helpKey
                }, ZPeople.Help.response)
        } else if (ZPeople.Help.isEnabled()) {
            var link = ZPeople.Help.get(void 0, !0);
            ZPeople.isChinaSetup && (link = link.replace(".com", ".com.cn")),
            window.open(link, "_blank")
        }
    },
    showAnswer: function() {
        var helpInd = $(this).attr("ind");
        if (void 0 !== helpInd && void 0 !== Layout.Page.hashDtl.helpKey) {
            var arr = ZPeople.Help.get(Layout.Page.hashDtl.helpKey);
            if (void 0 !== arr) {
                var qaList = arr[parseInt(helpInd) - 1]
                  , answerHtml = $("#zp_help_modal").find("#zp_help_answercont");
                answerHtml.find("#zp_question").html(qaList[0]),
                answerHtml.find("#zp_answer_cont").html(qaList[1]),
                answerHtml.siblings().removeClass("zhc-show").addClass("zhc-hide"),
                answerHtml.removeClass("zhc-hide").addClass("zhc-show"),
                ZPeople.Help.toggle(answerHtml, !0)
            }
        }
    },
    toggle: function(answerHtml, isQues) {
        void 0 === answerHtml && (answerHtml = $("#zp_help_modal").find("#zp_help_answercont")),
        isQues ? (answerHtml.siblings().removeClass("zhc-show").addClass("zhc-hide"),
        answerHtml.removeClass("zhc-hide").addClass("zhc-show"),
        $("#zp_help_modal").find("#zp_hel_back_ico").removeClass("DN").siblings("#zp_hel_ques_ico").addClass("DN")) : (answerHtml.siblings().removeClass("zhc-hide").addClass("zhc-show"),
        answerHtml.removeClass("zhc-show").addClass("zhc-hide"),
        $("#zp_help_modal").find("#zp_hel_back_ico").addClass("DN").siblings("#zp_hel_ques_ico").removeClass("DN"))
    },
    getHelpModuleKey: function() {
        var arr = Layout.Page.currentmode.split("/")
          , mKey = arr[0];
        return (-1 !== Layout.Page.currentmode.indexOf("announcements") || Layout.Page.isCP) && (mKey = Layout.Page.isCP ? "admin_" + arr[1] : arr[1]),
        mKey
    },
    isLink: function() {
        return "announcements" === this.getHelpModuleKey()
    },
    isEnabled: function() {
        var module = this.getHelpModuleKey();
        return !(void 0 === this.QALIST[module] || !(ZPeople.isAdmin() || "announcements" !== module && ZPeople.Help.isLink()))
    },
    getHelpKeyByHash: function(hash) {
        return "#timetracker/scheduler/jobs" === (hash = void 0 == hash ? Layout.Page.hash : hash) ? "ttsjob" : "#timetracker/scheduler/projects" === hash ? "ttsproject" : "#timetracker/scheduler/clients" === hash ? "ttsclient" : "#leavetracker/views/applications" === hash ? "ltlaview" : void 0
    }
},
ZPeople.OtherScript = {
    init: function() {
        "undefined" != typeof Collaboration && (Collaboration.handleCustomMessage = function(val) {
            if (null !== val && "" !== val) {
                if (val.hrcase && HRCase.addCaseInWMS.getInstantCaseRow(val),
                val.forms && ZPForm.handleRecordValueChange(val.formId, val.recordIds),
                val.attendance) {
                    if (!Attendance.Entry.reloadFromWMS)
                        return void (Attendance.Entry.reloadFromWMS = !0);
                    if (Attendance.Report.empReportTableData = null,
                    Attendance.Report.dailyChartViewRep = null,
                    Attendance.Report.userReport = null,
                    null == Layout.Page.urlmode)
                        return;
                    var ulrMode = Layout.Page.urlmode;
                    if (-1 !== ulrMode.indexOf("attendance_entry") && null === Attendance.Entry.erecno) {
                        Attendance.Entry.loadToday = !1;
                        var premonth = Attendance.Entry.preMonth;
                        "attendance_entry_calendarview" === ulrMode && (null != Attendance.Entry.calObj && NewCalendar.constructCalendar(Attendance.Entry.calObj),
                        premonth = Attendance.Entry.calendarPreMonth),
                        Attendance.Entry.getList(Attendance.Entry.selectedView, premonth)
                    } else
                        -1 !== ulrMode.indexOf("attendance_report_dailyreport") ? Attendance.Report.getDailyReport() : -1 !== ulrMode.indexOf("attendance_report_userreport") && Attendance.Report.getUserReport();
                    if (Attendance.Dashboard) {
                        var pageId = $(Attendance.Dashboard.pageLayout());
                        pageId.find('[name="ATTENDANCE"]')[0] && pageId.find('[name="ATTENDANCE"] #ZPAtt_Dash_CurrDate')[0] && Attendance.Dashboard.WeeklyData.getCurWeekData(),
                        pageId.find("#ZPD_Top_Att_Stat")[0] && Attendance.Dashboard.CurrStatus.getCurrDayStatus(),
                        pageId.find('[name="ATTENDANCEREPORT"]')[0] && pageId.find('[name="ATTENDANCEREPORT"] #ZPAtt_dashborad_dailyReport')[0] && Attendance.Dashboard.DailyReport.getAttDailyReport()
                    }
                } else if (!0 === val.refses) {
                    var mode = 0;
                    val.mode && (mode = val.mode),
                    ZPeople.refreshSession(mode)
                } else if (void 0 !== val.like)
                    val.aOwner == _LOGGEDIN_ZUID && (void 0 === People.NTFN_CNT && (People.NTFN_CNT = 0),
                    1 == val.like ? People.Uns.handleCount(People.NTFN_CNT + 1) : People.NTFN_CNT > 0 && People.Uns.handleCount(People.NTFN_CNT - 1)),
                    ZPFeeds.Like.handleLikeNtfn(val);
                else if (val.bulkImport)
                    ZPeople.Message.showSuccessMsg(ZPI18N.getString("zp.applysettingssuccessmsg"), 6e4),
                    Attendance.Settings.erecNo = null;
                else if (val.absentScheduler)
                    ZPeople.Message.showSuccessMsg(ZPI18N.getString("zp.success"), 6e4);
                else if (val.timetracker) {
                    if ("Push Tlogs to ZProjects" === val.mode && (-1 !== Layout.Page.hash.indexOf("timetracker/reports/integrationreport") || -1 !== Layout.Page.hash.indexOf("reports/admin/timetracker/integration"))) {
                        var timelogData = val.timelogReportData ? val.timelogReportData : null
                          , rowElement = Layout.Page.container.find("#pushIcon_" + val.userErecno + "_" + val.projectId);
                        if (rowElement && 0 != rowElement.length) {
                            if (timelogData && val.userErecno && val.projectId)
                                if (-1 !== Layout.Page.hash.indexOf("timetracker/reports/integrationreport")) {
                                    var dateObj = Timetracker.reports.integrationReport.util.getFormattedDate()
                                      , fromDate = dateObj.fromdate
                                      , toDate = dateObj.todate
                                      , rowHtml = Timetracker.reports.integrationReport.ZBooks.constructReportRow(timelogData, fromDate, toDate);
                                    rowElement.parent().parent().replaceWith(rowHtml)
                                } else {
                                    rowHtml = ZPLite.Reports.Timetracker.integrationReport.constructReportRowHtml(timelogData, ZPLite.Reports.Timetracker.integrationReport.getParamsForReport());
                                    rowElement.parent().parent().replaceWith(rowHtml)
                                }
                            val.isErrorOccured && rowElement.removeClass("togg")
                        }
                    }
                } else if (val.istryNewEnabled)
                    ZPeople.refreshSession(),
                    $(".ZPaddPopOver").prepend('<li> <a class="u-link zpnewv" id="zpversion_lnk" href="javascript:;">Try New Version</a></li>');
                else if (void 0 != val.bulkOnboarding)
                    "onboarding-reports" === Layout.Page.container.attr("id") && ZPOnboarding.reloadData();
                else if (val.peopleplus)
                    ZPServices.getPPServiceStatusCallback(val);
                else if (val.departmentMonthlyReport)
                    organizationReports.departmentMonthlyReport.constructList(val);
                else if (val.udsupload)
                    lmsfileaction.isModuleRegistered(val.moduleName) ? lmsfileaction.wmsCallback(val) : "Files" == val.moduleName ? lmsfileuploaddownload.uploadCallBack(val) : "Forms" == val.moduleName && ZPForm.uploadCallBack(val);
                else if (val.LMS)
                    val.CourseEventManager && lmscourses.dispatchEvent(val.eventInfo);
                else if (val.LMSFeedbackEventManager)
                    lmsfeedback_v1.dispatchEvent(val.eventInfo);
                else if (val.LMSAssessmentEventManager)
                    lmstest.dispatchEvent(val.eventInfo);
                else if (val.LMSAssignmentEventManager)
                    lmstrainerview.dispatchEvent(val.eventInfo);
                else if (val.LMSSessionEventManager)
                    lmsattendance.dispatchEvent(val.eventInfo);
                else if (val.removeSessionStart) {
                    document.querySelector('[_rel="removeSessionStart_' + val.sessionId + '"]').remove(),
                    lmsmodule.sessionInfo[val.sessionId].meetingStatus = 1
                } else if (val.removeErrorSession)
                    lmssessions.recordingEvent(val);
                else if (val.meetingEnd)
                    lmssessions.meetingEnd(val);
                else if (val.addJoinForLearner)
                    lmssessions.appendJoinLink(val);
                else if (val.LMSRubrics)
                    lmsmanagerevaluation.updateRubrics(val);
                else if (val.files) {
                    if (0 !== $("#page-wrapper").find("#viewFileDiv").length && 1 === $("#page-wrapper").find("#viewFileDiv[fileId='']").length) {
                        var previewURL = Files.constructPreviewUrl("", "");
                        Files.setUrlIframeToViewFile(previewURL, "company", "pdf")
                    }
                } else
                    val.backup ? ZPBackup.handleWMSNotify(val) : val.onboarding ? ZPOnboarding.esignurl(val, void 0, void 0) : "UnreadDiscussionCount" == val ? lmsmessages.unreadCount() : val.hasOwnProperty("recruit") && "admin-integration-zohoservices" === Layout.Page.pageId ? val.recruit ? allServicesInteg.getAllservicesInfo() : ZPeople.confirm(null, ZPI18N.getString("zp.recruit"), val.message, null, !0, !0, ZPI18N.getString("zp.ok")) : "survey" === val.module ? ZPEnpsAPI.handleWMSNotify(val) : "lmsFeedback" === val.module ? "addRecord" === val.mode ? lmsfeedback_survey_integration.onTemplateAdded(val.LMSFEEDBACK) : "editRecord" === val.mode && lmsfeedback_survey_integration.onTemplateEdited(val.LMSFEEDBACK) : val.onboardingcourse && ZPOnboarding.updateOnbCourseStatus(val);
                "Assessment" == val.moduleName && ZPAssessAPI.receiveWMSData(val)
            }
        }
        ,
        Collaboration.getPageTitle = function() {
            return ZPeople.TITLE
        }
        ,
        Collaboration.handleServiceMessage = function(msgObj) {
            null !== msgObj && "" !== msgObj && void 0 !== msgObj.msg && "refresh" == msgObj.msg && $("#wrapper").after('<div class="Apos ZPApos zp_RefBnd" id="refbanner"> <div  class="alert ZP-info fade"  style="display: block;">' + ZPI18N.getString("zp.refmsg") + '<button class="btn_lined btn_lined-cls" onclick="location.reload();">' + ZPI18N.getString("zp.refresh") + '</button><i class="IC-ar-top ML10 ZPBcls" onclick="ZPeople.refBannerRemove()"></i></div></div>')
        }
        ,
        Collaboration.serverup = function() {
            if (Attendance.isInitialLoad)
                Attendance.isInitialLoad = !1;
            else {
                var ulrMode = Layout.Page.urlmode;
                if (null != ulrMode && -1 !== ulrMode.indexOf("attendance_entry") && null === Attendance.Entry.erecno && (Attendance.Entry.loadToday = !1,
                Attendance.Entry.getList("week", 0)),
                Attendance.Dashboard) {
                    var pageId = $(Attendance.Dashboard.pageLayout());
                    pageId.find('[name="ATTENDANCE"]')[0] && pageId.find('[name="ATTENDANCE"] #ZPAtt_Dash_CurrDate')[0] && Attendance.Dashboard.WeeklyData.getCurWeekData(),
                    pageId.find("#ZPD_Top_Att_Stat")[0] && Attendance.Dashboard.CurrStatus.getCurrDayStatus()
                }
            }
        }
        )
    }
},
ZPAppConstants = {
    customize: "admin/formslayout/formedit",
    permissions: "admin/accesscontrol/permissions",
    approvals: "admin/automation/approval",
    automation: "admin/automation/workflow/list"
},
ZPeople.modalPopupTemplate = '<div class="modal $CLASSNAME$" id="$PURPOSE$" role="dialog"><div class="modal-dialog $MODALDRAG$"><div class="modal-content"><div class="modal-header"><a class="close IC-cls-1px red" data-dismiss="modal" buttonaction="dismiss" ></a><h6 class="modal-title">$TITLE$</h6></div><div class="modal-body" id="bodyTag"></div><div class="modal-footer"><a class="btn btn-primary" buttonname="done" >' + ZPI18N.getString("zp.done") + '</a><a class="btn btn-default" data-dismiss="modal" buttonaction="dismiss">' + ZPI18N.getString("zp.cancel") + "</a></div></div></div>",
ZPeople.createModalPopup = function(purpose, title, classname, params) {
    var popupDiv = Layout.Page.container.find("#" + purpose);
    return Layout.Page.container.find("#" + purpose).length <= 0 ? (popupDiv = (popupDiv = ZPeople.modalPopupTemplate).replace(/\$PURPOSE\$/g, purpose),
    popupDiv = (popupDiv = (popupDiv = classname.indexOf("popRgtModel") > -1 || classname.indexOf("PopMdModel") > -1 ? popupDiv.replace(/\$MODALDRAG\$/g, "") : popupDiv.replace(/\$MODALDRAG\$/g, "ModalDrag")).replace(/\$CLASSNAME\$/g, classname)).replace(/\$TITLE\$/g, title),
    popupDiv = $(popupDiv),
    Layout.Page.container.append(popupDiv),
    "rule" != purpose && "dvaddform" != purpose && popupDiv.find(".ModalDrag").draggable({
        handle: popupDiv.find(".modal-header")
    })) : $(popupDiv).find("h6").html(title),
    popupDiv.on("hidden.bs.modal", function() {
        $(this).find("[buttonname=done]").hasClass("disabled") || void 0 == params || ZPeople.popupCancel(params[0], params[1])
    }),
    errorFunction.removeErrorSpan(popupDiv),
    popupDiv.find("[buttonname=done]").removeClass("disabled"),
    Layout.Page.container.find(popupDiv).find("#tabularSec").hide(),
    Layout.Page.container.find(popupDiv).find("input").not("[type=radio]").val(""),
    Layout.Page.container.find(popupDiv).find("textarea").val(""),
    Layout.Page.container.find(popupDiv).find("input[type=radio][value=1]").prop("checked", !0),
    popupDiv.modal({
        backdrop: "static",
        keyboard: !1
    }),
    Layout.Page.container.find(popupDiv).find("input").first().trigger("select"),
    popupDiv
}
,
ZPeople.popupCancel = function(isGrid, fcType) {
    if (isGrid) {
        var findSelect = Layout.Page.container.find("#addfldsec:visible select option:selected[value=" + fcType + "]")
          , parentLi = $(findSelect).parents("li");
        $(findSelect).parents("#addfldsec").remove(),
        formCustom.tabularCss(parentLi),
        formCustom.emptySectionCheck()
    } else
        Layout.Page.container.find("#formContentDiv [name=adding" + fcType + "]").first().remove();
    fcType == fieldType.FORMULA && Layout.Page.container.find("#fieldProperties [keyname=formula]").trigger("blur")
}
;
var errorFunction = {
    errorSpanAttach: function(data, obj, noterror, errClass, isHtml) {
        var classname = noterror ? "grn" : "dverrormsg";
        classname = errClass ? "zp-err-msg" : classname;
        var errorSpan = "";
        errorSpan = isHtml ? jQuery("<span />", {
            class: classname,
            name: "errorSpan"
        }).html(data) : jQuery("<span />", {
            class: classname,
            name: "errorSpan",
            text: data
        }),
        $(obj).append(errorSpan),
        noterror || ("cantbeempty" != $(obj).attr("errorDiv") && (obj = $(obj).parents("[errorDiv=cantbeempty]")),
        errClass ? $(obj).addClass("zp-err") : $(obj).addClass("has-error"))
    },
    removeErrorSpan: function(obj, isTab, errClass) {
        obj = errClass ? $(obj).find("[errorDiv=cantbeempty]").not(isTab).removeClass("zp-err") : $(obj).find("[errorDiv=cantbeempty]").not(isTab).removeClass("has-error"),
        $(obj).find("[name=errorSpan]").remove()
    }
}
  , ZPServices = {
    TAB_ICONS: {
        org: "ORG",
        comp: "COMP",
        travel: "TRAVEL",
        mail: "MAIL",
        vacation: "VC",
        helpdesk: "DESK",
        tag: "TAG",
        wallet: "WT",
        case: "CASE",
        transport: "TRANS",
        calendar: "CALEN",
        alarm: "TA",
        hourglass: "HOUR",
        medical: "MEDI",
        form: "FRM",
        checklist: "CHECK",
        awards: "AWARD",
        cart: "CART",
        celebration: "CELEB",
        trophy: "TROPHY",
        storage: "STORE",
        food: "FOOD",
        connect: "CONT",
        baggage: "BAG",
        security: "SECU",
        complaince: "COMPL",
        printer: "PRINT",
        employee: "USER",
        reports: "CHART",
        settings: "SETT",
        chat: "CHAT",
        cloud: "CLOUD",
        files: "FILES",
        flag: "FLAG",
        graduate: "TRG",
        video: "VD",
        calculator: "CALC",
        training: "TEACH",
        announce: "ANNO",
        location: "LOC",
        empsearch: "FND",
        in: "IN",
        out: "OUT",
        download: "DWN",
        emprelation: "EMPR",
        search: "SEARCH",
        empdb: "ED",
        idea: "IDEA",
        help: "HLP",
        asset: "ASSET",
        star: "FAV",
        attendance: "AD",
        holiday: "HOLI",
        timetracker: "",
        leavetracker: "L"
    },
    selectTab: function(mainTabName) {
        return mainTabName = mainTabName.toLowerCase(),
        $("#zp_maintabs").find('[tabname="' + mainTabName + '"]').trigger("click"),
        0 == $("#zp_maintabs").find('[tabname="' + mainTabName + '"]').length && ($("#zp_maintab_more").trigger("click"),
        $("#zp_maintab_more").find("#zp_tabmore").find('[tabname="' + mainTabName + '"]').trigger("click")),
        mainTabName
    },
    getObjectFormArray: function(array, keyId, keyValue, isCaseInsensitive, isNeededIndex) {
        if (array && array.length > 0)
            for (var i = 0; i < array.length; i++) {
                var singleObj = array[i];
                if (!ZPUtil.Validation.isEmpty(keyValue) && (singleObj[keyId] === keyValue || isCaseInsensitive && singleObj[keyId].toLowerCase() === keyValue.toLowerCase()))
                    return isNeededIndex && (singleObj.index = i),
                    singleObj
            }
    },
    setNewMainTabJSON: function(service) {
        var formsJSON = []
          , serviceName = service.tabName.toLowerCase()
          , tabJSON = {
            subtabs: [],
            name: service.tabName,
            disName: service.dispName
        };
        if (service.forms.length > 0 && ($.each(service.forms, function(index, form) {
            form.isActive && formsJSON.push({
                pcId: form.pcId,
                displayName: form.dispName,
                tabURL: ZPServices.getViewFormUrl(serviceName, form.pcId, form.viewId)
            })
        }),
        tabJSON.subtabs.splice(0, 0, {
            isDiretTabs: !0,
            tabName: "",
            displayName: ZPI18N.getString("zp.forms"),
            tabId: service.id,
            formArr: formsJSON
        }, {
            displayName: ZPI18N.getString("zp.analytics"),
            tabURL: serviceName + "/analytics/list"
        }),
        ZPServices.ISTASKTABACTIVE && tabJSON.subtabs.splice(1, 0, {
            displayName: ZPI18N.getString("zp.tasks"),
            tabURL: serviceName + "/alltask"
        }),
        service.isApprovalEnabled)) {
            var apprSubTab = {
                displayName: ZPI18N.getString("zp.approvals"),
                tabURL: serviceName + "/approvals/myapproval"
            };
            tabJSON.subtabs.splice(1, 0, apprSubTab)
        }
        isadmin && (tabJSON.subtabs.length > 0 && tabJSON.subtabs[0].formArr.length < 1 ? tabJSON.subtabs.splice(0, tabJSON.subtabs.length, {
            displayName: ZPI18N.getString("zp.settings"),
            tabURL: serviceName + "/generalsettings"
        }) : tabJSON.subtabs.push({
            displayName: ZPI18N.getString("zp.settings"),
            tabURL: serviceName + "/generalsettings"
        }));
        var indexToPush = ZPTabs.TAB_JSON.length;
        return $("#zp_maintabs").find("[tabname=admin]").length > 0 && (indexToPush = ZPTabs.TAB_JSON.length - 1),
        ZPTabs.TAB_JSON.splice(indexToPush, 0, tabJSON),
        tabJSON
    }
};
window.onZDLibraryReady = function() {
    ZPZohoOne.onloadChanges()
}
;
var ZPZohoOne = new function() {
    this.onloadChanges = function() {
        ZPZohoOne.initLauncherOnElementExist(ZPZohoOneHomePage.initLauncher)
    }
    ,
    this.initLauncherOnElementExist = function(callBackFunc) {
        void 0 === document.getElementsByClassName("zp-onelauncher")[0] ? setTimeout(ZPZohoOne.onloadChanges, 50) : callBackFunc.apply()
    }
}
  , ZPZohoOneHomePage = new function() {
    this.initLauncher = function() {
        ZDLibrary.Launcher.init({
            icon: {
                element: document.getElementsByClassName("zp-onelauncher")[0],
                is_product_icon_available: !1,
                is_hamburger_available: !1
            },
            menuBar: document.getElementsByClassName("navbar navbar-fixed-top")[0],
            csrfName: "conreqcsr",
            getCsrfValue: function() {
                return csrfToken
            }
        })
    }
}
;
CustomSelect = {
    Orgstruct: {
        OPTIONS: {},
        LIMIT: 200,
        ALL_OPTIONS: {},
        ALL_OPT_SELETED_NODES: {},
        Parent: {
            locid: ["department"],
            department: ["division"],
            division: ["unit"],
            unit: ["entity"]
        },
        Child: {
            entity: ["unit"],
            unit: ["division"],
            division: ["department"]
        },
        getKeyParams: function(name, params, ele) {
            var key = "";
            if (CustomSelect.Orgstruct.Parent[name]) {
                name = CustomSelect.Orgstruct.Parent[name];
                var parele = ele.find('[name="' + name + '"]');
                void 0 != parele.val() && "-1" != parele.val() && 0 != parele.val().length && (params[name] = parele.val().split(",")),
                params[name] && (key = JSON.stringify(params[name]),
                params[name] = key),
                key += CustomSelect.Orgstruct.getKeyParams(name, params, ele)
            }
            return key
        },
        pushnode: function(name, id, val) {
            CustomSelect.Orgstruct.ALL_OPTIONS[name] || (CustomSelect.Orgstruct.ALL_OPTIONS[name] = {}),
            CustomSelect.Orgstruct.ALL_OPTIONS[name][id] = val
        },
        getSelect2Properties: function(prop) {
            return {
                formatNoMatches: function() {
                    return ZPI18N.getString("zp.nomatchesfound")
                },
                formatSearching: function() {
                    return ZPI18N.getString("zp.searching")
                },
                multiple: prop && prop.multiple,
                placeholder: void 0 == prop || void 0 == prop.placeholder ? "" : prop.placeholder,
                query: function(query) {
                    var results = []
                      , term = query.term
                      , name = $(query.element).attr("name")
                      , params = {};
                    CustomSelect.Orgstruct.ALL_OPTIONS[name] || (CustomSelect.Orgstruct.ALL_OPTIONS[name] = {}),
                    key = name + CustomSelect.Orgstruct.getKeyParams(name, params, $(query.element).closest('[name="orgfilter"]')),
                    1 == query.page && prop.defSelect && "" == term && results.push({
                        id: prop.defSelect,
                        text: prop.defSelectText ? prop.defSelectText : "All"
                    });
                    if (CustomSelect.Orgstruct.OPTIONS[key] && CustomSelect.Orgstruct.OPTIONS[key][term] && CustomSelect.Orgstruct.OPTIONS[key][term].length > 0 && CustomSelect.Orgstruct.OPTIONS[key][term].length > (query.page - 1) * CustomSelect.Orgstruct.LIMIT) {
                        for (i = (query.page - 1) * CustomSelect.Orgstruct.LIMIT; i < query.page * CustomSelect.Orgstruct.LIMIT && i < CustomSelect.Orgstruct.OPTIONS[key][term].length; i++)
                            CustomSelect.Orgstruct.OPTIONS[key][term][i].id != prop.defSelect && results.push(CustomSelect.Orgstruct.OPTIONS[key][term][i]);
                        !1,
                        1 == query.page && "" == term && prop && prop.initseljson && -1 == Timetracker.projects.Operations.findJSONArrayIndex(results, prop.initseljson.id, "id") && results.push(prop.initseljson),
                        query.callback({
                            results: results,
                            more: results.length >= CustomSelect.Orgstruct.LIMIT
                        })
                    } else
                        results = CustomSelect.Orgstruct.getOptions(name, term, query.page, key, !1, query.callback, prop, params)
                },
                initSelection: function(element, callback) {
                    var results = [];
                    results.push({
                        id: prop.defSelect,
                        text: prop.defSelectText ? prop.defSelectText : "All"
                    });
                    var name = element.attr("name");
                    CustomSelect.Orgstruct.ALL_OPTIONS[name] || (CustomSelect.Orgstruct.ALL_OPTIONS[name] = {}),
                    key = CustomSelect.Orgstruct.getKeyParams(name, {}, element.closest("orgfilter")),
                    prop && prop.initseljson ? result = prop.initseljson : "" != element.val() && (results = [],
                    element.val() == prop.defSelect ? results.push({
                        id: prop.defSelect,
                        text: prop.defSelectText ? prop.defSelectText : "All"
                    }) : $(element.val().split(",")).each(function() {
                        results.push({
                            id: this,
                            text: ZPeople.decodeTxt(CustomSelect.Orgstruct.ALL_OPTIONS[name][this])
                        })
                    })),
                    prop.multiple ? callback(results) : callback(results[0])
                }
            }
        },
        getOptions: function(name, term, page, key, id, successcallback, prop, params) {
            params.mode = "fetchOrgStructureLookupOptions",
            params.name = name,
            params.searchtxt = term,
            params.startInd = (page - 1) * CustomSelect.Orgstruct.LIMIT + 1,
            params.conreqcsr = csrfToken,
            params.isPermBasedListNotNeeded = !0,
            url = "formAction.zp";
            var results = [];
            return 1 == page && prop.defSelect && "" == term && results.push({
                id: prop.defSelect,
                text: prop.defSelectText ? prop.defSelectText : "All"
            }),
            $.ajax({
                type: "POST",
                async: !0,
                url: url,
                data: params,
                success: function(data) {
                    CustomSelect.Orgstruct.OPTIONS[key] || (CustomSelect.Orgstruct.OPTIONS[key] = {}),
                    CustomSelect.Orgstruct.OPTIONS[key][term] || (CustomSelect.Orgstruct.OPTIONS[key][term] = []),
                    data.code == zpconst.ResponseCodes.API_ERR_NO_ERROR && data.message && data.message && $.each(data.message, function(ind, val) {
                        prop.defSelect != val.Id && results.push({
                            id: val.Id,
                            text: ZPeople.decodeTxt(val.Value)
                        }),
                        CustomSelect.Orgstruct.ALL_OPTIONS[name][val.Id] = val.Value,
                        id && "" != id || CustomSelect.Orgstruct.OPTIONS[key][term].push({
                            id: val.Id,
                            text: ZPeople.decodeTxt(val.Value)
                        })
                    }),
                    id && "" != id ? successcallback({
                        id: id,
                        text: ZPeople.decodeTxt(CustomSelect.Orgstruct.ALL_OPTIONS[name][id])
                    }) : (1 == page && "" == term && prop && prop.initseljson && (index = Timetracker.projects.Operations.findJSONArrayIndex(results, prop.initseljson.id, "id"),
                    -1 == index && results.push(prop.initseljson)),
                    successcallback({
                        results: results,
                        more: results.length >= CustomSelect.Orgstruct.LIMIT
                    }))
                }
            }),
            results
        },
        clearSelection: function(ele) {
            var currele = $(ele.target)
              , name = currele.attr("name");
            (name = CustomSelect.Orgstruct.Child[name]) && (currele.closest('[name="orgfilter"]').find('[name="' + name + '"]').val(-1),
            currele.closest('[name="orgfilter"]').find('[name="' + name + '"]').trigger("change"))
        },
        setValueByAll: function(ele) {
            var currele = $(ele)
              , values = currele.val().split(",")
              , name = (currele.closest("div[id^='role_criteria_']"),
            initName = currele.attr("name"))
              , isSelect = CustomSelect.Orgstruct.isSelectKeyorNot(!0, name, currele);
            for (isSelect || currele.closest('[name="orgfilter"]').find("#empty_error_msg").remove(); name; )
                if (name = CustomSelect.Orgstruct.Child[name]) {
                    currele.closest('[name="orgfilter"]').find('[name="' + name + '"]').attr("isdiabledRole") || (values.length > 1 ? currele.closest('[name="orgfilter"]').find('[name="' + name + '"]').attr("disabled", "disabled") : currele.closest('[name="orgfilter"]').find('[name="' + name + '"]').prop("disabled", !1)),
                    currele.closest('[name="orgfilter"]').find('[name="' + name + '"]').select2("destroy");
                    var key = OrgStructureRoles.NODE_INPUT_SELECT_ALL_KEYS[name];
                    currele.closest('[name="orgfilter"]').find('[name="' + name + '"]').attr("isselectall", isselectall),
                    currele.closest('[name="orgfilter"]').find('[name="' + name + '"]').val(-1),
                    currele.closest('[name="orgfilter"]').find('[name="' + name + '"]').select2(CustomSelect.Orgstruct.getSelect2Properties({
                        multiple: !0,
                        defSelect: -1,
                        defSelectText: key,
                        placeholder: key
                    }))
                }
            for (name = initName; name; )
                if (name = CustomSelect.Orgstruct.Parent[name]) {
                    var parentVal = currele.closest('[name="orgfilter"]').find('[name="' + name + '"]').val();
                    if (void 0 == parentVal || -1 == parentVal || "" == parentVal || parentVal.length <= 0) {
                        currele.closest('[name="orgfilter"]').find('[name="' + name + '"]').select2("destroy");
                        key = OrgStructureRoles.NODE_INPUT_SELECT_ALL_KEYS[name];
                        var isselectall = "true";
                        isSelect && (key = OrgStructureRoles.NODE_INPUT_SELECT_KEYS[name],
                        isselectall = "false"),
                        currele.closest('[name="orgfilter"]').find('[name="' + name + '"]').attr("isselectall", isselectall),
                        currele.closest('[name="orgfilter"]').find('[name="' + name + '"]').val(-1),
                        currele.closest('[name="orgfilter"]').find('[name="' + name + '"]').select2(CustomSelect.Orgstruct.getSelect2Properties({
                            multiple: !0,
                            defSelect: -1,
                            defSelectText: key,
                            placeholder: key
                        }))
                    }
                }
            var locId = currele.closest('[name="orgfilter"]').find('[name="locid"]').val();
            if (void 0 == locId || -1 == locId || "" == locId || locId.length <= 0) {
                key = OrgStructureRoles.NODE_INPUT_SELECT_ALL_KEYS.locid;
                isSelect && (key = OrgStructureRoles.NODE_INPUT_SELECT_KEYS.locid),
                OrgStructureRoles.isAllOptNeedForLoc ? currele.closest('[name="orgfilter"]').find('[name="locid"]').select2(CustomSelect.Orgstruct.getSelect2Properties({
                    multiple: !0,
                    defSelect: "-1",
                    defSelectText: "All",
                    placeholder: key
                })) : currele.closest('[name="orgfilter"]').find('[name="locid"]').select2(CustomSelect.Orgstruct.getSelect2Properties({
                    multiple: !0,
                    defSelect: "",
                    defSelectText: "",
                    placeholder: key
                }))
            }
            var selectallcount = currele.closest('[name="orgfilter"]').find("[isselectall='true']").length;
            if (isSelect && selectallcount > 0) {
                currele.closest('[name="orgfilter"]').find("#empty_error_msg").remove(),
                currele.closest('[name="orgfilter"]').prepend('<span id="empty_error_msg" class="DB CL text-center S15 MB10 red">Please select any one applicable component.</span>')
            }
        },
        isSelectKeyorNot: function(isSelect, name, currele) {
            var val;
            return isSelect && name ? (void 0 != (val = currele.closest('[name="orgfilter"]').find('[name="' + name + '"]').val()) && -1 != val && "" != val && val.length > 0 && (isSelect = !1),
            CustomSelect.Orgstruct.isSelectKeyorNot(isSelect, CustomSelect.Orgstruct.Parent[name], currele)) : (name || void 0 != (val = currele.closest('[name="orgfilter"]').find('[name="locid"]').val()) && -1 != val && "" != val && val.length > 0 && (isSelect = !1),
            isSelect)
        }
    }
},
ZPeople.sendIAMConfirmation = function() {
    if (ZPeople.ISUNCONFIRMEDACC) {
        var params = {
            method: "sendConfirmationFromAccounts",
            conreqcsr: csrfToken
        };
        $.post("sendConfirmationMail.zp", params, function(returnedData) {
            "none" == $("#welcomebanner").css("display") && $("div#wrapper").removeClass("tban"),
            void 0 != returnedData.accountStatus && "confirmed" == returnedData.accountStatus ? (ZPeople.ISUNCONFIRMEDACC = !1,
            ZPeople.Message.showSuccessMsg(ZPI18N.getString("zp.alreadyVerifiedMsg")),
            $("div#wrapper").hasClass("tbanExp") && $("div#wrapper").removeClass("tbanExp"),
            $("div#accountsMsgBanner").addClass("hide")) : ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.verificationsuccessmail"))
        }).fail(function() {
            ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.domainiserror", [ZPeople.peopleSupportEmail]))
        })
    } else
        ZPeople.Message.showSuccessMsg(ZPI18N.getString("zp.alreadyVerifiedMsg")),
        $("div#wrapper").hasClass("tbanExp") && $("div#wrapper").removeClass("tbanExp"),
        $("div#accountsMsgBanner").addClass("hide")
}
,
ZPeople.showErrorMessageForUnconfirmedAcc = function() {
    ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.shorttextunconfirmed", ["ZPeople.sendIAMConfirmation()"]))
}
,
ZPeople.deleteSampleData = function() {
    if (0 == $("#sampleDataModal").length) {
        var html = '<div class="modal fade" id="sampleDataModal" role="dialog" aria-hidden="false"><div class="modal-dialog"><div class="modal-content"><div class="modal-header">';
        html += '<a type="button" class="close IC-cls-1px red" data-dismiss="modal"></a><h6 class="modal-title ZPbold S16">' + ZPI18N.getString("zp.sampledatadeletion") + "</h6></div>",
        html += '<div class="modal-body"><div class="emp_status_tbl"><div class="GryBG panel-heading"><h6 class="S14 text-justify">' + ZPI18N.getString("zp.sampledatadeldescription") + ' <a target="_blank" href="//www.zoho.com/people/help/adminguide/gettingstarted/sampledata.html">' + ZPI18N.getString("zp.clicktoknowmore") + "</a></h6></div>",
        html += '<div class="dvtabsfrm clearfix"><table id="sampleDataTable" class="table table-hover emp_tblprimary"><tbody></tbody></table></div></div></div>',
        html += '<div class="modal-footer"><a id="deleteSampleData" class="btn btn-danger">' + ZPI18N.getString("zp.deletesampledata") + '</a><a class="btn btn-default" data-dismiss="modal">' + ZPI18N.getString("zp.close") + "</a></div>",
        html += "</div></div></div>",
        $("body").append(html)
    }
    $("#sampleDataTable tbody").html(ZPeople.LOADING_HTML),
    $("#sampleDataModal").modal();
    ZPeople.Request.send("/orgOnboarding.ob", {
        mode: "sampledatadetails"
    }, function(response) {
        var body = "";
        $.each(Object.keys(response), function(index, key) {
            body += "<tr>",
            body += '<td width="500"><span>' + key + '</span></td><td width="500"> <div class="radio DIB MR10"><input name="' + response[key].formId + '" type="radio" value="true" checked><label onclick="$(this).siblings().trigger("click")">Delete data</label></div><div class="radio DIB"><input name="' + response[key].formId + '" type="radio" value="false"><label onclick="$(this).siblings().trigger("click")">Retain data</label></div></td></tr>'
        }),
        $("#sampleDataTable tbody").html(body),
        $("#deleteSampleData").off().on("click", function() {
            $("#sampleDataModal").modal("hide");
            var params = {
                mode: "deletesampledatascheduler"
            }
              , modules = {};
            $.each($("#sampleDataTable tbody input:checked"), function(index, row) {
                modules[$(row).attr("name")] = $(row).val()
            }),
            params.modules = JSON.stringify(modules),
            $("[name=sampledatasettingsdiv]").addClass("hide"),
            ZPeople.Request.send("/orgOnboarding.ob", params, function(response) {
                response.message == ZPI18N.getString("zp.sampledatanotdelete", [ZPeople.peopleSupportEmail]) ? (ZPeople.Message.showFailureMsg(response.message),
                $("[name=sampledatasettingsdiv]").removeClass("hide")) : (ZPeople.Message.fadeMessage(),
                ZPeople.confirm(null, "", response.message, function() {
                    window.location.reload()
                }, !0, !0, ZPI18N.getString("zp.ok")))
            }, !1, !0)
        })
    })
}
,
ZPeople.select2 = {
    escapeMarkup: function(text) {
        return text
    },
    formatResult: function(opt) {
        return opt.html
    },
    formatSelection: function(opt) {
        return opt.selhtml ? opt.selhtml : opt.html
    }
},
ZPeople.ContactSupport = {
    CXBasedSupport: {
        714921085: "https://globalization-partners.zendesk.com/hc/en-us",
        746603108: "https://globalization-partners.zendesk.com/hc/en-us"
    },
    openPopUp: function() {
        if (void 0 !== ZPeople.ContactSupport.CXBasedSupport[_LOGGEDIN_ZSOID])
            window.open(ZPeople.ContactSupport.CXBasedSupport[_LOGGEDIN_ZSOID]).opener = null;
        else if ($("#zp_user_information").hasClass("in") && ($("#zp_user_information").removeClass("in"),
        $("#logoutbackdrop").remove()),
        0 == $("#contsupportCont").length) {
            var outerHtml = '<div class="zp_spPp" id="contsupportCont"><div class="zp_spIn"><div class="zp_spHdr"><h3>' + ZPI18N.getString("zp.contactsupport") + '</h3><i class="IC-cls" onclick="ZPeople.ContactSupport.cancelForm();"></i></div>';
            outerHtml += '<div class="zp_spBdy"><div class="zp_wUr"><div class="zp_wImg"> <img src="' + ZPeople.CURR_USER.thumb + '" alt=""></div><h4>' + ZPeople.CURR_USER.name + "</h4> <p>" + ZPI18N.getString("zp.whatcanhelp") + "</p> </div>",
            outerHtml += '<div class="zp_frms"><ul class="zp_frNv" id="tabs"><li class="sel" type=1><a href="javascript:;">' + ZPI18N.getString("zp.generalquestion") + '</a></li><li type=2><a href="javascript:;">' + ZPI18N.getString("zp.bugreport") + "</a></li>" + (isadmin ? '<li type=3 class="DNI"><a href="javascript:;">' + ZPI18N.getString("zp.newfeaturereport") + "</a></li>" : "") + "</ul>",
            outerHtml += '<div class="zp_gnQs" id="bodyCont">',
            outerHtml += '<div class="zp_spBtn" type=1><button class="bl" id="supsendbtn">' + ZPI18N.getString("zp.send") + '</button> <button id="supcancelbtn">' + ZPI18N.getString("zp.cancel") + '</button> </div> <p id="zpspform_footerp">' + ZPI18N.getString("zp.complaintemail") + '</p> <ul class="zp_spBtm" id="zpspform_footerul"> <li> <p>' + ZPI18N.getString("zp.usa") + "</p> <span>+1 (888) 900 9646</span> </li> <li> <p>" + ZPI18N.getString("zp.uk") + "</p> <span>+44 (20) 35647890</span> </li> <li> <p>" + ZPI18N.getString("zp.au") + "</p> <span>+61-2-80662898</span> </li> <li> <p>" + ZPI18N.getString("zp.india") + "</p> <span>+91-44-67447000</span> </li> </ul>",
            outerHtml += "</div>",
            outerHtml += "</div>",
            (outerHtml = $(outerHtml)).find("#supsendbtn").on("click", function() {
                ZPeople.ContactSupport.submitForm()
            }),
            outerHtml.find("#supcancelbtn").on("click", function() {
                ZPeople.ContactSupport.cancelForm()
            }),
            outerHtml.find("#tabs").find("li").on("click", function() {
                ZPeople.ContactSupport.changeHtml($(this).attr("type"))
            }),
            $("#page-wrapper").append(outerHtml),
            ZPeople.ContactSupport.changeHtml(1)
        }
    },
    changeHtml: function(type) {
        var supportCont = $("#page-wrapper").find("#contsupportCont");
        supportCont.find("#tabs").children().removeClass("sel"),
        supportCont.find("#tabs").find("[type='" + type + "']").addClass("sel");
        var supCont = supportCont.find("#bodyCont");
        supCont.find(".zp_gnQins").remove(),
        3 == type ? (supportCont.find("#zpspform_footerul").addClass("DN"),
        supportCont.find("#zpspform_footerp").addClass("DN")) : (supportCont.find("#zpspform_footerul").removeClass("DN"),
        supportCont.find("#zpspform_footerp").removeClass("DN"));
        var bodyHtml = '<div class="zp_gnQins"><div class="zp_frm" id="field1">';
        1 == type ? bodyHtml += "<label>" + ZPI18N.getString("zp.askus") + '</label> <div><input type="text" placeholder="' + ZPI18N.getString("zp.howdoi") + '"></div>' : 2 == type ? bodyHtml += "<label>" + ZPI18N.getString("zp.where") + '</label> <div><input type="text"></div>' : 3 == type && (bodyHtml += "<p>" + ZPI18N.getString("zp.newfeaturecontent") + "</p>"),
        bodyHtml += '</div><div class="zp_frm" id="field2">',
        1 == type || 2 == type ? bodyHtml += "<label>" + ZPI18N.getString("zp.ijustfoundabug") + "</label> <div><textarea></textarea></div>" : 3 == type && (bodyHtml += "<label>" + ZPI18N.getString("zp.tellus") + '</label> <div><input type="text"></div>'),
        bodyHtml += '</div><div class="zp_frm" id="field3">',
        bodyHtml += 1 == type || 2 == type ? "<label>" + ZPI18N.getString("zp.whaturgent") + '</label><div> <select name="" id=""><option value="2">' + ZPI18N.getString("zp.nothingurgent") + '</option> <option value="3">' + ZPI18N.getString("zp.imstuck") + '</option> <option value="4">' + ZPI18N.getString("zp.supportemergency") + "</option>  </select> </div>" : "<label>" + ZPI18N.getString("zp.decribeurfeature") + "</label> <div> <textarea></textarea> </div>",
        bodyHtml += '</div><div class="zp_frm" id="field4">',
        bodyHtml += "<label>" + ZPI18N.getString("zp.attachascreenshot") + '</label><div class="zp_brSe"><button id="zp_spattch" onclick="ZPeople.ContactSupport.createFileTag(this);">' + ZPI18N.getString("zp.browse") + '</button> <span id="filename"></span> </div> ',
        bodyHtml += "</div>",
        bodyHtml += '<div class="zp_nFo"><p>' + ZPI18N.getString("zp.fdbcknotes", [ZPeople.isChinaSetup ? "https://www.zoho.com.cn/privacy.html" : "https://www.zoho.com/privacy.html"]) + "</div>",
        bodyHtml += "</div>",
        supCont.prepend(bodyHtml),
        supCont.find("select").select2(),
        supCont.find(".zp_spBtn").attr("type", type)
    },
    createFileTag: function(Obj) {
        0 == (Obj = $(Obj)).siblings("input[type='file']").length && Obj.parent().append($('<input type="file" name="bugFile" class="DNI">').on("change", function() {
            if ($(this)[0].files.length > 0) {
                var file = $(this)[0].files[0];
                if (file.size > 5242880)
                    return ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.feedfilesizewarning")),
                    !1;
                Obj.siblings("span#filename").text(file.name)
            }
        })),
        Obj.siblings("input[type='file']").trigger("click")
    },
    submitForm: function() {
        var supportCont = $("#page-wrapper").find("#contsupportCont")
          , formCont = supportCont.find("#bodyCont")
          , type = parseInt(supportCont.find("#tabs").find(".sel").attr("type"));
        formCont.find(".error").removeClass("error");
        var params = {
            reqType: type
        }
          , subjectCont = formCont.find("#field1").find("input");
        3 == type && (subjectCont = formCont.find("#field2").find("input"));
        var sub = subjectCont.val();
        if (ZPUtil.Validation.isEmpty(sub))
            return subjectCont.trigger("focus"),
            subjectCont.parent("div").addClass("error"),
            !1;
        if (sub.length > 500)
            return subjectCont.trigger("focus"),
            ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.lengthwarning", [ZPI18N.getString("zp.subject"), 500])),
            !1;
        params.subject = sub;
        var textCont = formCont.find("#field2").find("textarea");
        3 == type && (textCont = formCont.find("#field3").find("textarea"));
        var description = textCont.val();
        if (ZPUtil.Validation.isEmpty(description))
            return textCont.trigger("focus"),
            textCont.parent("div").addClass("error"),
            !1;
        if (description.length > 2e3)
            return textCont.trigger("focus"),
            ZPeople.Message.showWarningMsg(ZPI18N.getString("zp.lengthwarning", [ZPI18N.getString("zp.description"), 2e3])),
            !1;
        if (params.text = description,
        3 != type) {
            var selCont = formCont.find("#field3").find("select");
            params.statusType = parseInt(selCont.val())
        }
        var fileCont = formCont.find("#field4").find("input[type='file']");
        void 0 !== fileCont[0] && fileCont[0].files.length > 0 ? ($("body").append($('<form enctype="multipart/form-data" action="/FeedbackForm.zp" target="zp_supportwindow" id="zp_fdbackform" method="post" style="display: none;"><input type="hidden" name="conreqcsr" id="csrfno" value="' + csrfToken + '"/><input type="hidden" name="subject" value="' + params.subject + '"/><input type="hidden" name="text" value="' + params.text + '"/><input type="hidden" name="reqType"  value="' + params.reqType + '"/>' + (3 != type ? '<input type="hidden" name="statusType"  value="' + params.statusType + '"/>' : "") + '<iframe id="zp_supportwindow" name="zp_supportwindow" style="display:none;" ></iframe>')),
        $("#zp_fdbackform").append(fileCont),
        $("#zp_fdbackform").trigger("submit")) : ZPeople.Request.send("/FeedbackForm.zp", params, ZPeople.ContactSupport.showMessage)
    },
    showMessage: function(data, param) {
        var msg = ZPI18N.getString("zp.requestraisedsuccess");
        "string" == typeof data && (data = JSON.parse(data));
        var type = data.type ? data.type : param.reqType;
        data.error && (msg = ZPI18N.getString("zp.unabletoprocess")),
        ZPeople.ContactSupport.changeHtml(type),
        $("#zp_fdbackform").remove(),
        $("#zp_supportwindow").remove(),
        ZPeople.Message.showSuccessMsg(msg)
    },
    cancelForm: function() {
        $("#page-wrapper").find("#contsupportCont").fadeOut(200, function() {
            $("#page-wrapper").find("#contsupportCont").remove()
        })
    }
},
ZPeople.UnifiedUI = {
    init: function(key) {
        CrmPlusImpl.isInit || CrmPlusImpl.init()
    },
    trigger: function(key) {
        "undefined" != typeof CrmPlusImpl && (ZPeople.UnifiedUI.init(),
        "setupView.onbeforeload" === key ? CrmPlusImpl.setup.triggerBeforeLoad() : "setupView.onafterload" === key ? CrmPlusImpl.setup.triggerAfterLoad() : CrmPlusImpl.trigger(key))
    },
    isAvailable: function() {
        return "undefined" != typeof CrmPlusImpl
    },
    isUnifiedUI: function() {
        return ZPeople.UnifiedUI.isAvailable() && CrmPlusImpl.isUnifiedUI
    },
    getZOFrameOriginUrl: function() {
        var zoFrameOriginUrl = "";
        return ZPeople.UnifiedUI.isUnifiedUI() && (zoFrameOriginUrl = CrmPlusImpl.getZOFrameOriginUrl()),
        zoFrameOriginUrl
    },
    showNotificationCount: function(count) {
        ZPeople.UnifiedUI.isUnifiedUI() && CrmPlusImpl.setNotificationCount(count)
    }
};
var ZPTabs = {
    URL: "../People/HashAction",
    URL_DATA: null,
    TAB_JSON: null,
    FORM_DETAILS_BY_FORMID: {},
    ICON_CLASS: {
        Home: "home-menu.svg",
        Organization: "user-menu.svg",
        Module: "ta-menu.svg",
        Form: "form-menu.svg",
        Performance: "pa-menu.svg",
        Admin: "setting-menu.svg",
        Task: "task-menu.svg",
        HRCase: "cases-menu.svg",
        Analytics: "report-menu.svg"
    },
    MAINTAB_CODE: null,
    ACTIVE_TABARR: [],
    getTabDetailsByKey: function(key) {
        var result = {};
        return 0 === key.indexOf("ann_") ? (result.name = ZPI18N.getString("zp.organization"),
        result.id = "zp_organization") : 0 === key.indexOf("tt_") ? (result.name = ZPI18N.getString("zp.captimetracker"),
        result.id = "zp_timetracker") : 0 === key.indexOf("lt_") ? (result.name = ZPI18N.getString("zp.capleavetracker"),
        result.id = "zp_leavetracker") : 0 === key.indexOf("att_") ? (result.name = ZPI18N.getString("zp.attendance"),
        result.id = "zp_attendance") : 0 === key.indexOf("file_") ? (result.name = ZPI18N.getString("zp.files"),
        result.id = "zp_files") : 0 === key.indexOf("pa_") && (result.name = ZPI18N.getString("zp.performance"),
        result.id = "zp_performance"),
        result
    },
    removePinnedTabAndAddSubtab: function(data) {
        Layout.Page.container.find("[name=" + data.key + "]").remove(),
        null !== ZPTabs.URL_DATA && $.each(ZPTabs.URL_DATA.urlArr, function(i) {
            this[0] === data.key && ZPTabs.URL_DATA.urlArr.splice(i, 1)
        });
        var subtabs = ZPTabs.getSubTabs("home");
        void 0 !== subtabs && $.each(subtabs, function() {
            this.formArr.length > 0 && this.formArr.push({
                tabURL: data.tabURL,
                urlPrefix: "home",
                displayName: data.displayName
            })
        })
    },
    getSelectedTab: function(tName) {
        var conf = {};
        if (void 0 !== tName || void 0 != window.location.hash && 0 !== window.location.hash.indexOf("#admin/")) {
            0 !== (tName = void 0 === tName ? window.location.hash.substring(1, window.location.hash.length).split("/")[0] : tName).indexOf("employeeengagement-a") && 0 !== tName.indexOf("employeeengagement-c") || (tName = "employeeengagement");
            for (var ind = 0; ind < ZPTabs.TAB_JSON.length; ind++)
                if (ZPTabs.TAB_JSON[ind].name.toLowerCase() === tName) {
                    conf.tab = ZPTabs.TAB_JSON[ind],
                    conf.tname = tName;
                    break
                }
            if ("form" === tName) {
                var formId = void 0
                  , urls = window.location.hash.split(/-(.+)?/)
                  , params = (urls[0].slice(1, urls[0].length),
                urls[1].split("/"));
                if ($.each(params, function(index) {
                    var param = this.split(":");
                    param.length > 0 && "formId" === param[0] && (formId = param[1])
                }),
                void 0 !== formId)
                    for (ind = 0; ind < ZPTabs.TAB_JSON.length && void 0 === conf.tname; ind++)
                        if (void 0 !== ZPTabs.TAB_JSON[ind].subtabs && ZPTabs.TAB_JSON[ind].subtabs.length > 0)
                            for (var subCnt = 0; subCnt < ZPTabs.TAB_JSON[ind].subtabs.length; subCnt++)
                                if (ZPTabs.TAB_JSON[ind].subtabs[subCnt].pcId === formId) {
                                    conf.tab = ZPTabs.TAB_JSON[ind],
                                    conf.tname = ZPTabs.TAB_JSON[ind].disName;
                                    break
                                }
            }
        }
        return conf
    },
    updateParentTabUrl: function() {
        var name = this.currMainTab
          , maintab = $("#zp_maintabs").find("[tabname=" + name + "]")
          , tabUrl = Layout.Page.hash.split("#")[1];
        "admin" !== name && ($(maintab[0]).data("taburl", tabUrl),
        $(maintab[0]).off("click"),
        $(maintab[0]).on("click", function() {
            ZPTabs.changeTab(tabUrl)
        })),
        $("#zpeople_tabs").find("#zp_active_subtabs").find("li.active a").attr("href", Layout.Page.hash)
    },
    isTabHidden: function(name) {
        return ZPTabs.ACTIVE_TABARR.length > 0 && -1 === ZPTabs.ACTIVE_TABARR.indexOf(name)
    },
    construct: function(selTab) {
        var mainTabHtml = $("#zp_maintabs").empty();
        selTab = void 0 === selTab ? ZPTabs.getSelectedTab() : selTab,
        ZPTabs.ACTIVE_TABARR = [];
        for (var ind = 0; ind < ZPTabs.TAB_JSON.length; ind++)
            ZPTabs.TAB_JSON[ind].isHideByAd || ZPTabs.ACTIVE_TABARR.push(ZPTabs.TAB_JSON[ind].name.toLowerCase());
        for (ind = 0; ind < ZPTabs.TAB_JSON.length && ZPTabs.createMainTab(mainTabHtml, ZPTabs.TAB_JSON[ind], ind, selTab); ind++)
            ;
        if (0 == mainTabHtml.find("#zp_maintab_more").length && mainTabHtml.append('<li id="zp_maintab_more" data-toggle="dropdown" class="zp_more" onclick="ZPTabs.showMoreTab();"><i class="ZPMic ZPic-More"><i class="IC-More-01 path1"></i><i class="IC-More-02 path2"></i></i><span class="ZPmtxt">' + ZPI18N.getString("zp.more") + "</span></li>"),
        !isOldReports && (mainTabHtml.append($('<li id="zp_maintab_reports" class="ZPRprtsTb" tabname="reports" issystab="true" tab="true" title="Reports"><div class="PR"><i class="ZPMic ZPic-Rep"><i class="IC-Rep-01 path1"></i><i class="IC-Rep-02 path2"></i></i><span class="ZPmtxt">' + ZPI18N.getString("zp.reports") + "</span></div></li>").data({
            taburl: "reports/home"
        }).click(function() {
            ZPTabs.changeTab("reports/home"),
            $("body").addClass("ZPsbarMini"),
            $("#zp_main_subtabs").removeClass("in")
        })),
        void 0 != ZPTabs.ADMIN_TAB)) {
            var adminTab = ZPTabs.getAdminTab()
              , topLeftPanelHtml = $("div.zp_Nav-menu div.ZPHeadRgt ul.nav")
              , settingsIcon = topLeftPanelHtml.find("#zp_maintab_admin")
              , subtabs = ZPTabs.getSubTabs("admin", adminTab.isSysTab);
            ZPTabs.getMainTabUrl(subtabs, "admin");
            if (0 === settingsIcon.length) {
                var settingEle = ZP.create("li", {
                    id: "zp_maintab_admin"
                });
                $(settingEle).append('<a data-placement="bottom" title="' + adminTab.disName + '"><span><i class="IC-setting-l"></i</span></a>'),
                topLeftPanelHtml.find("#subscriptionLink").length > 0 ? topLeftPanelHtml.find("#subscriptionLink").parent("li").after(settingEle) : topLeftPanelHtml.prepend(settingEle),
                $(settingEle).data("subtabs", subtabs).click(function() {
                    ZPTabs.changeTab("admin")
                })
            }
        }
        if (void 0 != ZPTabs.ADMIN_TAB) {
            adminTab = ZPTabs.getAdminTab(),
            subtabs = ZPTabs.getSubTabs("admin", adminTab.isSysTab),
            ZPTabs.getMainTabUrl(subtabs, "admin");
            var showTab = isOldReports ? "" : "display: none;";
            mainTabHtml.append($('<li id="zp_maintab_admin" tabname="admin" class="ZPSetUp"  tab="true" style="' + showTab + '"><div id="zp_mt_admin">' + ZPTabs.getICONHtml("admin") + '<span class="ZPmtxt">' + adminTab.disName + "</span></div></li>").data("subtabs", subtabs).on("click", function() {
                ZPTabs.changeTab("admin")
            }))
        }
        mainTabHtml.append('<li id="zp_minimax_leftpanel" onclick="ZPeople.minmaxTab(false);" class="zp-expand ZPExpdView " data-placement="right" data-toggle="tooltip"><div class="zp-hmenu menu-anim"><span class="item"></span><span class="item"></span><span class="item"></span></div></li>'),
        ZPTabs.registerTabHoverEvents()
    },
    getAdminTab: function() {
        for (var adminTab = {}, i = 0; i < ZPTabs.TAB_JSON.length; i++)
            "Admin" === ZPTabs.TAB_JSON[i].name && (adminTab = ZPTabs.TAB_JSON[i]);
        return adminTab
    },
    registerTabHoverEvents: function(isMinMax, isSetHover) {
        "1" === ZPeople.USER_CUST_SETTINGS.USER_TAB_MINIMIZE || isSetHover ? ($("#zpeople_tabs").find("#zp_maintabs li[id!=zp_maintab_more][id!=zp_minimax_leftpanel], #zp_main_subtabs").mouseenter(function(event) {
            if ("zp_main_subtabs" === event.target.id || $(event.target).parents("#zp_main_subtabs").length > 0)
                $("#zp_main_subtabs").addClass("in");
            else {
                var mainTab = ZPTabs.currMainTab;
                $(this).attr("id") === "zp_maintab_" + mainTab ? "zp_minimax_leftpanel" != $(this).attr("id") && ("#admin" === Layout.Page.hash && "zp_maintab_admin" != $(this).attr("id") || "#admin" !== Layout.Page.hash && ("zp_maintab_admin" === $(this).attr("id") || "zp_maintab_admin" !== $(this).attr("id"))) ? !isSetHover && $("#zp_active_subtabs").attr("opened") === $(this).attr("tabname") || $("#zp_main_subtabs").hasClass("in") ? $("#zp_main_subtabs").removeClass("in").one("transitionend", function() {
                    void 0 == $("#container").highcharts() && void 0 == $("#container1").highcharts() && void 0 == $("#deptCount").highcharts() || ($("#container").highcharts().reflow(),
                    $("#container1").highcharts().reflow(),
                    $("#deptCount").highcharts().reflow())
                }) : ZPTabs.constructSubtabsBasedOnHash(!1, $(this).attr("tabname"), 1 != isSetHover, isMinMax) && $("#zp_main_subtabs").addClass("in").one("transitionend", function() {
                    void 0 == $("#container").highcharts() && void 0 == $("#container1").highcharts() && void 0 == $("#deptCount").highcharts() || ($("#container").highcharts().reflow(),
                    $("#container1").highcharts().reflow(),
                    $("#deptCount").highcharts().reflow())
                }) : $("#zp_main_subtabs").removeClass("in") : $("#zp_main_subtabs").removeClass("in").one("transitionend", function() {
                    void 0 == $("#container").highcharts() && void 0 == $("#container1").highcharts() && void 0 == $("#deptCount").highcharts() || ($("#container").highcharts().reflow(),
                    $("#container1").highcharts().reflow(),
                    $("#deptCount").highcharts().reflow())
                })
            }
        }),
        $("#zpeople_tabs").find("#zp_maintabs li[id!=zp_maintab_more], #zp_main_subtabs").mouseleave(function(event) {
            if ("zp_main_subtabs" === event.target.id || $(event.target).parents("#zp_main_subtabs").length > 0)
                $("#zp_main_subtabs").removeClass("in");
            else {
                var mainTab = ZPTabs.currMainTab;
                $(this).attr("id") === "zp_maintab_" + mainTab && ("zp_minimax_leftpanel" == $(this).attr("id") || $(this).hasClass("active") && $("#zp_main_subtabs").hasClass("in") || !("#admin" === Layout.Page.hash && "zp_maintab_admin" != $(this).attr("id") || "#admin" !== Layout.Page.hash && "zp_maintab_admin" === $(this).attr("id")) ? ($("#zp_active_subtabs").removeAttr("opened"),
                $("#zp_main_subtabs").removeClass("in")) : ($("#zp_main_subtabs").removeClass("in").one("transitionend", function() {
                    void 0 == $("#container").highcharts() && void 0 == $("#container1").highcharts() && void 0 == $("#deptCount").highcharts() || ($("#container").highcharts().reflow(),
                    $("#container1").highcharts().reflow(),
                    $("#deptCount").highcharts().reflow())
                }),
                ZPTabs.constructSubtabsBasedOnHash(!1, $(this).attr("tabname"), !0, isMinMax)))
            }
        })) : ($("#zpeople_tabs").find("#zp_maintabs li[id!=zp_maintab_more]").off("mouseenter"),
        $("#zpeople_tabs").find("#zp_maintabs li[id!=zp_maintab_more]").off("mouseleave")),
        "0" === ZPeople.USER_CUST_SETTINGS.USER_TAB_MINIMIZE ? $("#zp_minimax_leftpanel").attr("data-original-title", ZPI18N.getString("zp.minimize")) : $("#zp_minimax_leftpanel").attr("data-original-title", ZPI18N.getString("zp.maximize"))
    },
    selTab: {},
    createMainTab: function(mainTabHtml, tabObj, ind, selTab) {
        var tabCount = !ZPeople.isWFOEnabled && isadmin ? 4 : 3
          , moreCal = 60 * (mainTabHtml.find("li[id^=zp_maintab_]").length + tabCount) + 124;
        $("#peoplebanner").length > 0 && (moreCal += 40),
        moreCal + 60 > window.innerHeight && !selTab.done && selTab.tab && (tabObj = selTab.tab);
        var tabname = tabObj.name.toLowerCase()
          , subtabs = ZPTabs.getSubTabs(tabname, tabObj.isSysTab);
        if ((subtabs.length > 0 && (tabObj.isSysTab || void 0 != subtabs[0].formArr && subtabs[0].formArr.length > 0) || !ZPUtil.Validation.isEmpty(tabObj.url)) && !0 !== tabObj.isHideByAd && "admin" != tabname && !0 !== tabObj.isHidden) {
            if (moreCal > window.innerHeight && (0 !== ind || selTab.done))
                return ZPTabs.selTab = selTab,
                mainTabHtml.append('<li id="zp_maintab_more" class="zp_more" data-toggle="dropdown" onclick="ZPTabs.showMoreTab();"><i class="ZPMic ZPic-More"><i class="IC-More-01 path1"></i><i class="IC-More-02 path2"></i></i><span class="ZPmtxt">' + ZPI18N.getString("zp.more") + "</span></li>"),
                !1;
            mainTabHtml.append($(ZPTabs.getTabHtml(tabname, subtabs, tabObj, selTab)))
        }
        return tabname === selTab.tname && (selTab.done = !0),
        !0
    },
    getTabHtml: function(tabname, subtabs, tabObj, selTab) {
        var imgUrl, tabUrl = ZPUtil.Validation.isEmpty(tabObj.url) ? ZPTabs.getMainTabUrl(subtabs, tabname) : tabObj.url, iconHtml = ZPTabs.getICONHtml(tabname);
        ZPUtil.Validation.isEmpty(iconHtml) && (imgUrl = "/newhr/images/svg/" + ZPTabs.ICON_CLASS[tabObj.name]);
        var id = "zp_maintab_" + tabname;
        ZPUtil.Validation.isEmpty(iconHtml) && ZPUtil.noDataSVG("zp_mt_" + tabname, imgUrl, "ZPMic", $("#zp_maintabs").find("#" + id), !1);
        var tabClass = selTab.tname === tabname ? "active" : "";
        return tabClass += tabObj.isTrial ? "" == tabClass ? "zp_newtrail" : " zp_newtrail" : "",
        $('<li id="zp_maintab_' + tabname + '" tabname="' + tabname + '" tab="true" isSysTab=' + !!tabObj.isSysTab + ' class="' + tabClass + '" title="' + tabObj.disName + '">' + iconHtml + '<span class="ZPmtxt" >' + tabObj.disName + "</span></li>").data({
            subtabs: subtabs,
            taburl: tabUrl
        }).on("click", function() {
            ZPTabs.changeTab(tabUrl)
        })
    },
    changeTab: function(href) {
        -1 !== window.location.href.indexOf("#performance/myteam/review") && null != Appraisal.Reviewer.copyRecordId ? Appraisal.Reviewer.checkForCopyReview(href, !0) : window.location.href = "#" + href
    },
    showMoreTab: function() {
        for (var html = $('<div class="dropdown-menu zp-cusmtab" id="zp_tabmore"><ul></ul></div>'), ind = 0; ind < ZPTabs.TAB_JSON.length; ind++) {
            var tab = ZPTabs.TAB_JSON[ind]
              , tabname = tab.name.toLowerCase()
              , subtabs = ZPTabs.getSubTabs(tabname, tab.isSysTab);
            if ((subtabs.length > 0 && (tab.isSysTab || void 0 != subtabs[0].formArr && subtabs[0].formArr.length > 0) || !ZPUtil.Validation.isEmpty(tab.url)) && !0 !== tab.isHidden && "admin" != tabname && "reports" != tabname && 0 === $("#zp_maintab_" + tabname).length) {
                var tabUrl = ZPUtil.Validation.isEmpty(tab.url) ? ZPTabs.getMainTabUrl(subtabs, tabname) : tab.url
                  , tabClass = tab.isTrial ? "zp_newtrail" : "";
                html.find("ul").append($('<li tabname="' + tabname + '" tab="true"  isSysTab=' + !!tab.isSysTab + ' class="' + tabClass + '"><div>' + ZPTabs.getICONHtml(tabname) + '<span class="ZPmtxt">' + tab.disName + "</span></div></li>").data({
                    subtabs: subtabs,
                    taburl: tabUrl
                }))
            }
        }
        html.find("ul").find('[tab="true"]').on("click", function(event) {
            event.stopPropagation(),
            ZPTabs.changeTab($(this).data("taburl")),
            ZPTabs.selectTab()
        }),
        $("#zp_maintab_more #zp_tabmore").length > 0 ? $("#zp_maintab_more #zp_tabmore").replaceWith(html) : $("#zp_maintab_more").append(html),
        0 == $("#zp_maintab_more").find("#zp_custTabs").length && $("#zp_maintab_more").find("ul").append('<li id="zp_custTabs" onclick="ZPeople.User.showMangeTabModal()"><div><i class="ZPMic CR-customize"></i><span class="ZPmtxt">' + ZPI18N.getString("zp.customizetabs") + "</span></div></li>"),
        $("#zp_maintab_more").hasClass("open") ? $("#zp_maintab_more").removeClass("open") : $("#zp_maintab_more").addClass("open")
    },
    selectTab: function() {
        ZPTabs.construct(ZPTabs.getSelectedTab($(this).attr("tabname")))
    },
    getMainTabUrl: function(subtabs, tabName) {
        if (void 0 != subtabs && subtabs.length > 0) {
            var subs = subtabs[0];
            if (("form" === tabName || "organization" === tabName) && void 0 != subs.componentName)
                return ZPTabs.getFormUrl(subs.componentName, tabName) + "-formId:" + subs.pcId + "/viewId:" + subs.viewId;
            if (void 0 != subs) {
                if (void 0 !== subs.tabURL)
                    return subs.tabURL;
                if (void 0 !== subs.formArr && subs.formArr.length > 0) {
                    var urlObj = subs.formArr[0];
                    if (urlObj.isForm)
                        return ZPTabs.getFormUrl(urlObj.componentName, tabName) + "-formId:" + urlObj.pcId + "/viewId:" + urlObj.viewId;
                    var url = urlObj.tabURL;
                    return void 0 != urlObj && urlObj.urlPrefix && (url = urlObj.urlPrefix + "/" + url),
                    url
                }
                var fKey = Object.keys(subs)[0];
                if (void 0 !== subs[fKey] && void 0 !== subs[fKey].tabURL)
                    return subs[fKey].tabURL
            }
        }
    },
    getSubTabs: function(moduleCode, isSysTab) {
        var tabs = [];
        void 0 === moduleCode && (moduleCode = Layout.Page.currentmode.split("/")[0]);
        return "admin" === moduleCode ? ZPTabs.ADMIN_TAB : ($.each(ZPTabs.TAB_JSON, function() {
            if (this.name.toLowerCase() === moduleCode && (void 0 === isSysTab && void 0 === this.isSysTab || void 0 === this.isSysTab || this.isSysTab == isSysTab || this.isSysTab + "" == isSysTab))
                return tabs = this.subtabs,
                !1
        }),
        tabs)
    },
    getFormUrl: function(name, tabname) {
        var hash = tabname + "/form/listview";
        return "organization" === tabname && ("P_Employee" === name ? hash = "organization/employee" : "P_Department" === name && (hash = "organization/department")),
        "P_Task" === name && (hash = "task/list"),
        hash
    },
    getTabDetailsfromJson: function(subTabs) {
        if (void 0 !== subTabs && subTabs.length > 0)
            for (var i = 0; i < subTabs.length; i++) {
                var tabUrl = Layout.Page.hash.split("#")[1];
                if (void 0 !== subTabs[i].tabURL && subTabs[i].tabURL === tabUrl)
                    return subTabs[i];
                if (void 0 !== subTabs[i].formArr && subTabs[i].formArr.length > 0)
                    for (var j = 0; j < subTabs[i].formArr.length; j++) {
                        if (void 0 !== subTabs[i].formArr[j].tabURL && subTabs[i].formArr[j].tabURL === tabUrl)
                            return subTabs[i].formArr[j];
                        if (void 0 !== subTabs[i].formArr[j].tabURL && -1 !== tabUrl.indexOf(subTabs[i].formArr[j].pcId))
                            return subTabs[i].formArr[j]
                    }
                else {
                    if (subTabs[i].isForm && void 0 !== subTabs[i].tabUrl && -1 !== subTabs[i].tabUrl.indexOf(subTabs[i].pcId))
                        return subTabs[i];
                    if (subTabs[i].isForm & void 0 !== tabUrl.indexOf(subTabs[i].pcId))
                        return subTabs[i]
                }
            }
        return {}
    },
    getTabUrlId: function(url, isFull, isTLSubTab) {
        var id = "zp_t_"
          , urlArr = (url = 0 === (url = -1 !== url.indexOf(":") ? url.replace(/:\s*/g, "_") : url).indexOf("#") ? url.substring(1, url.indexOf("-")) : url).split("/");
        if (isFull || urlArr.length <= 2)
            return id + urlArr.join("_");
        if (isTLSubTab || urlArr.length > 2) {
            if ("attendance" === urlArr[0]) {
                if ("myrequests" === urlArr[2] || "shiftmaprequests" === urlArr[2])
                    return id + "attendance_myrequests";
                if ("myapprovals" === urlArr[2] || "shiftmapapprovals" === urlArr[2])
                    return id + "attendance_myapprovals"
            }
            return id + urlArr.splice(0, urlArr.length - 1).join("_")
        }
    },
    constructSubtabsBasedOnHash: function(isInit, name, isPreview, isMinMax) {
        name = ZPUtil.Validation.isEmpty(name) ? this.currMainTab : name;
        var maintab = $("#zp_maintabs").find("[tabname='" + name + "']")
          , subTabs = ZPTabs.getSubTabs(name, maintab.attr("isSysTab"));
        if (void 0 !== subTabs && subTabs.length > 0) {
            var subCont = $("#zpeople_tabs").find("#zp_main_subtabs").html('<ul id="zp_active_subtabs" opened="' + name + '" class="tab-pane active"></ul>');
            return $.each(subTabs, function(ind, tab) {
                if (this.isForm && !0 !== this.isHidden) {
                    var hash = ZPTabs.getFormUrl(this.componentName, name)
                      , id = "#" + hash + "-formId:" + this.pcId + "/viewId:" + this.viewId
                      , confDtl = {};
                    if (this.isForm && -1 == hash.indexOf("organization/employee") && -1 == hash.indexOf("organization/department") && !Layout.UrlConf.isModuleForm())
                        id = hash.replace(/\//g, "_") + "-formId_" + this.pcId;
                    else
                        confDtl = void 0 !== this.tltabsenabled && "true" == this.tltabsenabled ? {
                            isEnabled: !0
                        } : ZPConf.isThirdLevelTabsEnabled(Layout.UrlConf.getHashDetails(this.tabURL));
                    var formHtml = $('<li tab="true"><a title="' + this.displayName + '" id="' + ZPTabs.getTabUrlId(id, (1 != this.isSubTab && confDtl.isEnabled,
                    1 != this.isSubTab ? !confDtl.isEnabled : confDtl.isEnabled), this.isSubTab) + '" href="#' + hash + "-formId:" + this.pcId + "/viewId:" + this.viewId + '">' + this.displayName + "</a></li>").data(this);
                    $(subCont.find("#zp_active_subtabs").find("[title='Reports']")[0]).length > 0 ? $(subCont.find("#zp_active_subtabs").find("[title='Reports']")[0]).parent().before(formHtml) : $(subCont.find("#zp_active_subtabs").find("[title='Settings']")[0]).length > 0 ? $(subCont.find("#zp_active_subtabs").find("[title='Settings']")[0]).parent().before(formHtml) : subCont.find("#zp_active_subtabs").append(formHtml)
                } else if (void 0 !== tab.formArr && tab.formArr.length > 0 || "PinnedTabs" === tab.tabName || "ZohoReportsDashboards" === tab.tabName) {
                    var subGrpHtml, tabName = tab.tabName.toLowerCase();
                    subGrpHtml = "groups" == tabName && isadmin ? $('<li><a title="' + tab.displayName + '" class="groupTitle" >' + tab.displayName + '<i class="IC-plus-sma MenuAdd" onclick="Groups.loadGroupSlide();"></i></a><ul class="DN" id="zptab_grphdr"></ul></li>') : "ZohoReportsDashboards" === tab.tabName ? $('<li><a id="ZRDshbrdsTab" title="' + tab.displayName + '" class="groupTitle" >' + tab.displayName + (tab.isCurrUserAdvAnAdmin ? '<i class="IC-plus-sma MenuAdd" onclick="ZPDashboard.AdvAnalytics.showCustDashboardSelPage(event)"></i>' : "") + '</a><ul class="DN" id="zptab_custdshbrdhdr"></ul></li>') : $('<li><a title="' + tab.displayName + '" class="groupTitle">' + tab.displayName + ("PinnedTabs" === tab.tabName ? '<i class="IC-plus-sma MenuAdd" onclick="ZPTabs.Actions.getURLSearchModal();"></i>' : "") + '</a><ul class="DN" id="zptab_grphdr"></ul></li>'),
                    subCont.find("#zp_active_subtabs").append(subGrpHtml),
                    subGrpHtml.find(".groupTitle").on("click", function() {
                        $($(this).siblings("ul")[0]).is(":hidden") ? ($(this).siblings("ul").slideDown(),
                        0 == $(this).siblings("ul").find("li.active").length && void 0 !== $($(this).siblings("ul").find("li")[0]).find("a").attr("href") && (-1 !== window.location.href.indexOf("#performance/myteam/review") && null != Appraisal.Reviewer.copyRecordId ? Appraisal.Reviewer.checkForCopyReview($($(this).siblings("ul").find("li")[0]).find("a").attr("href"), !1) : window.location.href = $($(this).siblings("ul").find("li")[0]).find("a").attr("href"))) : $(this).siblings("ul").slideUp()
                    }),
                    subGrpHtml = subGrpHtml.find("ul"),
                    ("ZohoReportsDashboards" !== tab.tabName || void 0 !== tab.formArr && tab.formArr.length > 0) && $.each(tab.formArr, function(ind) {
                        if (this.isForm) {
                            var hash = ZPTabs.getFormUrl(this.componentName, name);
                            subGrpHtml.append($('<li tab="true"><a title="' + this.displayName + '" id="' + ZPTabs.getTabUrlId("#" + hash + "-formId:" + this.pcId + "/viewId:" + this.viewId) + '" href="#' + hash + "-formId:" + this.pcId + "/viewId:" + this.viewId + '">' + this.displayName + "</a></li>").data(this))
                        } else {
                            var url = this.tabURL;
                            "ZohoReportsDashboards" === tab.tabName && (url = "home/dashboard/custom-id:" + this.zpRepId),
                            ZPUtil.Validation.isEmpty(this.urlPrefix) || (url = this.urlPrefix + "/" + url);
                            var id = url
                              , confDtl = {};
                            if (this.isForm && -1 == Layout.Page.currentmode.indexOf("organization/employee") && -1 == Layout.Page.currentmode.indexOf("organization/deparment") && !Layout.UrlConf.isModuleForm())
                                id = Layout.Page.currentmode.replace(/\//g, "_") + "-formId_" + this.pcId;
                            else
                                confDtl = void 0 !== this.tltabsenabled && "true" == this.tltabsenabled ? {
                                    isEnabled: !0
                                } : ZPConf.isThirdLevelTabsEnabled(Layout.UrlConf.getHashDetails(this.tabURL));
                            -1 != url.indexOf("salarydetails/salary/listview") || -1 != url.indexOf("salarydetails/salary/othersview") ? id = "salarydetails/salary" : -1 != url.indexOf("salarydetails/salarysettings") && (id = "salarydetails/salarysettings"),
                            subGrpHtml.append($('<li tab="true"><a ' + (this.newIcon ? "newicon='yes'" : "") + ' title="' + ("ZohoReportsDashboards" === tab.tabName ? ZSEC.Encoder.encodeForHTMLAttribute(this.displayName) : this.displayName) + '" ' + (this.isPinned ? "tabtype='pinned'" : "") + ' id="' + ZPTabs.getTabUrlId(id, 1 != this.isSubTab && confDtl.isEnabled ? confDtl.isEnabled ? !confDtl.isEnabled : confDtl.isEnabled : 1 != this.isSubTab ? !confDtl.isEnabled : confDtl.isEnabled, this.isSubTab) + '" href="#' + url + '">' + ("ZohoReportsDashboards" === tab.tabName ? ZSEC.Encoder.encodeForHTML(this.displayName) : this.displayName) + "</a></li>").data(this))
                        }
                    })
                } else
                    "admin" === ZPTabs.currMainTab && "admin" === name ? "Admin_Setup" === this.tabName && subTabs.length > 4 ? subCont.prepend('<ul id="zp_subtabs_' + tab.tabName.toLowerCase() + '" title="' + tab.displayName + '" ><li tab="true" ><a href="#' + tab.tabURL + '" id="' + ZPTabs.getTabUrlId(tab.tabURL) + '">' + tab.displayName + "</a></li></ul>") : "Admin_Dashboard" == this.tabName ? subCont.prepend('<ul id="zp_subtabs_' + tab.tabName.toLowerCase() + '" title="' + tab.displayName + '"><li tab="true" ><a href="#' + tab.tabURL + '" id="' + ZPTabs.getTabUrlId(tab.tabURL) + '">' + tab.displayName + "</a></li></ul>") : "Admin_Setup" !== tab.tabName && subCont.append('<ul id="zp_subtabs_' + (ZPUtil.Validation.isEmpty(tab.tabName) ? "" : tab.tabName.toLowerCase()) + '" title="' + tab.displayName + '"><li tab="true" ><a href="#' + tab.tabURL + '" id="' + ZPTabs.getTabUrlId(tab.tabURL) + '">' + tab.displayName + "</a></li></ul>") : "performance" === ZPTabs.currMainTab && "performance/salary/employeesalary" == tab.tabURL ? subCont.find("#zp_active_subtabs").append($('<li title="' + tab.displayName + '" tab="true"><a href="#' + tab.tabURL + '" id="' + ZPTabs.getTabUrlId(tab.tabURL, !0) + '">' + tab.displayName + "</a></li>")) : void 0 !== tab.tabURL ? subCont.find("#zp_active_subtabs").append($('<li title="' + tab.displayName + '" tab="true"><a href="#' + tab.tabURL + '" id="' + ZPTabs.getTabUrlId(tab.tabURL) + '">' + tab.displayName + "</a></li>")) : this.isForm || $.each(this, function(key, tabObj) {
                        var tabHtml = $('<li tab="true" title="' + tabObj.tabName + '"><a href="#' + tabObj.tabURL + '" id="' + ZPTabs.getTabUrlId(tabObj.tabURL) + '">' + tabObj.displayName + "</a></li>");
                        subCont.find("#zp_active_subtabs").append(tabHtml),
                        void 0 !== tabObj.formArr && (tabHtml.append("<ul></ul>"),
                        $.each(tabObj.formArr, function(ind, tab) {
                            void 0 !== tab.tabURL && tabHtml.find("ul").append($('<li tab="true"><a title="' + tab.displayName + '" href="#' + tab.tabURL + '" id="' + ZPTabs.getTabUrlId(tab.tabURL) + '">' + tab.displayName + "</a></li>").data(this))
                        }))
                    })
            }),
            isPreview && ("0" === ZPeople.USER_CUST_SETTINGS.USER_TAB_MINIMIZE ? ($("body").removeClass("ZPsbarMini"),
            $("#zp_main_subtabs").addClass("in"),
            $("#zp_minimax_leftpanel").attr("data-original-title", ZPI18N.getString("zp.minimize"))) : (isInit ? ($("#zp_main_subtabs").removeClass("in"),
            $("#zp_active_subtabs").removeAttr("opened")) : $("#zp_main_subtabs").addClass("in"),
            $("#zp_minimax_leftpanel").attr("data-original-title", ZPI18N.getString("zp.maximize"))),
            "#admin" === Layout.Page.hash && Layout.Page.hash && "zp_maintab_admin" === maintab.attr("id") && Layout.Page.hashDtl.hideSeclevel && ($("body").addClass("ZPsbarMini"),
            $("#zp_main_subtabs").removeClass("in"),
            $("#zp_minimax_leftpanel").attr("data-original-title", ZPI18N.getString("zp.maximize")))),
            maintab.hasClass("active") && !0 !== isMinMax && ZPTabs.selectTabs(),
            !0
        }
        return (isPreview || Layout.Page.hashDtl.hideSeclevel) && ($("body").addClass("ZPsbarMini"),
        $("#zp_main_subtabs").removeClass("in"),
        $("#zp_minimax_leftpanel").attr("data-original-title", ZPI18N.getString("zp.maximize"))),
        !1
    },
    getModueCode: function(hash, isHash) {
        var module = hash;
        if ("#services" === (module = isHash ? module.split("/")[0] : "#" + module)) {
            if (module = "services",
            (hash = isHash ? hash : "#" + window.location.href.split("#")[1]).indexOf("services/listing") < 0 && hash.indexOf("services/adminop") < 0 && hash.indexOf("services/appslayout/appslist-all") < 0) {
                var formId = hash.split("/")[1].split(":")[1];
                if ("formLinkName" == hash.split("/")[1].split(":")[0].split("-")[1] && (formId = ZPUtil.Form_Link_Names.getFormLinkName(formId, !1)),
                null != ZPTabs.TAB_JSON && ZPForm.CURRFORM_PARAM.formId != formId) {
                    var empSubTabs = this.getSubTabs("organization")[0];
                    $.each(empSubTabs.formArr, function(fInd, form) {
                        form.pcId != formId || (module = "organization")
                    })
                } else if ($.inArray(ZPForm.getTableName(), ["P_Employee", "P_Department", "P_Designation"]) >= 0)
                    return "organization"
            }
        } else if (0 == module.indexOf("#lms-admin") || 0 == module.indexOf("#lms-learner") || 0 == module.indexOf("#lms-trainer"))
            module = "lms";
        else {
            if (0 !== module.indexOf("#employeeengagement-a") && 0 !== module.indexOf("#employeeengagement-c"))
                return module.substring(1, module.length);
            module = "employeeengagement"
        }
        return module
    },
    checkIsMaintabChanged: function(prevHashDtl) {
        var module = this.getModueCode(Layout.Page.hash, !0);
        if (void 0 === this.currMainTab || this.currMainTab === module)
            return this.isMainTabChanged = !1,
            void (void 0 === this.currMainTab && (this.currMainTab = module));
        void 0 !== prevHashDtl && null != prevHashDtl && void 0 !== prevHashDtl.unloadCallBack && Layout.Page.call(prevHashDtl.unloadCallBack);
        var modConf = ZPConf.getModuleProperties(modConf);
        void 0 != modConf && ZPUtil.Validation.isFunction(modConf.tabSwitchCback) && modConf.tabSwitchCback();
        var mKey = ZPeople.Module.getInitModulePrefix();
        ZPeople.Module.CURRENT_MODULEPREFIX = void 0 !== mKey && -1 !== mKey.indexOf("form-listview") ? ZPeople.Module.getModuleKey() : mKey,
        this.currMainTab = module,
        this.isMainTabChanged = !0
    },
    toggleTab: function(isTLevelSel) {
        var hashArr = Layout.Page.hash.split("/");
        if ($("[tab='true']").removeClass("active"),
        $("#zp_maintabs").find(".active").removeClass("active"),
        void 0 != hashArr) {
            var mainTabCode = ZPTabs.getModueCode(hashArr[0].substring(1, hashArr[0].length));
            if ($("#zp_maintabs").find("li[id='zp_maintab_" + mainTabCode + "']").addClass("active"),
            Layout.Page.isCP) {
                cont = $("#zp_main_subtabs");
                var currmode = Layout.Page.currentmode.replace(/\//g, "_");
                cont.find("[id='zp_t_" + currmode + "']").parent().addClass("active")
            }
            isTLevelSel && this.selectTabs()
        }
        if ("#admin" === Layout.Page.hash || -1 !== Layout.Page.hash.indexOf("blueprint/edit"))
            $("body").addClass("ZPsbarMini"),
            $("#zp_main_subtabs").removeClass("in");
        else if (-1 !== Layout.Page.hash.indexOf("hrcase/settings/workflow")) {
            var tab = Layout.Page.hash.split("workflow/")[1];
            if (void 0 != tab) {
                var subtab = $("#zp_subtab_hrcase_settings_" + tab.split("/")[0]);
                subtab.addClass("active"),
                subtab.siblings().removeClass("active")
            }
        } else
            "#attendance/settings/onduty" !== Layout.Page.hash && "#attendance/settings/shiftmapping" !== Layout.Page.hash && "#attendance/settings/permissionsapp" !== Layout.Page.hash || $("#zp_active_subtabs #zp_t_attendance_settings_regularization").parent().addClass("active");
        "#attendance/onduty/myrequests" === Layout.Page.hash || "#attendance/permission/myrequests" === Layout.Page.hash || "#attendance/regularization/myrequests" === Layout.Page.hash || "#attendance/shiftmapping/shiftmaprequests" === Layout.Page.hash ? ($("#zp_active_subtabs #zp_t_attendance_myrequests").parent().addClass("active").parent().removeClass("DN"),
        $("#zp_active_subtabs #zp_t_attendance_permission_myrequests").parent().addClass("active").parent().removeClass("DN"),
        $("#zp_active_subtabs #zp_t_attendance_regularization_myrequests").parent().addClass("active").parent().removeClass("DN"),
        $("#zp_active_subtabs #zp_t_attendance_shiftmapping_shiftmaprequests").parent().addClass("active").parent().removeClass("DN"),
        $("#zp_active_subtabs #zp_t_attendance_onduty_myrequests").parent().addClass("active").parent().removeClass("DN")) : "#attendance/onduty/myapprovals" === Layout.Page.hash || "#attendance/permission/myapprovals" === Layout.Page.hash || "#attendance/regularization/myapprovals" === Layout.Page.hash || "#attendance/shiftmapping/shiftmapapprovals" === Layout.Page.hash ? ($("#zp_active_subtabs #zp_t_attendance_myapprovals").parent().addClass("active").parent().removeClass("DN"),
        $("#zp_active_subtabs #zp_t_attendance_permission_myapprovals").parent().addClass("active").parent().removeClass("DN"),
        $("#zp_active_subtabs #zp_t_attendance_regularization_myapprovals").parent().addClass("active").parent().removeClass("DN"),
        $("#zp_active_subtabs #zp_t_attendance_shiftmapping_shiftmapapprovals").parent().addClass("active").parent().removeClass("DN"),
        $("#zp_active_subtabs #zp_t_attendance_onduty_myapprovals").parent().addClass("active").parent().removeClass("DN")) : $("#attendanceApprovalBar").addClass("DN")
    },
    selectTabs: function() {
        var modeArr = Layout.Page.currentmode.split("/");
        "timetracker" === modeArr[0] && "timetracker/scheduler/projectdashboard" === Layout.Page.currentmode && $("#zp_main_subtabs").find('[href*="#timetracker/scheduler/project"]').parent().addClass("active"),
        "files" === modeArr[0] && ("files/adobesign/agreementslistview" !== Layout.Page.currentmode && "files/docusign/doculistview" !== Layout.Page.currentmode && "files/zohosign/documentlistview" !== Layout.Page.currentmode || ($("#zp_main_subtabs").find('[href*="#files/adobesign/agreementslistview"]').parent().addClass("active"),
        $("#zp_main_subtabs").find('[href*="#files/docusign/doculistview"]').parent().addClass("active"),
        $("#zp_main_subtabs").find('[href*="#files/zohosign/documentlistview"]').parent().addClass("active"))),
        null != Layout.Page.pageContWrapper && Layout.Page.pageContWrapper.find("[id^=zp-tlevel-]").find("#zp_subtab_" + modeArr.join("_")).addClass("active");
        var subTabs, tabDtl, currmode = Layout.Page.currentmode.replace(/\//g, "_"), cont = $("#zp_active_subtabs");
        if (Layout.Page.isCP && (cont = $("#zp_main_subtabs")),
        !Layout.UrlConf.isForm() && "admin/dashboard" !== Layout.Page.currentmode && (-1 === Layout.Page.currentmode.indexOf("organization/employee") || -1 === Layout.Page.currentmode.indexOf("organization/department"))) {
            currmode = "";
            for (var i = 0; i < modeArr.length; i++)
                i < modeArr.length - 1 && ("" != currmode.trim() ? currmode += "_" + modeArr[i] : currmode = modeArr[i])
        }
        if ("salarydetails/salary/listview" == Layout.Page.currentmode || "salarydetails/salary/othersview" == Layout.Page.currentmode ? currmode = "salarydetails_salary" : "salarydetails/revision/listview" == Layout.Page.currentmode ? currmode = "salarydetails_revision" : -1 != Layout.Page.currentmode.indexOf("salarydetails/salarysettings") && (currmode = "salarydetails_salarysettings"),
        1 == cont.find("[id='zp_t_" + currmode + "']").length)
            cont.find("[id='zp_t_" + currmode + "']").parent().addClass("active");
        else if ((subTabs = $("[id='" + ZPTabs.getTabUrlId(Layout.Page.currentmode) + "']")).length > 1)
            for (var tbcnt = 0; tbcnt < subTabs.length; tbcnt++)
                $(subTabs[tbcnt]).parent().removeClass("active"),
                -1 !== $(subTabs[tbcnt]).attr("href").indexOf(Layout.Page.urlparam.formId) && $(subTabs[tbcnt]).parent().addClass("active");
        (-1 !== Layout.Page.currentmode.indexOf("selfservice/") && null != Layout.Page.parentContainer && (Layout.Page.parentContainer.find("#zp_sp_tls").find("li").removeClass("active"),
        $(Layout.Page.parentContainer.find("#zp_sp_tls").find("a[href='" + Layout.Page.hash + "']")[0]).parent().addClass("active")),
        cont.find("[href='" + Layout.Page.hash + "']").length > 0 && (Layout.Page.hash !== "#" + Layout.Page.currentmode && cont.find("li.active").removeClass("active"),
        cont.find("[href='" + Layout.Page.hash + "']").parent().addClass("active")),
        Layout.Page.isCP) ? subTabs = ZPTabs.ADMIN_TAB : void 0 !== (tabDtl = ZPTabs.getSelectedTab().tab) && (subTabs = tabDtl.subtabs);
        if ((tabDtl = ZPTabs.getTabDetailsfromJson(subTabs)).isForm && -1 == Layout.Page.hash.indexOf("organization/employee") && -1 == Layout.Page.hash.indexOf("organization/department") && !Layout.UrlConf.isModuleForm()) {
            var id = "zp_t_" + currmode + "-formId_" + Layout.Page.urlparam.formId;
            cont.find("#" + id).parent().addClass("active")
        } else if (void 0 === tabDtl.pcId || Layout.UrlConf.isModuleForm() || Layout.Page.urlparam.formId != tabDtl.pcId) {
            var confDtl = ZPConf.isThirdLevelTabsEnabled(Layout.UrlConf.getHashDetails());
            id = ZPTabs.getTabUrlId(Layout.Page.currentmode, 1 != tabDtl.isSubTab && confDtl.isEnabled ? confDtl.isEnabled ? confDtl.isEnabled : !confDtl.isEnabled : 1 != tabDtl.isSubTab ? !confDtl.isEnabled : confDtl.isEnabled, tabDtl.isSubTab);
            1 == cont.find("#" + id).length && (Layout.Page.hash !== "#" + Layout.Page.currentmode && cont.find("li.active").removeClass("active"),
            cont.find("#" + id).parent().addClass("active"))
        } else {
            var id = "zp_t_" + currmode + "-formId_" + Layout.Page.urlparam.formId;
            cont.find("[id^=" + id + "]").parent().addClass("active")
        }
        "zptab_custdshbrdhdr" !== cont.find("li.active").closest("ul").attr("id") ? cont.find("li.active").parent().parent("ul#zptab_grphdr").is(":hidden") ? cont.find("li.active").parent().parent("ul#zptab_grphdr").slideDown() : cont.find("li.active").parent("ul#zptab_grphdr").is(":hidden") && cont.find("li.active").parent("ul#zptab_grphdr").slideDown() : cont.find("#zptab_custdshbrdhdr").slideDown()
    },
    getThirdLevelTabParams: function(isModuleConf) {
        var index = ZPConf.getModulePrefixIndex()
          , prefInd = isModuleConf ? 1 : index
          , subMode = ZPeople.Module.getModulePrefix(prefInd)
          , params = {};
        if (Layout.CustomizedUrl.isService() && -1 != Layout.Page.hash.indexOf("/approvals/") && (params.serviceName = subMode,
        subMode = "approvals"),
        this.subMode = subMode,
        params.submode = subMode,
        "myteam" == Layout.Page.currentmode.split("/")[1] && "userlisting" != Layout.Page.currentmode.split("/")[2] && "alldataview" != Layout.Page.currentmode.split("/")[2] && "peersview" != Layout.Page.currentmode.split("/")[2] && "skillmatrix" != Layout.Page.currentmode.split("/")[2]) {
            var urlsplit = Layout.Page.hash.split("/")
              , urlerecno = urlsplit[2].split(":")
              , urlconfId = urlsplit[3].split(":");
            params.userErecno = urlerecno[1],
            params.configId = urlconfId[1]
        } else
            "automation-workflow" === subMode && (-1 !== Layout.Page.hash.indexOf("actions") ? params.atmnmode = "actions/" + ZPACommon.getMode() : params.atmnmode = ZPACommon.getMode());
        return params
    },
    isRefreshNeeded: function(isModuleConf, hashDtl) {
        var prefInd = isModuleConf ? 1 : ZPConf.getModulePrefixIndex()
          , subMode = void 0 == Layout.Page.hashDtl || ZPUtil.Validation.isEmpty(Layout.Page.hashDtl.tltmode) ? ZPeople.Module.getModulePrefix(prefInd) : Layout.Page.hashDtl.tltmode;
        ZPConf.getSubTabProperties();
        return !(!ZPTabs.refreshTL && "automation-workflow" !== subMode)
    },
    refreshThirdLevelTabs: function(tlParams) {
        void 0 == tlParams && (tlParams = this.getThirdLevelTabParams());
        var tltabs = ZPTabs.getStoredTLTabs(tlParams.submode, tlParams);
        return void 0 !== tltabs ? (ZPTabs.showThirdLevelTabs(tltabs, tlParams),
        null) : tlParams
    },
    TABDTLS: {},
    showThirdLevelTabs: function(resultData, params) {
        var tabsHtml = "";
        $.each(resultData, function() {
            var tabId = -1 != this.tabURL.indexOf("-") ? this.tabURL.split("-")[0].replace(/\//g, "_") : this.tabURL.replace(/\//g, "_");
            void 0 !== this.tabId && (tabId = this.tabId),
            tabsHtml += '<li id="zp_subtab_' + tabId + '"  tab="true"><a href="#' + this.tabURL + '">' + this.tabName + "</a></li>"
        }),
        $("#zp-tlevel-" + (void 0 !== params.serviceName ? params.serviceName : params.submode)).removeClass("DN").find("ul").html(tabsHtml),
        ZPConf.isRemeberTLTabs() && ("performance-myteam" === params.submode && void 0 !== params.userErecno ? ZPTabs.TABDTLS[params.submode + "_" + params.userErecno] = resultData : ZPTabs.TABDTLS[params.submode] = resultData),
        ZPTabs.toggleTab(!0)
    },
    getStoredTLTabs: function(submode, params) {
        if (ZPConf.isRemeberTLTabs())
            return "performance-myteam" === submode && void 0 !== params.userErecno ? ZPTabs.TABDTLS[submode + "_" + params.userErecno] : ZPTabs.TABDTLS[submode]
    },
    isAlreadyPinned: function(url) {
        var isPinned = !1
          , subtabs = ZPTabs.getSubTabs("home");
        return $.each(subtabs, function(ind, tab) {
            if (void 0 != this.formArr && ($.each(this.formArr, function() {
                if (0 === url.indexOf("#") && (url = url.substring(1, url.length)),
                this.tabURL === url)
                    return isPinned = !0,
                    !1
            }),
            isPinned))
                return !1
        }),
        isPinned
    },
    getFormData: function(key) {
        var tabs = ZPTabs.TAB_JSON;
        return void 0 !== ZPTabs.FORM_DETAILS_BY_FORMID[key] ? ZPTabs.FORM_DETAILS_BY_FORMID[key] : ($.each(ZPServices.SERVICE_JSON, function() {
            var val = this;
            $.each(val.forms, function(k) {
                val.forms[k].pcId == key && (ZPTabs.FORM_DETAILS_BY_FORMID[key] = val.forms[k])
            })
        }),
        void 0 == ZPTabs.FORM_DETAILS_BY_FORMID[key] && $.each(tabs, function() {
            if (void 0 !== this.subtabs) {
                var formAr = this.subtabs;
                "Task" === this.name && (formAr = formAr[0].formArr),
                void 0 != formAr && $.each(formAr, function() {
                    if (void 0 != this && (this.formId === key || this.label === key || this.pcId === key))
                        return ZPTabs.FORM_DETAILS_BY_FORMID[key] = this,
                        !1
                })
            }
        }),
        ZPTabs.FORM_DETAILS_BY_FORMID[key])
    },
    getICONHtml: function(tabname) {
        var iconame;
        if ("home" === tabname)
            iconame = "Home";
        else if ("selfservice" === tabname)
            iconame = "SS";
        else if ("attendance" === tabname)
            iconame = "AD";
        else if ("leavetracker" === tabname)
            iconame = "L";
        else if ("timetracker" === tabname)
            iconame = "TA";
        else if ("performance" === tabname)
            iconame = "PA";
        else if ("announcements" === tabname)
            iconame = "ANNO";
        else if ("task" === tabname)
            iconame = "Task";
        else if ("hrcase" === tabname)
            iconame = "HRC";
        else if ("files" === tabname)
            iconame = "FILES";
        else if ("calendar" === tabname)
            iconame = "CL";
        else if ("admin" === tabname)
            iconame = "Setting";
        else if ("form" === tabname || "analytics" === tabname || "reports" === tabname)
            iconame = "Rep";
        else if ("approvals" === tabname)
            iconame = "AP";
        else if ("onboarding" === tabname)
            iconame = "EMPR";
        else if ("lms" === tabname)
            iconame = "TRG";
        else {
            if ("services" === tabname)
                return '<img class="ZPMic" src="' + newUIImageUrl + 'svg/app.svg"/>';
            if ("officereadiness" === tabname)
                iconame = "DESK";
            else {
                if ("employeeengagement" === tabname)
                    return '<i class="ZPMic IC-Empeng"></i>';
                if ("salarydetails" === tabname)
                    iconame = "COMP";
                else if (-1 !== Layout.UrlConf.SERVICE_MODULE.indexOf(tabname) || "organization" === tabname) {
                    var service = ZPServices.getObjectFormArray(ZPServices.SERVICE_JSON, "tabName", tabname, !0);
                    if (void 0 != service) {
                        var icon = void 0 != service.icon ? service.icon : "star";
                        "organization" === tabname && "star" == icon && (icon = "org"),
                        iconame = ZPServices.TAB_ICONS[icon]
                    }
                }
            }
        }
        return ZPUtil.Validation.isEmpty(iconame) ? "" : '<i class="ZPMic ZPic-' + iconame + '"><i class="IC-' + iconame + '-01 path1"></i><i class="IC-' + iconame + '-02 path2"></i></i>'
    },
    showQuickFormAdd: function(result) {
        var isLoaded = $("#zp_quickadd_form_outer").attr("loaded");
        if (null !== ZPServices.SERVICE_JSON && void 0 !== ZPServices.SERVICE_JSON && ZPServices.SERVICE_JSON.length > 0 && "true" !== isLoaded) {
            var tabHtml = '<ul class="nav nav-pills nav-stacked PT20" role="tablist">'
              , formHtml = "";
            $.each(ZPServices.SERVICE_JSON, function() {
                var tabName = this.tabName;
                if ("Performance" !== tabName && "Files" !== tabName && "Attendance" !== tabName && "Timetracker" !== tabName && "Home" !== tabName && "Selfservice" !== tabName && "HRCase" !== tabName) {
                    var tabId = this.id
                      , tempTabHtml = '<li role="presentation"><a href="javascript:;" data-target="#zp_quickadd_' + tabId + '" role="tab" data-toggle="tab">' + this.dispName + "</a></li>";
                    if (void 0 !== this.forms && this.forms.length > 0) {
                        var tempFormHtml = '<div role="tabpanel" class="tab-pane" id="zp_quickadd_' + tabId + '"><div class="col-sm-12"><ul class="rhttablst">'
                          , isHavePerm = !1
                          , count = 0;
                        $.each(this.forms, function() {
                            if (this.isAddPerm && this.isActive) {
                                var tabUrl, dipName = this.dispName;
                                if ("Organization" === tabName && "P_Employee" === this.label)
                                    tabUrl = "#organization/employee/add-formId:" + this.pcId;
                                else if ("Organization" === tabName && "P_Department" === this.label)
                                    tabUrl = "#organization/department/add-formId:" + this.pcId;
                                else {
                                    if ("Organization" === tabName && "VaccinationStatus" === this.label)
                                        return;
                                    if ("Leavetracker" == tabName) {
                                        if (0 != count)
                                            return;
                                        var formName = this.dispName;
                                        tabUrl = "#leavetracker/applyleave",
                                        dipName = ZPI18N.getString("zp.apply.context.leave") + " " + formName
                                    } else
                                        tabUrl = "#" + tabName.toLowerCase() + "/form/add-formId:" + this.pcId
                                }
                                tempFormHtml += '<li><a href="' + tabUrl + '">' + dipName + "</a></li>",
                                isHavePerm = !0
                            }
                            count += 1
                        }),
                        tempFormHtml += "</ul></div></div>",
                        isHavePerm && (formHtml += tempFormHtml,
                        tabHtml += tempTabHtml)
                    }
                }
            }),
            $("#zp_quickadd_form_tabs").html(tabHtml + "</ul>").find("li:first").addClass("active"),
            $("#zp_quickadd_forms").html(formHtml).children(":first").addClass("active"),
            $("#zp_quickadd_form_outer").attr("loaded", "true")
        }
    },
    getQuickAddOptions: function() {
        null !== ZPServices.SERVICE_JSON && void 0 !== ZPServices.SERVICE_JSON && ZPServices.SERVICE_JSON.length > 0 && $.each(ZPServices.SERVICE_JSON, function() {
            var tabName = this.tabName;
            if ("Performance" !== tabName && "Files" !== tabName && "Attendance" !== tabName && "Timetracker" !== tabName && "Home" !== tabName && "Selfservice" !== tabName && "HRCase" !== tabName) {
                this.id;
                if (void 0 !== this.forms && this.forms.length > 0) {
                    var count = 0;
                    $.each(this.forms, function() {
                        if (this.isAddPerm && this.isActive) {
                            var dipName = this.dispName
                              , key = this.label
                              , tabUrl = "";
                            if ("Organization" === tabName && "P_Employee" === this.label)
                                tabUrl = "#organization/employee/add-formId:" + this.pcId;
                            else if ("Organization" === tabName && "P_Department" === this.label)
                                tabUrl = "#organization/department/add-formId:" + this.pcId;
                            else if ("Leavetracker" == tabName) {
                                if (0 != count)
                                    return;
                                var formName = this.dispName;
                                tabUrl = "#leavetracker/applyleave",
                                dipName = ZPI18N.getString("zp.apply.context.leave") + " " + formName
                            } else
                                tabUrl = "#" + tabName.toLowerCase() + "/form/add-formId:" + this.pcId;
                            var option = {};
                            if (option.label = dipName,
                            option.key = key,
                            ZPeople.UnifiedUI.isAvailable()) {
                                CrmPlusImpl.quickAddOptionUrlMappings[key] = tabUrl;
                                var txt = document.createElement("textarea");
                                txt.innerHTML = option.label,
                                option.label = txt.value,
                                CrmPlusImpl.quickAddOptions.push(option)
                            }
                        }
                        count += 1
                    })
                }
            }
        })
    }
};
ZPTabs.Actions = {
    getURLSearchModal: function() {
        null == ZPTabs.URL_DATA ? ZPeople.Request.send(ZPTabs.URL, {
            MODE: "GET_URLS"
        }, ZPTabs.Actions.showPinModal) : ZPTabs.Actions.showPinModal(ZPTabs.URL_DATA)
    },
    showPinModal: function(response) {
        if (response.success) {
            ZPTabs.URL_DATA = response;
            var bodyHtml = $('<ul class="ZPPLists"></ul>');
            $.each(response.urlArr, function() {
                var tabDtl = ZPTabs.getTabDetailsByKey(this[1])
                  , liObj = bodyHtml.find("#" + tabDtl.id);
                0 === liObj.length && (liObj = $('<li id="' + tabDtl.id + '"><a class="collapsed" href="javascript:;" data-toggle="collapse" data-target="#' + tabDtl.id + '_subs"><span>' + tabDtl.name + '</span></a><ul id="' + tabDtl.id + '_subs" class="collapse"></ul></li>'),
                bodyHtml.append(liObj));
                var subTabLi = $('<li name="' + this[0] + '"  tab="true"><a href="javascript:;">' + this[2] + '<i class="IC-plus-big ZPPic"></i></a></li>').data("urlData", this);
                subTabLi.find(".IC-plus-big").on("click", function() {
                    var urlData = $(this).parent().parent().data("urlData");
                    void 0 !== urlData && ZPTabs.Actions.add(urlData[1])
                }),
                liObj.find("ul").append(subTabLi)
            });
            ZPeople.BSModal.setup({
                id: "zp_hashadd",
                type: 2,
                header: "Add Pin",
                body: bodyHtml,
                modalClass: "popRgtModel popLtModel",
                bodyClass: "P0I NomdlFoot",
                overwriteModalClass: !0,
                disableFooter: !0,
                buttonValue: ZPI18N.getString("zp.add")
            })
        }
    },
    add: function(hash, isQuickPin) {
        void 0 === hash && (hash = Layout.Page.hash.substring(1, Layout.Page.hash.length)),
        ZPeople.Request.send(ZPTabs.URL, {
            MODE: "ADD_HASH",
            hash: hash
        }, ZPTabs.Actions.addResponse, isQuickPin)
    },
    addResponse: function(response, param, isQuickPin) {
        response.success && (isQuickPin && Layout.Page.pageContWrapper.find("[id^=zp-tlevel-]").find("#zp_pin_tab").remove(),
        $("#zp_main_subtabs").find("ul#zp_subtabs_pinnedtabs").length > 0 && $("#zp_main_subtabs").find("ul#zp_subtabs_pinnedtabs").append('<li tab="true"><a href="#home/' + response.tabURL + '">' + response.displayName + "</a></li>"),
        ZPTabs.removePinnedTabAndAddSubtab(response))
    },
    addMainTabs: function() {
        ZPeople.Request.send(ZPTabs.URL, {
            MODE: "ADD_MAINTABS"
        })
    },
    addTabsInUserTabs: function(selectedTab) {
        if (void 0 !== selectedTab && void 0 !== selectedTab.id) {
            var indexToPush = 1;
            $("#zp_maintabs").find("[tabname=admin]").length > 0 && (indexToPush = 2),
            (indexToPush = $("#zp_maintabs").children().length - indexToPush) <= 3 && (indexToPush = 4),
            ZPeople.Request.send(ZPTabs.URL, {
                MODE: "ADD_USERMAINTABS",
                tabId: selectedTab.id,
                tabSeq: indexToPush
            })
        }
    }
},
ZPTabs.AdminPanel = {
    indexofList: 0,
    currElm: null,
    constructTabs: function() {
        ZPeople.UnifiedUI.isUnifiedUI() && ZPeople.UnifiedUI.trigger("setupView.onbeforeload");
        var subTabs = $("#zp_maintabs").find("[tabname=admin]").data("subtabs")
          , tabsHtml = ""
          , rowsCnt = 0;
        if (subTabs.length > 4) {
            for (i = 0; i < subTabs.length; i++) {
                var tabs = subTabs[i]
                  , newRow = !((rowsCnt / 4).toString().indexOf(".") > -1);
                0 !== i && newRow && (tabsHtml += "</div>"),
                (0 === i || newRow) && (tabsHtml += "<div name='admintab_rows'>"),
                (tabs.hasOwnProperty("formArr") && tabs.formArr.length > 0 || "Admin_Dashboard" === tabs.tabName) && (tabsHtml += "<ul tabname='" + tabs.tabName + "' tab=true>",
                tabsHtml += "<li><b id='tab_header'>" + tabs.displayName + "</b></li>",
                tabsHtml += "</ul>",
                rowsCnt++)
            }
            $("body").addClass("ZPsbarMini"),
            $("#admin_tabs").html(tabsHtml),
            $("#admin_tabs").find("ul[tabname='Admin_Organization']").attr("tabname", "Admin_Employeerecords"),
            $("#admin_tabs").find("ul[tabname='Admin_Employeerecords']:last").attr("tabname", "Admin_Organization"),
            $("#admin_tabs").find("ul[tabname='Admin_Employeerecords']").find("#tab_header").text("Employee"),
            $.each(subTabs, function(index, settingTabs) {
                var tabName = settingTabs.tabName
                  , tlTabsHtml = "";
                settingTabs.hasOwnProperty("formArr") && settingTabs.formArr.length > 0 && $.each(settingTabs.formArr, function(j, settingTLTabs) {
                    tlTabsHtml += "<li><a onclick='ZPTabs.AdminPanel.gotoThePage(\"" + settingTLTabs.tabURL + "\")' >" + settingTLTabs.displayName + "</a></li>"
                }),
                $("#admin_tabs").find("ul[tabname='" + tabName + "']").append(tlTabsHtml)
            })
        } else
            ZPTabs.AdminPanel.gotoThePage(subTabs[1].tabURL);
        ZPTabs.AdminPanel.constructTrial(),
        ZPeople.UnifiedUI.isUnifiedUI() && ZPeople.UnifiedUI.trigger("setupView.onafterload")
    },
    downAndUpArraowProcess: function(event) {
        var searchObj = $("#search_list");
        if (searchObj.is(":visible"))
            return 40 !== event.keyCode && 38 !== event.keyCode || searchObj.find("li").removeClass("sel"),
            void (40 === event.keyCode ? (ZPSetupCommon.isEmpty(searchObj.find("li[selected=selected]")) ? (ZPTabs.AdminPanel.currElm = $(searchObj.find("li").get(0)),
            searchObj.scrollTop(0)) : ZPTabs.AdminPanel.currElm = searchObj.find("li[selected=selected]").next(),
            ZPSetupCommon.isEmpty(ZPTabs.AdminPanel.currElm) && (ZPTabs.AdminPanel.currElm = $(searchObj.find("li").get(0)),
            searchObj.scrollTop(0)),
            ZPTabs.AdminPanel.currElm.addClass("sel"),
            searchObj.find("li").prop("selected", !1),
            ZPTabs.AdminPanel.currElm.attr("selected", !0),
            $("#search_inp").val(ZPTabs.AdminPanel.currElm.attr("tabname")),
            searchObj.scrollTop(ZPTabs.AdminPanel.currElm[0].offsetTop),
            searchObj.trigger("focus"),
            event.preventDefault()) : 38 === event.keyCode ? (ZPSetupCommon.isEmpty(searchObj.find("li[selected=selected]")) ? ZPTabs.AdminPanel.currElm = searchObj.find("li:first") : ZPTabs.AdminPanel.currElm = searchObj.find("li[selected=selected]").prev(),
            ZPSetupCommon.isEmpty(ZPTabs.AdminPanel.currElm) && (ZPTabs.AdminPanel.currElm = searchObj.find("li:last"),
            searchObj.scrollTop(1500)),
            ZPTabs.AdminPanel.currElm.addClass("sel"),
            searchObj.find("li").prop("selected", !1),
            ZPTabs.AdminPanel.currElm.attr("selected", !0),
            $("#search_inp").val(ZPTabs.AdminPanel.currElm.attr("tabname")),
            searchObj.scrollTop(ZPTabs.AdminPanel.currElm[0].offsetTop),
            searchObj.trigger("focus"),
            event.preventDefault()) : 13 === event.keyCode ? null != ZPTabs.AdminPanel.currElm && (ZPTabs.AdminPanel.currElm.trigger("click"),
            $("#search_list").slideUp()) : 27 === event.keyCode && ZPTabs.AdminPanel.closeSearch())
    },
    closeSearch: function() {
        $("#search_list").html(""),
        $("#search_list").slideUp(),
        $("#close_search").hide(),
        ZPTabs.AdminPanel.currElm = null
    },
    searchTabs: function(thisObj, event) {
        if (27 !== event.keyCode && 40 !== event.keyCode && 38 !== event.keyCode) {
            var subTabs = $("#zp_maintabs").find("[tabname=admin]").data("subtabs")
              , value = $(thisObj).val()
              , searchHtml = ""
              , searchObj = $("#search_list");
            if (ZPSetupCommon.isEmpty(value))
                searchObj.slideUp(),
                $("#dropDownCls").hide(),
                $("#iclen_ic").show();
            else {
                var valueUpperCase = value.toUpperCase();
                $.each(subTabs, function(index, tabs) {
                    if ("Admin_Setup" !== tabs.tabName) {
                        var dispName = tabs.displayName
                          , dispNameUppercase = dispName.toUpperCase()
                          , regEx = new RegExp("(" + value + ")","gi");
                        dispNameUppercase.indexOf(valueUpperCase) > -1 && (dispName = dispName.replace(regEx, "<span class='search-highlight'>$1</span>")),
                        tabs.hasOwnProperty("formArr") && tabs.formArr.length > 0 && $.each(tabs.formArr, function(cnt, subTabsObj) {
                            var subTabDispName = subTabsObj.displayName
                              , subTabDispNameUpperCase = subTabDispName.toUpperCase();
                            subTabDispNameUpperCase.indexOf(valueUpperCase) > -1 && (subTabDispName = subTabDispName.replace(regEx, "<span class='search-highlight'>$1</span>")),
                            subTabsObj.hasOwnProperty("tltabs") && subTabsObj.tltabs.length > 0 ? $.each(subTabsObj.tltabs, function(cnt, tlTabObj) {
                                var tlTabDispName = tlTabObj.displayName
                                  , tlTabDispNameUpperCase = tlTabDispName.toUpperCase();
                                (tlTabDispNameUpperCase.indexOf(valueUpperCase) > -1 || subTabDispNameUpperCase.indexOf(valueUpperCase) > -1 || dispNameUppercase.indexOf(valueUpperCase) > -1) && (tlTabDispNameUpperCase.indexOf(valueUpperCase) > -1 && (tlTabDispName = tlTabDispName.replace(regEx, "<span class='search-highlight'>$1</span>")),
                                searchHtml += "<li onclick=ZPTabs.AdminPanel.gotoThePage('" + tlTabObj.tabURL + "') tabname=\"" + tlTabObj.displayName + '"><div class="zppop-srboxlt"><span>' + tlTabDispName + ", <b>" + subTabDispName + "</b></span></div></li>")
                            }) : (subTabDispNameUpperCase.indexOf(valueUpperCase) > -1 || dispNameUppercase.indexOf(valueUpperCase) > -1) && (searchHtml += "<li onclick=ZPTabs.AdminPanel.gotoThePage('" + subTabsObj.tabURL + "') tabname=\"" + subTabsObj.displayName + '"><div class="zppop-srboxlt"><span>' + subTabDispName + ", <b>" + dispName + "</b></span></div></li>")
                        }),
                        $("#dropDownCls").show(),
                        $("#iclen_ic").hide()
                    }
                }),
                "" == searchHtml && (searchHtml = '<li class="noData"><span>' + ZPI18N.getString("zp.noresults") + "</span></li>"),
                searchObj.html(searchHtml),
                searchObj.slideDown()
            }
        }
    },
    gotoThePage: function(url) {
        window.location.href = "#" + url,
        ZPeople.triggerMinMax(),
        0 != $("body.unified-people.unified-settings").length && ZPeople.toggleminmaxClass(!0)
    },
    constructRequestDemoHtml: function() {
        var reqDemoHtml = '<div class="modal popBtmModel fade" id="dvReqdemo">';
        reqDemoHtml += '<div class="modal-body">',
        reqDemoHtml += '<div class="dvReqhead"> <span>' + ZPI18N.getString("zp.reqDemo") + '</span> <a class="close" data-dismiss="modal"><span class="IC-cls"></span></a> </div>',
        reqDemoHtml += '<div class="request-form-wrap">',
        reqDemoHtml += '<form id="Lead" class="contact-form" name="Lead">',
        reqDemoHtml += '<div class="form-group">',
        reqDemoHtml += '<div id="emailErrMsg">',
        reqDemoHtml += "<p>",
        reqDemoHtml += '<input id="Email" name="Email"  placeholder="' + ZPI18N.getString("zp.email") + '" type="text">',
        reqDemoHtml += "</p>",
        reqDemoHtml += "</div>",
        reqDemoHtml += '<p><span class="mand form-control-static">*</span></p>',
        reqDemoHtml += "</div>",
        reqDemoHtml += '<div class="form-group">',
        reqDemoHtml += "<div>",
        reqDemoHtml += "<p>",
        reqDemoHtml += '<input id="Phone_Number" name="Phone_Number" placeholder="' + ZPI18N.getString("zp.phonenumber") + '" type="text">',
        reqDemoHtml += "</p>",
        reqDemoHtml += "</div>",
        reqDemoHtml += "</div>",
        reqDemoHtml += '<div class="form-group">',
        reqDemoHtml += "<div>",
        reqDemoHtml += "<p>",
        reqDemoHtml += '<textarea id="Comments" name="Comments" placeholder="' + ZPI18N.getString("zp.message") + '"></textarea>',
        reqDemoHtml += "</p>",
        reqDemoHtml += "</div>",
        reqDemoHtml += "</div>",
        reqDemoHtml += "<p>",
        reqDemoHtml += '<button class="btn btn-primary"  type="button" onclick="validateForm(this.form);">' + ZPI18N.getString("zp.submit") + "</button>",
        reqDemoHtml += "</p>",
        reqDemoHtml += "</form>",
        reqDemoHtml += "</div>",
        reqDemoHtml += "</div>",
        reqDemoHtml += "</div>",
        $("#zp-contwrap-admin").append(reqDemoHtml)
    },
    constructTrial: function() {
        ZPeople.Request.send("dashboard.zp", {
            mode: "getPlanDetails"
        }, function(resultData) {
            var trialLink = Layout.Page.container.find("#zp_d_subscription");
            resultData.trialpackStatus ? (trialLink.removeClass("DN"),
            Dashboard.planId = resultData.planId) : (trialLink.addClass("DN"),
            Dashboard.planId = resultData.planId,
            "1" == resultData.planId && trialLink.show(),
            Dashboard.planId = resultData.planId)
        })
    }
};
var ZPConf = {};
(ZPConf = {
    getModuleProperties: function(moduleKey) {
        return moduleKey = void 0 === moduleKey ? ZPeople.Module.getModulePrefix() : moduleKey,
        Layout.CustomizedUrl.isService() && -1 != Layout.Page.hash.indexOf("/approvals/") && (moduleKey = "approvals"),
        ZPConf.ModuleProp[moduleKey]
    },
    getModulePrefixIndex: function() {
        var modeArr = Layout.UrlConf.getOriginalHash().split("/")
          , index = modeArr.length;
        return modeArr.length >= 3 && (index = modeArr.length - 1),
        -1 !== Layout.UrlConf.getOriginalHash().indexOf("/automation/workflow") && (index = modeArr.length > 5 ? modeArr.length - 3 : modeArr.length > 4 ? modeArr.length - 2 : modeArr.length - 1),
        -1 !== Layout.UrlConf.getOriginalHash().indexOf("/integration/marketplace") && (index = 3),
        index
    },
    getSubTabProperties: function() {
        var index = ZPConf.getModulePrefixIndex();
        return ZPConf.SecLevelUrlConf[ZPeople.Module.getModulePrefix(index)]
    },
    isThirdLevelTabsEnabled: function(hashUrlDtl) {
        var result = {
            isEnabled: !1,
            isModuleConf: !1
        }
          , moduleConf = ZPConf.getModuleProperties()
          , subTabConf = ZPConf.getSubTabProperties();
        return (void 0 !== subTabConf && subTabConf.thirdLevelTab && (void 0 === subTabConf.ui || "hr" === subTabConf.ui && "/hr" === ZPeople.CONTEXT) || void 0 !== moduleConf && moduleConf.thirdLevelTab && (void 0 === moduleConf.ui || "hr" === moduleConf.ui && "/hr" === ZPeople.CONTEXT) || void 0 != hashUrlDtl && !ZPUtil.Validation.isEmpty(hashUrlDtl.tltmode)) && (result.isEnabled = !0,
        void 0 !== moduleConf && moduleConf.thirdLevelTab && (result.isModuleConf = !0)),
        result
    },
    isRemeberTLTabs: function() {
        var subTabConf = ZPConf.getSubTabProperties();
        if (void 0 !== subTabConf && void 0 != subTabConf.rememberTLTabs)
            return subTabConf.rememberTLTabs;
        var moduleConf = ZPConf.getModuleProperties();
        return void 0 !== moduleConf && void 0 != moduleConf.rememberTLTabs && moduleConf.rememberTLTabs
    }
}).ModuleProp = {
    leavetracker: {
        initModule: !0
    },
    timetracker: {
        initModule: !0,
        checkPayment: "P_PAYMENT_TIMESHEET_ALLOWED"
    },
    attendance: {
        initModule: !0,
        checkPayment: "P_PAYMENT_ATTENDANCE_ALLOWED",
        sourceload: ["attendance.3.min.js"]
    },
    organization: {
        initModule: !0,
        isSetUp: !0
    },
    performance: {
        initModule: !0,
        sourceload: ["appraisal.3.min.js", "tp.3.min.js"]
    },
    task: {
        thirdLevelTab: !0,
        ui: "hr"
    },
    approvals: {
        thirdLevelTab: !0
    },
    checklist: {
        thirdLevelTab: !0
    },
    feeds: {
        initModule: !0
    },
    hrcase: {
        sourceload: ["hrcases.min.js"]
    },
    home: {
        initModule: !0,
        sourceload: ["home.min.js", "hrcases.min.js"]
    },
    selfservice: {
        sourceload: ["home.min.js"]
    },
    admin: {
        sourceload: ["admin.1.min.js", "admin.2.min.js", "home.min.js"]
    },
    calendar: {
        sourceload: ["home.min.js, zpcalendar.min.js"]
    },
    training: {
        sourceload: ["training.min.js"]
    },
    onboarding: {
        sourceload: ["zp_css_3.css", "admin.1.min.js"]
    },
    devspace: {
        sourceload: ["admin.2.min.js"]
    },
    officereadiness: {
        sourceload: ["wfo.min.js"]
    },
    reports: {
        sourceload: ["lite.min.js", "tp.3.min.js", "reports_css.css", "compensation.2.min.js"]
    },
    files: {
        sourceload: ["files.min.js"]
    },
    lms: {
        sourceload: ["zp_css_3.css", "lms.min.js"]
    },
    employeeengagement: {
        sourceload: ["zp_css_3.css"]
    },
    salarydetails: {
        initModule: !0,
        sourceload: ["compensation.2.min.js"]
    }
},
ZPConf.SecLevelUrlConf = {
    "timetracker-timelogs": {
        thirdLevelTab: !0,
        ui: "hr"
    },
    "timetracker-timesheet": {
        thirdLevelTab: !0,
        ui: "hr"
    },
    "timetracker-scheduler": {
        thirdLevelTab: !0,
        ui: "hr"
    },
    "timetracker-jobschedule": {
        thirdLevelTab: !0,
        ui: "hr"
    },
    "timetracker-budget": {
        thirdLevelTab: !0,
        ui: "hr"
    },
    "timetracker-reports": {
        thirdLevelTab: !0,
        ui: "hr"
    },
    "timetracker-settings": {
        thirdLevelTab: !0,
        ui: "hr"
    },
    "performance-myreview": {
        thirdLevelTab: !0
    },
    "performance-myteam": {
        thirdLevelTab: !0,
        ui: "hr"
    },
    "performance-reports": {
        thirdLevelTab: !0,
        ui: "hr"
    },
    "performance-settings": {
        thirdLevelTab: !0,
        ui: "hr"
    },
    "attendance-entry": {
        thirdLevelTab: !0,
        ui: "hr"
    },
    "attendance-regularization": {
        thirdLevelTab: !0,
        ui: "hr"
    },
    "attendance-report": {
        thirdLevelTab: !0,
        ui: "hr"
    },
    "attendance-settings": {
        thirdLevelTab: !0,
        ui: "hr"
    },
    "attendance-shiftmapping": {
        thirdLevelTab: !0,
        ui: "hr"
    },
    "organization-holidaycalendar": {
        thirdLevelTab: !0
    },
    "accesscontrol-permissions": {
        thirdLevelTab: !0
    },
    "accesscontrol-roles": {
        thirdLevelTab: !0
    },
    "automation-workflow": {
        thirdLevelTab: !0
    },
    "automation-webhook": {
        thirdLevelTab: !0
    },
    "automation-scheduler": {
        thirdLevelTab: !0
    },
    "formslayout-templates": {
        thirdLevelTab: !0
    },
    "automation-actions": {
        thirdLevelTab: !0
    },
    "devspace-zohopeopleapi": {
        thirdLevelTab: !0
    },
    "leavetracker-views": {
        thirdLevelTab: !0,
        ui: "hr"
    },
    "leavetracker-reports": {
        thirdLevelTab: !0,
        ui: "hr"
    },
    "leavetracker-settings": {
        thirdLevelTab: !0,
        ui: "hr"
    },
    "leavetracker-holiday": {
        thirdLevelTab: !0,
        ui: "hr"
    },
    "home-employee": {
        thirdLevelTab: !0
    },
    "files-fileView": {
        thirdLevelTab: !0
    },
    "files-settings": {
        thirdLevelTab: !0
    },
    "organization-employee": {
        thirdLevelTab: !0
    },
    "organization-department": {
        thirdLevelTab: !0
    },
    "organization-tree": {
        thirdLevelTab: !0
    },
    "organization-companysettings": {
        thirdLevelTab: !0
    },
    "organization-designationdetails": {
        thirdLevelTab: !0
    },
    "organization-announcements": {
        thirdLevelTab: !0
    },
    "organization-reports": {
        thirdLevelTab: !0
    },
    "copycustomization-copy": {
        thirdLevelTab: !0
    },
    "automation-workflow-webhook": {
        thirdLevelTab: !0
    },
    "hrcase-settings-workflow": {
        thirdLevelTab: !0
    },
    "onboarding-candidate": {
        thirdLevelTab: !0
    },
    "hrcase-settings-customization": {
        thirdLevelTab: !0
    },
    "integration-marketplace": {
        thirdLevelTab: !0
    },
    "salarydetails-salary": {
        thirdLevelTab: !0
    },
    "salarydetails-salarysettings": {
        thirdLevelTab: !0
    }
};
const CODECHECK_HACK_HTTP_STRING = ["ht", "tp"].join("")
  , EVENT_NAME_REGEX = /^on/
  , SPECIAL_ATTRIBUTES = {
    viewBox: !0
}
  , SVG_NODE_TYPES = {
    svg: !0,
    g: !0,
    path: !0,
    rect: !0,
    defs: !0,
    lineargradient: !0,
    stop: !0
}
  , FRAGMENT_NODE_NAMES = {
    fragment: !0
}
  , SET_ATTRIBUTE_HANDLERS = []
  , isEventAttribute = function(name) {
    return EVENT_NAME_REGEX.test(name)
}
  , extractEventName = function(name) {
    return name.slice(2).toLowerCase()
}
  , isSpecialAttribute = function(attributeName) {
    return SPECIAL_ATTRIBUTES[attributeName]
}
  , invokeSetAttributeHandlers = function(attr, elm, attrs) {
    let attributesHandled = !1;
    return SET_ATTRIBUTE_HANDLERS.forEach(function(handler) {
        let handled = handler(attr, elm, attrs);
        attributesHandled = attributesHandled || handled
    }),
    attributesHandled
}
  , setAttributes = function(elm, attrs) {
    var name;
    if (attrs)
        for (let attr in attrs)
            if ("ref" === attr && "function" == typeof attrs[attr])
                attrs[attr](elm);
            else if (name = attr,
            EVENT_NAME_REGEX.test(name))
                "string" != typeof attrs[attr] && elm.addEventListener(extractEventName(attr), attrs[attr]);
            else if ("style" === attr && "object" == typeof attrs[attr])
                Object.assign(elm.style, attrs[attr]);
            else if ("className" === attr)
                elm.setAttribute("class", attrs[attr]);
            else {
                if (invokeSetAttributeHandlers(attr, elm, attrs))
                    continue;
                void 0 !== attrs[attr] && (SPECIAL_ATTRIBUTES[attr] && SVG_NODE_TYPES[elm.type.toLowerCase()] ? elm.setAttributeNS("", attr, attrs[attr]) : elm.setAttribute(attr, attrs[attr]))
            }
}
  , _constructDOM = function(node) {
    let $el, children;
    if (!node)
        return document.createComment("");
    if ("function" == typeof node)
        return node();
    if ("string" == typeof node)
        return document.createTextNode(node);
    if ("number" == typeof node)
        return document.createTextNode(String(node));
    if (node instanceof Node)
        return node;
    if ("object" == typeof node && "function" == typeof node.type)
        return node.type(node.props);
    let nodeType = (node.type || "").trim().toLowerCase();
    return SVG_NODE_TYPES[nodeType] ? (nodeType = (node.type || "").trim(),
    $el = document.createElementNS("".concat(CODECHECK_HACK_HTTP_STRING, "://www.w3.org/2000/svg"), nodeType),
    "svg" === nodeType && $el.setAttributeNS("".concat(CODECHECK_HACK_HTTP_STRING, "://www.w3.org/2000/xmlns/"), "xmlns:xlink", "".concat(CODECHECK_HACK_HTTP_STRING, "://www.w3.org/1999/xlink")),
    node.props && setAttributes($el, node.props)) : FRAGMENT_NODE_NAMES[nodeType] ? $el = document.createDocumentFragment() : nodeType && ($el = document.createElement(nodeType),
    node.props && setAttributes($el, node.props)),
    (children = (children = node.children || []).reduce(function(acc, cur) {
        return acc.concat(cur)
    }, [])).forEach(function(_children) {
        if (void 0 !== _children) {
            let childElement = _constructDOM(_children);
            void 0 !== childElement && $el.appendChild(childElement)
        }
    }),
    $el
}
  , addFragmentNodeName = function() {
    let nodeName = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
    (nodeName = nodeName.trim().toLowerCase()) && (FRAGMENT_NODE_NAMES[nodeName] = !0)
}
  , addSetAttributeHandler = function() {
    let handler = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
    "function" == typeof handler && SET_ATTRIBUTE_HANDLERS.push(handler)
};
function createDOM(type, props) {
    for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++)
        children[_key - 2] = arguments[_key];
    return _constructDOM({
        type: type,
        props: props,
        children: children
    })
}
window.ZPCreateDOM = createDOM;
var ExtensionUtil = {
    portalDetails: {},
    userDetails: {},
    extensionDetails: {},
    init: function() {
        ExtensionUtil.renderIntallPrivateExtension(),
        document.getElementById("login-different").addEventListener("click", function() {
            window.location.href = "https://" + accountsURL + "/logout?serviceurl=" + encodeURIComponent(window.location.href)
        })
    },
    renderIntallPrivateExtension: function() {
        var params = ExtensionUtil.getQueryParamsFromURL(window.location.href, ["devZSOID", "extensionID", "version"]);
        params.method = "getExtensionAndUserDetails",
        RequestUtil.request("/getExtensionAndUserDetails.zp", "POST", params).then(function(responseData) {
            var response = JSON.parse(responseData);
            document.getElementById("extensionLogo").setAttribute("src", "/getExtensionLogo.zp?devZSOID=" + devZSOID + "&extensionID=" + extensionID + "&method=getExtensionLogo"),
            ExtensionUtil.portalDetails = response.details.userPortals.portal,
            ExtensionUtil.userDetails = response.details.userDetails,
            ExtensionUtil.extensionDetails = response.details.extensionDetails,
            ExtensionUtil.populateDetails(),
            ExtensionUtil.initEventListener()
        })
    },
    initEventListener: function() {
        document.getElementById("installExtensionButton").addEventListener("click", function() {
            let urlParamArray = window.location.href.split("?")[1].split("&");
            var params = {
                method: "installPrivateExtension"
            };
            params.devZSOID = urlParamArray[0].split("=")[1],
            params.extensionID = urlParamArray[1].split("=")[1],
            params.version = urlParamArray[2].split("=")[1],
            params.customerZSOID = document.querySelector("#select-portal").value,
            "0" != params.customerZSOID && (document.getElementById("installExtensionButton").insertAdjacentHTML("afterbegin", '<div class="loader-inner line-scale"><div></div><div></div><div></div></div>'),
            document.querySelector("#pluginListInfo").classList.add("CTI_dsbl"),
            RequestUtil.request("/installPrivateExtension.zp", "POST", params).then(function(responseData) {
                if (resultData = JSON.parse(responseData),
                "ZPEC001" == resultData.status) {
                    var customerPortalName = ""
                      , abstractRedirectionURL = "https://" + location.host + "/${portal_name}/zp#admin/integration/marketplace/installed";
                    ExtensionUtil.portalDetails.forEach(function(portalDetail) {
                        if (portalDetail.portalId == params.customerZSOID)
                            return customerPortalName = portalDetail.portalName,
                            !1
                    });
                    var redirectionURL = abstractRedirectionURL.replace("${portal_name}", customerPortalName);
                    window.location = redirectionURL
                } else
                    "ZPEC005" == resultData.status ? document.getElementById("session-container").insertAdjacentHTML("beforeend", '<span class="warnTxt" style="bottom: -50px;">' + ZPI18N.getString("zp.extension.paymenterror") + "</span>") : 7583 == resultData.status ? document.getElementById("session-container").insertAdjacentHTML("beforeend", '<span class="warnTxt" style="bottom: -50px;">' + ZPI18N.getString("zp.extension.enableerror") + "</span>") : document.getElementById("session-container").insertAdjacentHTML("beforeend", '<span class="warnTxt" style="bottom: -50px;">' + ZPI18N.getString("zp.extension.installerror", [peopleSupportEmail]) + "</span>")
            }))
        })
    },
    populateDetails: function() {
        var container = document.getElementById("marketplaceContainer");
        container.querySelector(".instal-name").innerHTML = ZSEC.Encoder.encodeForHTML(ExtensionUtil.userDetails.empName),
        container.querySelector(".u-mail").innerHTML = ZSEC.Encoder.encodeForHTML(ExtensionUtil.userDetails.empEmail);
        var options = '<option selected disabled value="0">Select</option>';
        ExtensionUtil.portalDetails.forEach(function(userDetail) {
            options += `<option value="${userDetail.portalId}">${ZSEC.Encoder.encodeForHTML(userDetail.portalName)}</option>`
        }),
        container.querySelector("#select-portal").innerHTML = options,
        container.querySelector(".top-band-title").innerHTML = ExtensionUtil.extensionDetails.name,
        container.querySelector(".sho-dec").innerHTML = ExtensionUtil.extensionDetails.description ? ExtensionUtil.extensionDetails.description : ZPI18N.getString("zp.nodescription")
    },
    getQueryParamsFromURL: function(url, paramNeededList) {
        if ("undefied" == typeof paramNeededList)
            return null;
        var params = {};
        return url.split("?")[1].split("&").forEach(function(param) {
            paramNeededList.includes(param.split("=")[0]) && (params[param.split("=")[0]] = param.split("=")[1])
        }),
        params
    },
    request: function() {},
    getQueryString: function(param) {
        let queryString = "";
        if (void 0 !== params)
            for (let paramName in params) {
                "" !== queryString && (queryString += "&");
                let paramValue = params[paramName];
                "object" != typeof (paramValue = void 0 === paramValue || null === paramValue ? "" : paramValue) || paramValue.constructor !== Object && paramValue.constructor !== Array || (paramValue = JSON.stringify(paramValue)),
                queryString += encodeURIComponent(paramName) + "=" + encodeURIComponent(paramValue)
            }
        return queryString
    }
}
  , MarketplaceExtensionUtil = {
    init: function() {
        var container = document.getElementById("marketplaceContainer");
        container.querySelector(".top-band-title").innerHTML = extensionDetails.name,
        container.querySelector(".sho-dec").innerHTML = extensionDetails.description ? extensionDetails.description : ZPI18N.getString("zp.nodescription"),
        document.getElementById("extensionLogo").setAttribute("src", "/getExtensionLogo.zp?devZSOID=" + devZSOID + "&extensionID=" + extensionID + "&method=getExtensionLogo"),
        document.getElementById("installExtensionButton").insertAdjacentHTML("afterbegin", '<div class="loader-inner line-scale"><div></div><div></div><div></div></div>');
        let urlParamArray = window.location.href.split("?")[1].split("&");
        var params = {
            method: "installMarketplaceExtension"
        };
        params.devZSOID = urlParamArray[0].split("=")[1],
        params.extensionID = urlParamArray[1].split("=")[1],
        params.customerZSOID = urlParamArray[2].split("=")[1],
        RequestUtil.request("/installMarketplaceExtension.zp", "POST", params).then(function(responseData) {
            if (resultData = JSON.parse(responseData),
            "ZPEC001" == resultData.status) {
                var redirectionURL = ("https://" + location.host + "/${portal_name}/zp#admin/integration/marketplace/installed").replace("${portal_name}", portalName);
                window.location = redirectionURL
            } else
                "ZPEC005" == resultData.status ? document.getElementById("session-container").insertAdjacentHTML("beforeend", '<span class="warnTxt" style="bottom: -50px;">' + ZPI18N.getString("zp.extension.paymenterror") + "</span>") : 7583 == resultData.status ? document.getElementById("session-container").insertAdjacentHTML("beforeend", '<span class="warnTxt" style="bottom: -50px;">' + ZPI18N.getString("zp.extension.enableerror") + "</span>") : document.getElementById("session-container").insertAdjacentHTML("beforeend", '<span class="warnTxt" style="bottom: -50px;">' + ZPI18N.getString("zp.extension.installerror", [peopleSupportEmail]) + "</span>")
        })
    }
}
  , Layout = {
    URL: {},
    isRedirectedURL: !1
};
Layout.Script = {
    DRE_URL: null,
    ZIA_URL: Layout.ZIAURL + "assets/js/zia-chat-sdk.js",
    IS_LOADED: !1,
    ZIA_LOADED: !1,
    loadDRE: function(callback) {
        if (Layout.Script.IS_LOADED || void 0 === Layout.Script.DRE_URL || null === Layout.Script.DRE_URL || "null" === Layout.Script.DRE_URL)
            callback();
        else {
            0 !== Layout.Script.DRE_URL.indexOf("http") && (Layout.Script.DRE_URL = "https://" + Layout.Script.DRE_URL);
            var script = document.createElement("script");
            script.type = "text/javascript",
            script.readyState ? script.onreadystatechange = function() {
                "loaded" !== script.readyState && "complete" !== script.readyState || (script.onreadystatechange = null,
                Layout.Script.IS_LOADED = !0,
                callback())
            }
            : script.onload = function() {
                Layout.Script.IS_LOADED = !0,
                this.onload = null,
                callback()
            }
            ,
            script.src = Layout.Script.DRE_URL + "/js/includeDelugeEditor.js",
            document.getElementsByTagName("head")[0].appendChild(script)
        }
    },
    loadZIA: function(callback) {
        if (!Layout.Script.ZIA_LOADED && void 0 !== Layout.Script.ZIA_URL && null !== Layout.Script.ZIA_URL && "null" !== Layout.Script.ZIA_URL) {
            0 !== Layout.Script.ZIA_URL.indexOf("http") && (Layout.Script.ZIA_URL = "https://" + Layout.Script.ZIA_URL);
            var script = document.createElement("script");
            script.type = "text/javascript",
            script.readyState ? script.onreadystatechange = function() {
                "loaded" !== script.readyState && "complete" !== script.readyState || (script.onreadystatechange = null,
                Layout.Script.ZIA_LOADED = !0)
            }
            : script.onload = function() {
                Layout.Script.ZIA_LOADED = !0,
                this.onload = null
            }
            ,
            script.src = Layout.Script.ZIA_URL,
            document.getElementsByTagName("head")[0].appendChild(script)
        }
    }
},
Layout.UrlConf = {
    SERVICE_MODULE: [],
    setHashDetails: function(mode) {
        Layout.Page.hashDtl = this.getHashDetails(mode, !0)
    },
    getOriginalHash: function(mode) {
        (mode = void 0 === mode ? Layout.Page.currentmode : mode,
        "/zp" === ZPeople.CONTEXT && 0 === mode.indexOf("home/")) && ("pinned" === $("#zp_subtabs_pinnedtabs").find("a[href='" + Layout.Page.hash + "']").attr("tabtype") && (mode = mode.substring(5, mode.length),
        Layout.Page.moduleenabled = !0));
        return mode
    },
    ALLOWED_MODULEURI: [],
    getHashDetails: function(mode, isSet) {
        if (null !== Layout.Page.hashDtl && Layout.Page.hashDtl.hash === mode)
            return Layout.Page.hashDtl;
        var hashDtl, urls = (mode = this.getOriginalHash(mode)).split("/");
        if (Layout.UrlConf.isServiceMode = !1,
        Layout.UrlConf.isAnalyticsServiceMode = !1,
        -1 !== Layout.UrlConf.SERVICE_MODULE.indexOf(urls[0]) && (Layout.UrlConf.isServiceMode = !0),
        (-1 !== Layout.UrlConf.SERVICE_MODULE.indexOf(urls[2]) || ZPUtil.checkIsExistInArray(zpconst.systemServices, urls[2])) && (Layout.UrlConf.isAnalyticsServiceMode = !0),
        Layout.UrlConf.isSystemService = !1,
        ZPUtil.checkIsExistInArray(zpconst.systemServices, urls[0]) && (Layout.UrlConf.isSystemService = !0),
        -1 !== mode.indexOf("files/companyfile/view") && (mode = "files/companyfile/view"),
        Layout.UrlConf.isForm())
            if (subHash = "admin/organization/locations/add" == mode || "admin/organization/locations/view" == mode || "admin/organization/locations/edit" == mode ? mode.split("/")[3] : mode.split("/").pop(),
            Layout.UrlConf.isFormActionMode(subHash))
                hashDtl = {
                    parent: Layout.UrlConf.getParentUrl(mode)
                };
            else {
                hashDtl = "transfer" === subHash ? $.extend(!0, {}, Layout.URLS.transfer) : $.extend(!0, {}, Layout.URLS.form),
                Layout.UrlConf.isModuleForm(mode) && (hashDtl.skipParam = !0);
                ZPConf.getModuleProperties();
                if ((!Layout.UrlConf.isModuleForm(mode) || Layout.UrlConf.isModuleForm(mode) && ZPeople.Module.checkModuleInit(mode)) && (hashDtl.initModule = !0),
                Layout.UrlConf.isModuleForm(mode)) {
                    var helpKey = ZPeople.Help.getHelpKeyByHash();
                    void 0 !== helpKey && (hashDtl.helpKey = helpKey)
                }
            }
        else if (void 0 !== mode && void 0 !== Layout.URLS[mode])
            hashDtl = $.extend(!0, {}, Layout.URLS[mode]);
        else if (void 0 !== Layout.URLS[Layout.Page.currentmode])
            hashDtl = $.extend(!0, {}, Layout.URLS[Layout.Page.currentmode]);
        else if (Layout.CustomizedUrl.isService()) {
            if (urls[0] = "$SERVICE$",
            void 0 !== Layout.URLS[urls.join("/")])
                return Layout.URLS[urls.join("/")]
        } else if (Layout.UrlConf.isAnalyticsServiceMode && (urls[2] = "$SERVICE$",
        void 0 !== Layout.URLS[urls.join("/")]))
            return Layout.URLS[urls.join("/")];
        return void 0 === hashDtl && $.each(Layout.URLS, function(key, val) {
            if (void 0 !== this.altUrls && -1 !== this.altUrls.indexOf(mode))
                return (hashDtl = $.extend(!0, {}, this)).wrapperClass = this.altWrapperClass,
                !1
        }),
        isSet && (Layout.Page.hashDtl = hashDtl),
        hashDtl
    },
    FORMACTION_URLS: ["add", "edit", "view", "createview", "editview", "bulkupload", "import"],
    isForm: function() {
        var result = !1;
        return void 0 !== this.getParentUrl() && (result = !0),
        result
    },
    isFormActionMode: function(subHash) {
        return -1 !== Layout.UrlConf.FORMACTION_URLS.indexOf(subHash)
    },
    isModuleForm: function(mode) {
        return -1 !== (mode = void 0 === mode ? Layout.Page.hash : mode).indexOf("salarydetails/salary/listview") || -1 !== mode.indexOf("salarydetails/salary/othersview") || -1 !== mode.indexOf("salarydetails/revision/listview") || -1 !== mode.indexOf("timetracker/scheduler/jobs") || -1 !== mode.indexOf("timetracker/scheduler/projects") || -1 !== mode.indexOf("timetracker/scheduler/clients") || -1 !== mode.indexOf("leavetracker/views/applications") || -1 !== mode.indexOf("performance/salary/employeesalary")
    },
    getFormActionURL: function(actMode) {
        var formUrl = Layout.UrlConf.getParentUrl(void 0, !0);
        return -1 !== Layout.UrlConf.FORMACTION_URLS.indexOf(actMode) && (formUrl += "/" + actMode),
        formUrl
    },
    isFormActionURL: function(actMode) {
        var formUrl = Layout.UrlConf.getFormActionURL(actMode);
        return -1 !== Layout.Page.hash.indexOf(formUrl)
    },
    getParentUrl: function(mode, isActMode) {
        var returnVal, isHash = !1;
        if (void 0 === mode && (isHash = !0),
        -1 !== (mode = void 0 === mode ? Layout.Page.hash : mode).indexOf("organization/employee-") || -1 !== mode.indexOf("organization/employee/transfer") || -1 !== mode.indexOf("organization/employee") && -1 !== Layout.UrlConf.FORMACTION_URLS.indexOf(mode.split("-")[0].split("/").pop()))
            returnVal = "organization/employee";
        else if (-1 !== mode.indexOf("organization/department-") || -1 !== mode.indexOf("organization/department") && -1 !== Layout.UrlConf.FORMACTION_URLS.indexOf(mode.split("-")[0].split("/").pop()))
            returnVal = "organization/department";
        else if (-1 !== mode.indexOf("organization/designation-") || -1 !== mode.indexOf("organization/designation") && -1 !== Layout.UrlConf.FORMACTION_URLS.indexOf(mode.split("-")[0].split("/").pop()))
            returnVal = "organization/designation";
        else if (-1 !== mode.indexOf("timetracker/scheduler/jobs"))
            returnVal = "timetracker/scheduler/jobs";
        else if (-1 !== mode.indexOf("performance/salary/employeesalary"))
            returnVal = "performance/salary/employeesalary";
        else if (-1 !== Layout.Page.currentmode.indexOf("salarydetails/salary/listview"))
            returnVal = "salarydetails/salary/listview";
        else if (-1 !== Layout.Page.currentmode.indexOf("salarydetails/salary/othersview"))
            returnVal = "salarydetails/salary/othersview";
        else if (-1 !== Layout.Page.currentmode.indexOf("salarydetails/revision/listview"))
            returnVal = "salarydetails/revision/listview";
        else if (-1 !== mode.indexOf("leavetracker/views/applications"))
            returnVal = "leavetracker/views/applications";
        else if (-1 !== mode.indexOf("timetracker/scheduler/projects"))
            returnVal = "timetracker/scheduler/projects";
        else if (-1 !== mode.indexOf("timetracker/scheduler/clients"))
            returnVal = "timetracker/scheduler/clients";
        else if (-1 !== mode.indexOf("onboarding/candidate-") || -1 !== mode.indexOf("onboarding/candidate") && -1 !== Layout.UrlConf.FORMACTION_URLS.indexOf(mode.split("-")[0].split("/").pop()))
            returnVal = "onboarding/candidate";
        else if (Layout.CustomizedUrl.isService()) {
            var servicename = Layout.Page.currentmode.split("/")[0];
            if (-1 === mode.indexOf("/admin/formslayout/") && -1 === mode.indexOf("/analytics/") && -1 === mode.indexOf("/admin/accesscontrol/") && -1 === mode.indexOf("/admin/automation/approval") && -1 === mode.indexOf("/admin/automation/") && (isHash && 1 == mode.slice(servicename.length + 1).indexOf("form/") || !isHash && 1 == mode.slice(servicename.length).indexOf("form/"))) {
                var modes = mode.split("/");
                returnVal = isActMode ? modes[0].substr(1) + "/" + modes[1] : modes[0].substr(1) + "/" + modes[1] + "/listview"
            }
        } else
            isHash && 1 == mode.indexOf("form/") || !isHash && 0 == mode.indexOf("form/") ? returnVal = isActMode ? "form" : "form/listview" : -1 !== mode.indexOf("services/") && -1 == mode.indexOf("services/adminop") && -1 == mode.indexOf("services/listing") && -1 == mode.indexOf("services/serviceview") && -1 == mode.indexOf("services/settings/serviceview") ? returnVal = isActMode ? "services" : "services/listview" : -1 !== mode.indexOf("task/list-") || -1 !== mode.indexOf("task/list") && -1 !== Layout.UrlConf.FORMACTION_URLS.indexOf(mode.split("-")[0].split("/").pop()) ? returnVal = "task/list" : -1 !== mode.indexOf("admin/organization/locations/add") || -1 !== mode.indexOf("admin/organization/locations/edit") || -1 !== mode.indexOf("admin/organization/locations/view") ? returnVal = "admin/organization/locations" : -1 !== mode.indexOf("onboarding/form/listview") && (returnVal = "onboarding/form/listview");
        return returnVal
    },
    setUrlParams: function(hash) {
        var urls = hash.split(/-(.+)?/);
        "#admin/organization/locations/add" == urls[0] && (urls[1] = "formLinkName:locations"),
        "#timetracker/scheduler/projectdashboard" == urls[0] && (urls[1] = "id:" + Layout.Page.hash.split(":")[1]);
        var spliturl0 = urls[0].split(":")
          , urlsForLoc = urls[0].split("/");
        spliturl0[0] = urlsForLoc[0] + "/" + urlsForLoc[1] + "/" + urlsForLoc[2] + "/" + urlsForLoc[3],
        spliturl0[1] = urlsForLoc[4];
        var formIdStr = "formId:" + ZPForm.CURRFORM_PARAM.formId;
        "#admin/organization/locations/view" != spliturl0[0] && "#admin/organization/locations/edit" != spliturl0[0] || (ZPForm.CURRFORM_PARAM.formId = ZPUtil.LocationLinkName.getFormLinkName("location", !1),
        formIdStr = "formId:" + ZPForm.CURRFORM_PARAM.formId,
        urls[0] = spliturl0[0],
        urls[1] = "recordId:" + spliturl0[1],
        urls[1] = formIdStr + "/" + urls[1]);
        var mode = urls[0].slice(1, urls[0].length);
        Layout.Page.currentmode = mode;
        var urlsObj = Layout.UrlConf.getHashDetails(mode);
        if (void 0 !== urlsObj)
            if (void 0 !== urlsObj.parent)
                Layout.Page.childUrlParam = this.getParamsByHash(urls[1]),
                Layout.UrlConf.setUrlParams(this.getParentFormHash(urlsObj, mode, urls));
            else if (Layout.UrlConf.setHashDetails(),
            void 0 !== Layout.Page.hashDtl.pageId ? Layout.Page.pageId = Layout.Page.hashDtl.pageId : Layout.Page.pageId = Layout.Page.currentmode.replace(/\//g, "-"),
            Layout.Page.urlparam = {},
            Layout.Page.urlmode = Layout.Page.currentmode.replace(/\//g, "_"),
            urls.length > 1) {
                var params = urls[1].split("/")
                  , skipParam = !1;
                $.each(params, function(index) {
                    var param = this.split(":");
                    Layout.Page.urlparam[param[0]] = param[1],
                    void 0 !== urlsObj.loutparams && -1 === urlsObj.loutparams.indexOf(param[0]) || skipParam || Layout.Page.hashDtl.skipParam || (Layout.UrlConf.isForm() && 0 === index ? (Layout.UrlConf.idString(param),
                    skipParam = !0) : Layout.UrlConf.idString(param))
                })
            }
    },
    idString: function(param) {
        Layout.Page.pageId += "-" + param[0],
        isNaN(param[1]) || (Layout.Page.pageId += "-" + param[1])
    },
    checkValidHash: function() {
        return !(!isPlatformOrg || Layout.UrlConf.PlatformUrls.includes("#" + Layout.Page.currentmode)) || (void 0 === Layout.Page.hashDtl && null === Layout.Page.hashDtl || !(-1 === Layout.Page.hash.indexOf("#hrcase/") || !$.isEmptyObject(ZPTabs.getSelectedTab("hrcase"))))
    },
    getFullHashPageId: function() {
        return Layout.Page.currentmode.replace(/\//g, "-")
    },
    getParamsByHash: function(queryParam) {
        var params = {};
        if (void 0 !== queryParam) {
            var urlParamLst = queryParam.split("/");
            $.each(urlParamLst, function() {
                var param = this.split(":");
                params[param[0]] = param[1]
            })
        }
        return params
    },
    generatePageHash: function() {
        var url = Layout.Page.currentmode + "-";
        if ("admin/organization/locations-" != url) {
            var i = 0;
            for (paramName in Layout.Page.urlparam)
                0 !== i && (url += "/"),
                i++,
                url += paramName + ":" + Layout.Page.urlparam[paramName]
        } else
            "admin/organization/locations-" == url && (url = "admin/organization/locations");
        return url
    },
    getParentFormHash: function(urlsObj, mode, urls) {
        var parentHash;
        if (Layout.UrlConf.isModuleForm()) {
            var viewId = Layout.Page.childUrlParam.viewId;
            void 0 === viewId && (viewId = Layout.Page.urlparam.viewId),
            parentHash = void 0 !== viewId ? "#" + Layout.UrlConf.getParentUrl() + "-viewId:" + viewId : "#" + Layout.UrlConf.getParentUrl()
        } else if (Layout.UrlConf.isForm()) {
            var formData, formId = urls[1].split("/")[0].split(":")[1], viewIDExitForLocation = urls[0].split("/")[2];
            if ("formLinkName" == urls[1].split("/")[0].split(":")[0] && (formId = "locations" != viewIDExitForLocation ? ZPUtil.Form_Link_Names.getFormLinkName(formId, !1) : ZPUtil.LocationLinkName.getFormLinkName("location", !1)),
            formData = ZPeople.isZPNewUI() ? ZPTabs.getFormData(formId) : -1 !== mode.indexOf("task/list") ? $("#zp_maintab_task").data() : $("#zp_subtab_" + formId).data(),
            void 0 != Layout.Page.urlparam.formId && Layout.Page.urlparam.formId != formId && delete Layout.Page.urlparam.viewId,
            "locations" != viewIDExitForLocation) {
                var viewID = Layout.Page.urlparam.viewId;
                ZPUtil.Validation.isEmpty(viewID) && void 0 !== Layout.Page.childUrlParam.viewId && (viewID = Layout.Page.childUrlParam.viewId),
                ZPUtil.Validation.isEmpty(viewID) && (viewID = formData.viewId),
                void 0 != formData.pcId && (formid = formData.pcId),
                void 0 != formData.formId && (formid = formData.formId)
            }
            parentHash = "#" + Layout.UrlConf.getParentUrl() + "-formId:" + formId + "/viewId:" + viewID
        } else
            parentHash = -1 !== mode.indexOf("leavetracker/holiday") ? "#leavetracker/holiday/list" : -1 !== mode.indexOf("leavetracker/applyleave") ? "#leavetracker/views/list" : -1 !== mode.indexOf("holidaycalendar/holidays") ? "#admin/organization/holidaycalendar/holidays/list" : Layout.CustomizedUrl.isService() && -1 !== mode.indexOf("/admin/automation/approval/") || -1 !== mode.indexOf("/admin/automation/workflow/list/") ? "#" + urlsObj.parent.replace("$SERVICE$", Layout.CustomizedUrl.getServiceName()) : "#" + urlsObj.parent;
        return parentHash
    },
    NO_HASH: !1,
    validateHash: function() {
        var newhash, hash = window.location.hash;
        if (hash)
            if (-1 !== hash.indexOf("view/live/detail")) {
                if ((recordDtl = hash.split("-")[1].split("/")).length > 1) {
                    var formId = recordDtl[0].split(":")[1]
                      , recordId = recordDtl[1].split(":")[1];
                    if (void 0 != formId && void 0 !== recordId)
                        newhash = "P_Employee" === (tabName = ZPTabs.getTabNameByFormId(formId)) ? ZPeople.CONTEXT + "#form/employee/view-formId:" + formId + "/recordId:" + recordId : "P_Department" === tabName ? ZPeople.CONTEXT + "#form/department/view-formId:" + formId + "/recordId:" + recordId : "Leavetracker" === tabName ? ZPeople.CONTEXT + "#leavetracker/view-recordId:" + recordId : ZPeople.CONTEXT + "#form/view-formId:" + formId + "/recordId:" + recordId
                }
            } else if (Timetracker.forms.URLs.isTimetrackerFormUrl(hash)) {
                var tabName;
                formId = (recordDtl = Timetracker.forms.URLs.getRecordDtls(hash)).formId;
                if (void 0 !== (recordId = recordDtl.recordId))
                    "P_TimesheetList" == (tabName = void 0 !== formId ? ZPTabs.getTabNameByFormId(formId) : Timetracker.forms.URLs.getTabNameByURL(hash)) && void 0 !== formId ? newhash = ZPeople.CONTEXT + "#timetracker/timesheet/viewapproval-formId:" + formId + "/recordId:" + recordId : "P_Timesheet" == tabName ? newhash = ZPeople.CONTEXT + "#timetracker/timelogs/viewtimelog-recordId:" + recordId : "P_ClientDetails" == tabName ? newhash = ZPeople.CONTEXT + "#timetracker/scheduler/clients/view-recordId:" + recordId : "P_TimesheetJobsList" == tabName ? newhash = ZPeople.CONTEXT + "#timetracker/scheduler/projects/view-recordId:" + recordId : "P_TimesheetJob" == tabName && (newhash = ZPeople.CONTEXT + "#timetracker/scheduler/jobs/view-recordId:" + recordId)
            } else if (-1 !== hash.indexOf("#attendance/regularization-formId")) {
                if ((recordDtl = hash.split("-")[1].split("/")).length > 1) {
                    formId = recordDtl[0].split(":")[1],
                    recordId = recordDtl[1].split(":")[1];
                    void 0 !== formId && void 0 !== recordId && (newhash = ZPeople.CONTEXT + "#attendance/regularization/viewmyapproval-formId:" + formId + "/recordId:" + recordId)
                }
            } else if (-1 != hash.indexOf("#employees/profile") || -1 != hash.indexOf("#selfservice/profile")) {
                newhash = void 0 !== (recordId = hash.split("-")[1]) && recordId !== erecno ? ZPeople.CONTEXT + "#home/dashboard/profile-userId:" + recordId : ZPeople.CONTEXT + "#home/dashboard/profile"
            } else {
                if (hash === "#home/selfservice/profile-id:" + erecno)
                    return void (window.location.href = ZPeople.CONTEXT + "#selfservice/user/profile");
                var recordDtl;
                if (-1 !== hash.indexOf("#leavetracker/leavedetails-formId")) {
                    if ((recordDtl = hash.split("-")[1].split("/")).length > 1) {
                        formId = recordDtl[0].split(":")[1],
                        recordId = recordDtl[1].split(":")[1];
                        void 0 !== formId && void 0 !== recordId && (newhash = ZPeople.CONTEXT + "#leavetracker/view-formId:" + formId + "/recordId:" + recordId)
                    }
                } else if (-1 !== hash.indexOf("#leavetracker/holidaydetails-recordId")) {
                    void 0 !== (recordId = hash.split(":")[1]) && (newhash = ZPeople.CONTEXT + "#leavetracker/holiday/view-recordid:" + recordId)
                } else if (-1 !== hash.indexOf("#leavetracker/addleave-formId"))
                    newhash = ZPeople.CONTEXT + "#leavetracker/applyleave";
                else if (-1 !== hash.indexOf("home/requests") || -1 !== hash.indexOf("home/approvals"))
                    newhash = ZPeople.CONTEXT + "#approvals/myapproval";
                else if (-1 !== hash.indexOf("#home/dashboard/profile-userId:")) {
                    hash.split("-")[1].split(":")[1] === erecno && (newhash = ZPeople.CONTEXT + "#home/dashboard/profile")
                }
            }
        else
            newhash = ZPeople.isZPNewUI() && Layout.isPeoplePlus ? ZPeople.CONTEXT + "#services/listing" : ZPeople.isZPNewUI() && isPlatformOrg ? ZPeople.CONTEXT + "/" + pfExtId + "#admin/formslayout/formslist" : ZPeople.isZPNewUI() ? ZPeople.CONTEXT + "#home/dashboard" : ZPeople.CONTEXT + "#home/dashboard/feeds",
            Layout.UrlConf.NO_HASH = !0;
        return void 0 === newhash || (window.location !== window.parent.location && Layout.isZohoOne ? (Layout.UrlConf.NO_HASH = !0,
        void (window.location.hash = newhash.split("zp")[1])) : (portalName && null != portalName && "" != portalName && (newhash = "/" + portalName + newhash),
        Layout.UrlConf.NO_HASH = !0,
        void (window.location.href = newhash)))
    },
    redirectCustomForms: function(hash) {
        var newTabName, formId = void 0, urls = hash.split(/-(.+)?/), mode = urls[0].slice(1, urls[0].length), tempTabName = mode.split("/")[0].toLowerCase(), params = urls[1].split("/");
        if ($.each(params, function(index) {
            var param = this.split(":");
            param.length > 0 && "formId" === param[0] && (formId = param[1])
        }),
        void 0 !== formId) {
            for (var ind = 0; ind < ZPTabs.TAB_JSON.length && void 0 === newTabName; ind++)
                if (void 0 !== ZPTabs.TAB_JSON[ind].subtabs && ZPTabs.TAB_JSON[ind].subtabs.length > 0)
                    for (var subCnt = 0; subCnt < ZPTabs.TAB_JSON[ind].subtabs.length; subCnt++)
                        if (ZPTabs.TAB_JSON[ind].subtabs[subCnt].pcId === formId) {
                            newTabName = ZPTabs.TAB_JSON[ind].name.toLowerCase();
                            break
                        }
            if (tempTabName !== newTabName) {
                hash = ZPeople.CONTEXT + "#" + newTabName,
                mode = mode.split("/");
                for (var mcnt = 1; mcnt < mode.length; mcnt++)
                    hash += "/" + mode[mcnt];
                hash += "-" + urls[1]
            } else
                hash = void 0
        }
        return hash
    },
    updateHashInformation: function(isInit) {
        var hash = window.location.hash;
        Layout.Page.hash = hash,
        ZPUtil.changeFavicon(),
        -1 !== hash.split("-")[0].indexOf("#admin/") ? Layout.Page.isCP = !0 : Layout.Page.isCP = !1
    }
},
Layout.Page = {
    hashDtl: null,
    currentmode: null,
    urlparam: {},
    childUrlParam: {},
    pageId: null,
    container: null,
    prevHomeAdminUrl: "",
    multiPageTemplate: {},
    urlmode: null,
    pageContWrapper: null,
    ISINIT: !0,
    processingHash: null,
    modulemode: null,
    redirectOldUrlstoNew: function() {
        var newHash, url = window.location.hash;
        return ZPeople.isZPNewUI() && (-1 !== url.indexOf("#home/dashboard/feeds-view:") ? newHash = "#home/feeds/myfeed-view:" + url.split(":")[1] : -1 !== url.indexOf("#home/dashboard/profile-userId:") ? newHash = "#selfservice/user/profile-id:" + url.split(":")[1] : -1 !== url.indexOf("#home/dashboard/feeds") ? newHash = "#home/feeds/myfeed" : -1 !== url.indexOf("#home/dashboard/profile") ? newHash = "#selfservice/user/profile" : -1 !== url.indexOf("tasks/viewtask") ? newHash = "#task/mytask/viewtask-taskid:" + url.split(":")[1] : -1 !== url.indexOf("#task/mytasks") ? newHash = "#task/mytask" : -1 !== url.indexOf("#task/mychecklist") ? newHash = "#task/trackchecklist" : -1 !== url.indexOf("#selfservice/profile/view-id:") ? newHash = Layout.Page.changeZuidUrl(url.split(":")[1]) : -1 !== url.indexOf("#selfservice/profile/edit-id:") ? newHash = Layout.Page.changeZuidUrl(url.split(":")[1], !0) : -1 !== url.indexOf("#home/dashboard/approval") ? newHash = url.replace("#home/dashboard/approvals", "#approvals/myapproval") : -1 !== url.indexOf("#organization/announcements/") ? newHash = "#announcements/list/view-annId:" + url.split(":")[1] : -1 !== url.indexOf("#admin/accesscontrol/roles") && -1 == url.indexOf("#admin/accesscontrol/roles/listview") && -1 == url.indexOf("#admin/accesscontrol/roles/multiroles") && (newHash = "#admin/accesscontrol/roles/listview")),
        void 0 === newHash || (newHash = "/" + (portalName && null != portalName && "" != portalName ? portalName + ZPeople.CONTEXT : ZPeople.CONTEXT) + newHash,
        Layout.UrlConf.NO_HASH = !0,
        void (window.location.href = newHash))
    },
    changeZuidUrl: function(id, isedit) {
        var newhash;
        if (void 0 !== id) {
            var usrDtl = ZPeople.getUserDetailsById(id, !1, !0);
            void 0 !== usrDtl && void 0 !== usrDtl.usererec && (newhash = usrDtl.usererec !== erecno ? "#selfservice/user/profile-id:" + usrDtl.usererec + (!0 === isedit ? "/edit:true" : "") : "#selfservice/user/profile" + (!0 === isedit ? "-edit:true" : ""))
        }
        return newhash
    },
    getPage: function(isInit) {
        if ("" != window.name && window.parent.postMessage(window.location.href, window.location.origin),
        window.location.hash.indexOf("admin/integration") > -1 && window.location.hash.indexOf("&orgId=") > -1) {
            var hash = window.location.hash.split("&")[0]
              , orgID = window.location.hash.split("=")[1]
              , params = {
                mode: "getPortalNameForZSOID"
            };
            return params.orgID = orgID,
            void ZPeople.Request.send("/marketplaceapi.zp", params, function(resultData) {
                resultData = JSON.parse(resultData);
                var redirectionURL = ""
                  , originalPath = window.location.href;
                originalPath = originalPath.split("&")[0];
                var url = new URL(originalPath);
                redirectionURL += url.origin + "/" + resultData.portalName + url.pathname + hash,
                window.location.href = redirectionURL
            })
        }
        if (window.location.hash.includes("admin/integration/marketplace/installPrivateExtension"))
            ExtensionUtil.init();
        else if (Layout.Page.redirectOldUrlstoNew()) {
            var previousHashDtl = Layout.Page.hashDtl;
            if (Layout.Page.hashDtl = null,
            Layout.UrlConf.validateHash()) {
                if (ZPForm.CURRFORM_PARAM = {},
                Layout.UrlConf.updateHashInformation(),
                Layout.UrlConf.setUrlParams(Layout.Page.hash),
                "/zp" === ZPeople.CONTEXT || "/dev" === ZPeople.CONTEXT) {
                    ZPTabs.checkIsMaintabChanged(previousHashDtl);
                    var isMin = "0" === ZPeople.USER_CUST_SETTINGS.USER_TAB_MINIMIZE
                      , serviceName = Layout.CustomizedUrl.getServiceName();
                    if (Layout.UrlConf.isServiceMode && void 0 === ZPServices.getObjectFormArray(ZPTabs.TAB_JSON, "name", serviceName, !0)) {
                        var service = ZPServices.getObjectFormArray(ZPServices.SERVICE_JSON, "tabName", serviceName, !0);
                        if (void 0 !== service) {
                            if ("onboarding" === serviceName)
                                Layout.CustomizedUrl.refreshTab();
                            else
                                ZPServices.setNewMainTabJSON(service);
                            ZPTabs.construct()
                        }
                    }
                    (Layout.UrlConf.NO_HASH || isInit || ZPTabs.isMainTabChanged || Layout.isRedirectedURL) && (ZPTabs.constructSubtabsBasedOnHash(isInit, void 0, !!isInit || (ZPTabs.isMainTabChanged ? ZPTabs.isMainTabChanged : Layout.isRedirectedURL), isMin),
                    Layout.isRedirectedURL = !1,
                    Layout.UrlConf.NO_HASH = !1)
                }
                Layout.UrlConf.checkValidHash() ? this.showUnavailable() : (ZPTabs.toggleTab(!0),
                Layout.Page.loadComponent(),
                isadmin && "/zp" === ZPeople.CONTEXT && !Layout.Page.UPD_ADV_AN_DASHBOARD_REQ_DONE && (ZPeople.Request.send("/advAnalytics.zp?raction=updateDashboardsList", {}, function(resultData) {
                    Layout.Page.UPD_ADV_AN_DASHBOARD_REQ_DONE = !0,
                    void 0 !== resultData && 1 === resultData[0] && resultData[1] && (ZPeople.ADV_AN_DASHBOARD_REQ_SUCCESS = !0,
                    ZPeople.allAdvAnDashboardsArray = resultData[1])
                }, void 0, function() {
                    Layout.Page.UPD_ADV_AN_DASHBOARD_REQ_DONE = !0
                }),
                MMtemplte.checkAndCreateTokens()))
            }
        } else
            Layout.isRedirectedURL = !0
    },
    showUnavailable: function() {},
    loadComponent: function() {
        var hashDtl = Layout.UrlConf.getHashDetails()
          , modConf = ZPConf.getModuleProperties(Layout.Page.currentmode.split("/")[0]);
        if (ZPUtil.Validation.isEmpty(hashDtl.initJS))
            ZPeople.isZPNewUI() && !Layout.ISDEV && void 0 != modConf && void 0 !== modConf.sourceload && modConf.sourceload.length > 0 ? (ZPLoader.start(ZPLoader.generate(modConf.sourceload, modConf.sourceload ? modConf.sourceload.length : 2, 0, Layout.Page.loadOuter)),
            delete modConf.sourceload) : Layout.Page.loadOuter();
        else {
            var fun = ZPUtil.getFun(hashDtl.initJS);
            ZPUtil.Validation.isFunction(fun) && (ZPeople.isZPNewUI() && !Layout.ISDEV && void 0 != modConf && void 0 !== modConf.sourceload && modConf.sourceload.length > 0 ? (ZPLoader.start(ZPLoader.generate(modConf.sourceload, modConf.sourceload ? modConf.sourceload.length : 2, 0, function() {
                fun(Layout.Page.loadOuter)
            })),
            delete modConf.sourceload) : fun(Layout.Page.loadOuter))
        }
    },
    jsLoadCallback: function() {
        Layout.Page.LOADED_JS--,
        0 === Layout.Page.LOADED_JS && Layout.Page.loadOuter()
    },
    loadOuter: function() {
        var pageContent, isLoad = !1, navHTML = "", hashUrlDtl = Layout.UrlConf.getHashDetails(), tltConf = ZPConf.isThirdLevelTabsEnabled(hashUrlDtl), index = ZPConf.getModulePrefixIndex(), wrapId = null != hashUrlDtl.wrapId ? hashUrlDtl.wrapId : tltConf.isModuleConf || hashUrlDtl.moduleMode ? ZPeople.Module.getModulePrefix(1) : ZPeople.Module.getModulePrefix(index), contWrapId = "zp-contwrap-" + wrapId, pageWrap = $("#page-wrapper").find("#" + contWrapId);
        if ($("body").removeClass("ZPCtip"),
        0 === pageWrap.length ? (pageWrap = $('<div class="cont-wrap" id="' + contWrapId + '">' + navHTML + "</div>"),
        $("#page-wrapper").append(pageWrap),
        isLoad = !0) : navHTML = pageWrap.find(".navbar"),
        tltConf.isEnabled && (isLoad || ZPTabs.isRefreshNeeded(tltConf.isModuleConf, hashUrlDtl)) ? (0 === pageWrap.children(".navbar").length ? pageWrap.prepend('<nav id="zp-tlevel-' + (ZPUtil.Validation.isEmpty(hashUrlDtl.tltmode) ? wrapId : hashUrlDtl.tltmode) + '" class="navbar navbar-default ZPSnav"><div class="container-fluid"><ul class="nav navbar-nav"></ul>' + (ZPeople.Help.isEnabled() ? '<div onclick="ZPeople.Help.show();" class="IC-qus S21 gry CP FR MR5 MT10"></div>' : "") + "</div></nav>") : ZPUtil.Validation.isEmpty(hashUrlDtl.tltmode) || pageWrap.find("nav").find("ul").html(""),
        hashUrlDtl.tlTabs = !0,
        pageWrap.find(".ZPcontwrap").removeClass("dvToppos")) : 0 === pageWrap.find("nav").length || tltConf.isEnabled || (pageWrap.find(".ZPcontwrap").addClass("dvToppos"),
        pageWrap.find("nav.navbar").addClass("DN")),
        Layout.Page.pageContWrapper = pageWrap,
        hashUrlDtl.enableHeader && isLoad && Layout.Page.initializeHeader(hashUrlDtl.enableHeader),
        0 === (pageContent = pageWrap.find("#" + Layout.Page.pageId)).length) {
            var mainClass = "main-wrp";
            -1 !== Layout.Page.hash.indexOf("#services/adminop/appslayout/appslist") || (Layout.UrlConf.isServiceMode || "organization" === ZPTabs.currMainTab) && -1 !== Layout.Page.hash.indexOf("/admin/") ? mainClass = "ZPcontwrap dvToppos" : Layout.Page.isCP && -1 == Layout.Page.hash.indexOf("#admin/organization/holidaycalendar") && -1 == Layout.Page.hash.indexOf("/allowedips") && -1 == Layout.Page.hash.indexOf("/georestriction") && -1 == Layout.Page.hash.indexOf("#admin/organization/companysettings/organizationstructure") && -1 == Layout.Page.hash.indexOf("#admin/formslayout/widgets") && (mainClass = "ZPcontwrap",
            tltConf.isEnabled || (mainClass += " dvToppos")),
            $("#page-wrapper").attr("class", "");
            var paddedSpaceForPlatform = isPlatformOrg ? 'style="left: 200px;"' : "";
            pageContent = $('<div class="' + mainClass + '" id="' + Layout.Page.pageId + '"' + paddedSpaceForPlatform + '><div class="Scrcont' + (void 0 !== hashUrlDtl.scrollClass ? " " + hashUrlDtl.scrollClass : "") + '">' + ZPeople.LOADING_HTML + "</div></div>"),
            pageWrap.append(pageContent),
            isLoad = !0
        }
        -1 === Layout.Page.hash.indexOf("#attendance/settings/regularization") && -1 === Layout.Page.hash.indexOf("#attendance/settings/shiftmapping") && -1 === Layout.Page.hash.indexOf("#attendance/settings/onduty") && -1 === Layout.Page.hash.indexOf("#attendance/settings/permissionsapp") || (pageWrap.find(".ZPcontwrap").removeClass("dvToppos"),
        pageWrap.find("nav.navbar").removeClass("DN")),
        Layout.Page.container = pageContent,
        Layout.Page.parentContainer = pageContent;
        var childPageCont = pageContent.find("#" + Layout.UrlConf.getFullHashPageId());
        hashUrlDtl.moduleMode && 0 === childPageCont.length ? isLoad = !0 : hashUrlDtl.moduleMode && (Layout.Page.container = childPageCont,
        Layout.Page.container.removeClass("DN").siblings().addClass("DN")),
        pageWrap.removeClass("DN").siblings("div").addClass("DN"),
        -1 === Layout.Page.hash.indexOf("#admin/employeerecords") && pageContent.removeClass("DN").siblings("div").addClass("DN"),
        hashUrlDtl.skipPage || (pageWrap.removeClass("DN").siblings("div").addClass("DN"),
        pageContent.removeClass("DN").siblings("div").addClass("DN")),
        "ZPrevwHD" == hashUrlDtl.prependClass ? ($("#review_empinfo").removeClass("DN"),
        0 === $("#review_empinfo:visible").length && ($("#" + contWrapId).prepend('<div class="ZPrevwHD" id="review_empinfo"></div>'),
        void 0 == Layout.Page.urlparam.user && -1 != Layout.Page.hash.indexOf("#performance/myreview") ? Appraisal.myreview_userinfo_construction("myreview", erecno) : 0 == Appraisal.userinfo && Appraisal.myreview_userinfo_construction("myreview", Layout.Page.urlparam.user))) : 0 !== pageContent.length && Layout.Page.call(hashUrlDtl.oncacheload, Layout.Page.container),
        null != ZPeople.OPENMODAL && ($(ZPeople.OPENMODAL).remove(),
        $(".modal-backdrop").remove()),
        null != ZPForm.LAYOUT && void 0 != ZPForm.LAYOUT && ZPForm.LAYOUT.hasClass("in") && ($(ZPForm.LAYOUT).remove(),
        ZPForm.CURRFORM_PARAM = {}),
        tltConf.isEnabled && "" == navHTML ? (ZPTabs.refreshTL = !0,
        hashUrlDtl.tlTabs = !0) : ZPTabs.refreshTL = !1,
        hashUrlDtl.isLoad = isLoad,
        Layout.Page.updateContentPosition(),
        Layout.Page.loadPageOperation()
    },
    initializeHeader: function(headerName) {
        "performance_band" === headerName && Layout.Page.pageContWrapper.prepend('<div class="ZPrevwHD" id="review_empinfo"></div>')
    },
    updateContentPosition: function(className) {
        var hashUrlDtl = Layout.UrlConf.getHashDetails();
        if (void 0 === className) {
            if (Layout.UrlConf.isForm())
                className = (tltConf = ZPConf.isThirdLevelTabsEnabled()).isEnabled || !ZPeople.isZPNewUI() && (-1 !== Layout.Page.hash.indexOf("timetracker/scheduler/jobs") || -1 !== Layout.Page.hash.indexOf("timetracker/scheduler/projects") || -1 !== Layout.Page.hash.indexOf("timetracker/scheduler/clients")) ? "Nbar2 Abar1" : "Nbar5 Abar1";
            else
                className = hashUrlDtl.wrapperClass;
            $("#page-wrapper").attr("class", "")
        }
        $("#page-wrapper").attr("class", className);
        var tltConf = ZPConf.isThirdLevelTabsEnabled();
        if (Layout.Page.moduleenabled && tltConf.isEnabled) {
            Layout.Page.container.find(".Scrcont").css("top", "");
            var top = parseInt(Layout.Page.container.find(".Scrcont").css("top")) - 40;
            top > 0 && Layout.Page.container.find(".Scrcont").css("top", top + "px")
        }
        void 0 !== hashUrlDtl.bodyClass && $("body").addClass(hashUrlDtl.bodyClass)
    },
    loadPageOperation: function() {
        var hashUrlDtl = Layout.UrlConf.getHashDetails()
          , tltConf = ZPConf.isThirdLevelTabsEnabled()
          , tlParams = null
          , modParam = ZPeople.Module.getInitModuleParams(hashUrlDtl);
        if ((hashUrlDtl.tlTabs || ZPTabs.refreshTL) && !0 !== Layout.Page.moduleenabled && (delete hashUrlDtl.tlTabs,
        tlParams = ZPTabs.getThirdLevelTabParams(tltConf.isModuleConf, hashUrlDtl),
        $("#zp-tlevel-" + tlParams.submode).find("ul").html(""),
        ZPTabs.refreshTL && (tlParams = ZPTabs.refreshThirdLevelTabs(tlParams)),
        ZPTabs.refreshTL = !1),
        null == tlParams && null === modParam)
            Layout.Page.loadPage(hashUrlDtl.isLoad, hashUrlDtl);
        else {
            var params = {
                mode: "initpage"
            };
            null !== modParam && (params.initmodule = JSON.stringify(modParam)),
            null !== tlParams && (params.tltab = JSON.stringify(tlParams)),
            ZPeople.Request.send("/gettabdetails.zp", params, function(result) {
                void 0 !== result.initmodule && ZPeople.Module.setUpModuleResponse(result.initmodule, modParam),
                void 0 !== result.tltabs && ZPTabs.showThirdLevelTabs(result.tltabs, tlParams),
                $("div#zpinitloading").length > 0 && (Layout.isZohoOne && void 0 != Layout.zOneLibUrl && ZPeople.UnifiedUI.isAvailable() && (ZPeople.UnifiedUI.init(),
                CrmPlusImpl.updateUiReady(),
                CrmPlusImpl.setBrowserTitle()),
                $("div#zpinitloading").remove()),
                Layout.Page.loadPage(hashUrlDtl.isLoad, hashUrlDtl)
            })
        }
    },
    HTML_DATA: {},
    loadParentPage: function(hashDtl, isLoad) {
        void 0 !== hashDtl && Layout.Page.loadPage(isLoad, hashDtl)
    },
    loadPage: function(isLoad, hashUrlDtl, isParentLoaded) {
        if (void 0 === hashUrlDtl && (hashUrlDtl = Layout.UrlConf.getHashDetails()),
        void 0 !== hashUrlDtl.initParent) {
            if (!0 !== $("#" + Layout.Page.pageId).data().loaded) {
                var parentHashDtl = Layout.UrlConf.getHashDetails(hashUrlDtl.initParent);
                return parentHashDtl.currentChildHashDtl = hashUrlDtl,
                parentHashDtl.hash = hashUrlDtl.hash,
                void Layout.Page.loadParentPage(parentHashDtl, !0)
            }
            var childrenCont = Layout.Page.parentContainer.find("#" + Layout.UrlConf.getHashDetails(hashUrlDtl.initParent).childrenContainer).find("#" + Layout.UrlConf.getFullHashPageId());
            0 === childrenCont.length && (isLoad = !0),
            childrenCont.removeClass("DN").siblings().addClass("DN")
        }
        if (ZPUtil.Validation.isEmpty(hashUrlDtl.url) || hashUrlDtl.skipPage)
            Layout.Page.handleResponse(hashUrlDtl, isLoad, void 0, isParentLoaded);
        else if (isLoad && void 0 === Layout.Page.HTML_DATA[hashUrlDtl.url]) {
            if (isLoad && void 0 !== Layout.Page.multiPageTemplate[hashUrlDtl.url] && hashUrlDtl.multipage) {
                var pageData = Layout.Page.multiPageTemplate[hashUrlDtl.url];
                Layout.Page.handleResponse(hashUrlDtl, isLoad, pageData)
            } else if (isLoad) {
                var params = {
                    conreqcsr: csrfToken
                };
                $.post(hashUrlDtl.url, params, function(resultData) {
                    if (hashUrlDtl.hash !== Layout.Page.currentmode) {
                        var url = this.url.split("/");
                        return url = url.length > 0 ? "/" + url[url.length - 1] : this.url,
                        void (Layout.Page.HTML_DATA[url] = resultData)
                    }
                    Layout.Page.handleResponse(hashUrlDtl, isLoad, resultData, isParentLoaded)
                })
            }
        } else
            void 0 !== Layout.Page.HTML_DATA[hashUrlDtl.url] && (Layout.Page.removeLoading(),
            Layout.Page.container.append(Layout.Page.HTML_DATA[hashUrlDtl.url]),
            delete Layout.Page.HTML_DATA[hashUrlDtl.url]),
            Layout.Page.callbackForPage(hashUrlDtl, !0);
        ZPTabs.toggleTab(!0)
    },
    handleResponse: function(hashUrlDtl, isLoad, resultData, isParentLoaded) {
        if (hashUrlDtl.initParent && hashUrlDtl.hash === Layout.Page.currentmode) {
            var childrenCont = Layout.Page.parentContainer.find("#" + Layout.UrlConf.getHashDetails(hashUrlDtl.initParent).childrenContainer);
            Layout.Page.container = childrenCont.find("#" + Layout.UrlConf.getFullHashPageId()),
            0 === Layout.Page.container.length && (Layout.Page.container = $("<div id='" + Layout.UrlConf.getFullHashPageId() + "' " + (void 0 !== hashUrlDtl.className ? 'class="' + hashUrlDtl.className + '"' : "") + ">" + (ZPUtil.Validation.isEmpty(resultData) ? "" : resultData) + "</div>"),
            childrenCont.append(Layout.Page.container)),
            Layout.Page.container.removeClass("DN").siblings("div").addClass("DN")
        } else
            Layout.Page.removeLoading(),
            Layout.Page.container.append(ZPUtil.Validation.isEmpty(resultData) ? "" : resultData).data({
                loaded: !0
            });
        if (!ZPUtil.Validation.isEmpty(resultData) && -1 != resultData.indexOf("IAM_SECURITY_ERROR"))
            return Layout.Page.container.addClass("dvToppos"),
            void ($("div#zpinitloading").length > 0 && $("div#zpinitloading").remove());
        ZPUtil.Validation.isEmpty(resultData) || !hashUrlDtl.multipage && hashUrlDtl.hash === Layout.Page.currentmode || (Layout.Page.multiPageTemplate[hashUrlDtl.url] = resultData),
        isLoad && void 0 != hashUrlDtl.initialCallback && hashUrlDtl.hash === Layout.Page.currentmode && Layout.Page.call(hashUrlDtl.initialCallback),
        hashUrlDtl.hash !== Layout.Page.currentmode || isParentLoaded || (ziaPeople.ziaMinimizeChat(),
        Layout.Page.callbackForPage(hashUrlDtl)),
        void 0 !== hashUrlDtl.currentChildHashDtl && Layout.Page.loadPage(isLoad, hashUrlDtl.currentChildHashDtl, !0)
    },
    callbackForPage: function(hashUrlDtl, isCache) {
        try {
            if (Layout.Page.updateContentPosition(),
            "/zp" === ZPeople.CONTEXT && Layout.Page.pageContWrapper.find("[id^=zp-tlevel-]").length > 0 && Layout.Page.pageContWrapper.find("[id^=zp-tlevel-]").find("#zp_pin_tab").remove(),
            hashUrlDtl.initParent && hashUrlDtl.hash === Layout.Page.currentmode) {
                var childrenCont = Layout.Page.parentContainer.find("#" + Layout.UrlConf.getHashDetails(hashUrlDtl.initParent).childrenContainer);
                Layout.Page.container = childrenCont.find("#" + Layout.UrlConf.getFullHashPageId())
            }
            void 0 != hashUrlDtl.fireScrollCallback && ZPeople.FireScroll.init(ZPUtil.getFun(hashUrlDtl.fireScrollCallback)),
            hashUrlDtl.skipUrlUpdate || ZPTabs.updateParentTabUrl(),
            hashUrlDtl.hash !== Layout.Page.currentmode || hashUrlDtl.disableCallback && (!hashUrlDtl.disableCallback || isCache) || Layout.Page.call(hashUrlDtl.callback)
        } catch (e) {}
        $("div#zpinitloading").length > 0 && (Layout.isZohoOne && void 0 != Layout.zOneLibUrl && ZPeople.UnifiedUI.isAvailable() && (ZPeople.UnifiedUI.init(),
        CrmPlusImpl.updateUiReady(),
        CrmPlusImpl.setBrowserTitle()),
        $("div#zpinitloading").remove())
    },
    removeLoading: function() {
        Layout.Page.container.find("#zp_page_loading").parent().remove()
    },
    call: function(fun, param1) {
        fun = ZPUtil.getFun(fun),
        ZPUtil.Validation.isFunction(fun) && fun(param1)
    },
    isChildLoaded: function() {
        return !ZPUtil.Validation.isEmpty(Layout.Page.hashDtl.initParent) && Layout.Page.parentContainer.find("#" + Layout.UrlConf.getHashDetails(Layout.Page.hashDtl.initParent).childrenContainer).find("#" + Layout.UrlConf.getFullHashPageId()).length > 0
    }
},
Layout.CustomizedUrl = {
    getNewCustomizedUrl: function(url, formId) {
        var serviceName = Layout.CustomizedUrl.getServiceName();
        return "generalsettings" == url && void 0 == formId && "onboarding" == serviceName ? "#onboarding/settings/generalsettings" : "generalsettings" == url && void 0 == formId && serviceName == Compensation.CONSTANTS.SERVICENAME ? "#" + Compensation.CONSTANTS.SERVICENAME + "/salarysettings/generalsettings" : void 0 !== serviceName ? "#" + serviceName + "/" + url + (void 0 !== formId ? "-formid:" + formId : "") : "#" + url
    },
    getServiceName: function() {
        if ("/zp" === ZPeople.CONTEXT && Layout.CustomizedUrl.isService())
            return Layout.Page.currentmode.split("/")[0]
    },
    isService: function() {
        return Layout.UrlConf.isServiceMode || Layout.UrlConf.isSystemService
    },
    setServiceData: function() {
        ZPServices.SERVICE_JSON = [],
        Layout.UrlConf.SERVICE_MODULE = [],
        $.ajax({
            url: "/services.zp",
            type: "POST",
            data: {
                mode: "list",
                conreqcsr: csrfToken
            },
            success: function(data) {
                ZPServices.SERVICE_JSON = data.list,
                Layout.CustomizedUrl.setServiceVariable()
            }
        })
    },
    setServiceVariable: function() {
        if (ZPServices.SERVICE_JSON && ZPServices.SERVICE_JSON.length > 0) {
            var systemService = ["organization", "timetracker", "leavetracker", "attendance", "files", "performance", "announcements", "hrcase", "officereadiness"];
            $.each(ZPServices.SERVICE_JSON, function(index, service) {
                ZPUtil.checkIsExistInArray(systemService, service.tabName.toLowerCase()) || Layout.UrlConf.SERVICE_MODULE.push(service.tabName.toLowerCase())
            })
        }
    },
    refreshService: function() {
        "/zp" === ZPeople.CONTEXT && (this.setServiceData(),
        this.refreshTab())
    },
    refreshTab: function(refreshSubTabs) {
        let currMainTab = ZPTabs.currMainTab;
        ZPeople.Request.send("/gettabdetails.zp", {
            mode: "maintabs"
        }, function(data) {
            void 0 != data.tabs && (ZPTabs.TAB_JSON = data.tabs,
            ZPServices.ISTASKTABACTIVE = data.isTasktabActive,
            ZPTabs.construct(),
            refreshSubTabs && ZPTabs.constructSubtabsBasedOnHash(!1, currMainTab))
        })
    }
};
var _acsop = /opera|opera 5|opera\/5/i.test(navigator.userAgent)
  , _acsie = !_acsop && /msie/i.test(navigator.userAgent)
  , _acsextn = ".acs"
  , _acscontext = ""
  , AcsApi = {
    NotificationTypes: {
        ALL: 1,
        ATMENTIONED: 2,
        FLAGGED: 3,
        PROJECTBASED: 4
    }
}
  , AcsCallBack = {};
if (void 0 == AcsResource)
    var AcsResource = {};
function Activity(jsonobj) {
    this._jobj = jsonobj;
    var commentarr = jsonobj.comments;
    if (this.comments = new Array,
    void 0 != commentarr)
        for (var acroverride = void 0 !== window[this._jobj.prd].Comment, i = commentarr.length - 1; i >= 0; i--)
            acroverride ? this.comments.push(new window[this._jobj.prd].Comment(new Comment(commentarr[i]))) : this.comments.push(new Comment(commentarr[i]));
    this.getAOwner = function() {
        return this._jobj.aowner
    }
    ,
    this.getLAOwner = function() {
        return this._jobj.laowner
    }
    ,
    this.getASUsers = function() {
        return this._jobj.asusers
    }
    ,
    this.getCFUsers = function() {
        return this._jobj.cfusers
    }
    ,
    this.getLAType = function() {
        return this._jobj.latype
    }
    ,
    this.getLATitle = function(sfx, onlyDefaultValue) {
        if (void 0 != this._jobj.latitle)
            return AcsApi.localizeI18NString(this._jobj.latitle, this._jobj.prd, sfx, onlyDefaultValue)
    }
    ,
    this.getPrd = function() {
        return this._jobj.prd
    }
    ,
    this.getAccFrom = function() {
        return this._jobj.accFrom
    }
    ,
    this.isAccFromMobile = function() {
        return void 0 != this._jobj.accFrom && ("IOS" == this._jobj.accFrom || "AND" == this._jobj.accFrom)
    }
    ,
    this.isPrivate = function() {
        return this._jobj.private
    }
    ,
    this.getFDK = function() {
        return this._jobj.fdk
    }
    ,
    this.getSkey = function() {
        return this._jobj.skey
    }
    ,
    this.getTitle = function(sfx, onlyDefaultValue) {
        return AcsApi.localizeI18NString(this._jobj.title, this._jobj.prd, sfx, onlyDefaultValue)
    }
    ,
    this.getType = function() {
        return this._jobj.type
    }
    ,
    this.getContent = function() {
        return this._jobj.contents
    }
    ,
    this.getTime = function() {
        return this._jobj.time
    }
    ,
    this.getTotalComments = function() {
        return this._jobj.tccount
    }
    ,
    this.getPoll = function() {
        return this._jobj.poll
    }
    ,
    this.getPollResult = function() {
        return this._jobj.pollresult
    }
    ,
    this.hasLikes = function() {
        try {
            return void 0 != this._jobj.poll.LIKE.like
        } catch (e) {
            return !1
        }
    }
    ,
    this.getLikesCount = function() {
        try {
            return this._jobj.pollresult.LIKE.like
        } catch (e) {}
        return 0
    }
    ,
    this.getComments = function() {
        return this.comments
    }
    ,
    this.getCMore = function() {
        return this._jobj.cmore
    }
    ,
    this.getAdditionalProperty = function(key) {
        return this._jobj["ap_" + key]
    }
    ,
    this.getAdditionalPropertyStartsWith = function(startswith) {
        var obj = {};
        for (var key in this._jobj)
            0 == key.indexOf("ap_" + startswith) && (obj[key.replace("ap_", "")] = this._jobj[key]);
        return obj
    }
}
function ACSActivityException(prd, errobj) {
    this._prd = prd,
    this._err = errobj,
    this.getErrorTitle = function() {
        if (void 0 != this._err.title)
            return AcsApi.localizeI18NString(this._err.title, this._prd)
    }
    ,
    this.getErrorMessage = function() {
        if (void 0 != this._err.message)
            return AcsApi.localizeI18NString(this._err.message, this._prd)
    }
    ,
    this.getAdditionalProperty = function(key) {
        return this._err["ap_" + key]
    }
}
function Comment(commentjson) {
    this._cmt = commentjson,
    this.getType = function() {
        return this._cmt.type
    }
    ,
    this.getAccFrom = function() {
        return this._cmt.accFrom
    }
    ,
    this.isAccFromMobile = function() {
        return void 0 != this._cmt.accFrom && ("IOS" == this._cmt.accFrom || "AND" == this._cmt.accFrom)
    }
    ,
    this.getCkey = function() {
        return this._cmt.ckey
    }
    ,
    this.getCFDK = function() {
        return this._cmt.cfdk
    }
    ,
    this.getAt = function() {
        return this._cmt.at
    }
    ,
    this.getContent = function() {
        return this._cmt.contents
    }
    ,
    this.getPostedBy = function() {
        return this._cmt.by
    }
    ,
    this.getAdditionalProperty = function(key) {
        return this._cmt["ap." + key]
    }
}
function UnsNotification(ntfnjson, prd) {
    this.prd = prd,
    this._ntfn = ntfnjson,
    this.getType = function() {
        return this._ntfn.type
    }
    ,
    this.getActionOwner = function() {
        return this._ntfn.aowner
    }
    ,
    this.getRepeatCount = function() {
        return this._ntfn.repCount
    }
    ,
    this.getRepeatUsers = function() {
        return this._ntfn.repUsers
    }
    ,
    this.getTime = function() {
        return this._ntfn.time
    }
    ,
    this.getSublist = function() {
        for (var list = this._ntfn.sublist || [], subListObjArray = [], i = 0, len = list.length; i < len; i++)
            subListObjArray.push(new UnsNotification(list[i],this.prd));
        return subListObjArray
    }
    ,
    this.isNew = function() {
        return void 0 != this._ntfn.isNew && this._ntfn.isNew
    }
    ,
    this.getAccFrom = function() {
        return this._ntfn.accFrom
    }
    ,
    this.isAccFromMobile = function() {
        return void 0 != this._ntfn.accFrom && ("IOS" == this._ntfn.accFrom || "AND" == this._ntfn.accFrom)
    }
    ,
    this.getInfo = function(sfx, onlyDefaultValue) {
        return AcsApi.localizeI18NString(this._ntfn.info, this.prd, sfx, onlyDefaultValue)
    }
    ,
    this.getAdditionalProperty = function(key) {
        return this._ntfn["ap_" + key]
    }
    ,
    this.getSkey = function() {
        return this._ntfn.skey
    }
    ,
    this.getProperty = function(key) {
        return this._ntfn[this.getType() + "." + key]
    }
}
function PollResult(pjson) {
    this._presult = pjson,
    this.getFDK = function() {
        return this._presult.fdk
    }
    ,
    this.getType = function() {
        return this._presult.type
    }
    ,
    this.getPrd = function() {
        return this._presult.prd
    }
    ,
    this.getPollName = function() {
        return this._presult.poll
    }
    ,
    this.getVotes = function() {
        return this._presult.votes
    }
}
function AcsConnect() {}
AcsApi.isMobile = function() {
    try {
        if (navigator && navigator.userAgent)
            return navigator.userAgent.match(/iphone|ipod|iphone/i) || navigator.userAgent.match(/Android/i)
    } catch (e) {
        return !1
    }
}
,
AcsApi.init = function(prd, csrfParam, csrfCookieName) {
    AcsApi.renderProgressive = !0,
    AcsApi.viewlist = new Object,
    AcsResource.init(),
    AcsApi.prd = prd,
    AcsApi.csrfParam = csrfParam,
    AcsApi.csrfCookieName = csrfCookieName,
    AcsApi.isMobile() && (AcsApi.renderProgressive = !1)
}
,
AcsApi.getCSRF = function() {
    return AcsApi.csrfParam + "=" + AcsUtil.Cookie.getCustomCookie(AcsApi.csrfCookieName)
}
,
AcsApi.getCkey = function() {
    return void 0 != AcsApi.ckey ? AcsApi.ckey : (void 0 != AcsUtil.getPrd() && (AcsApi.ckey = AcsUtil.getPrd() + "_DNFY"),
    AcsApi.ckey)
}
,
AcsApi.handleServerUP = function() {
    for (viewKey in AcsDesktopNotification.isOwner() && AcsDesktopNotification.setOwnerCookie(AcsApi.getCkey(), AcsUtil.getRawSid(), 1e4),
    AcsApi.viewlist)
        AcsApi.autoCorrect(viewKey);
    try {
        window[AcsApi.prd].onAcsConnect()
    } catch (e) {}
}
,
AcsApi.handleServerDown = function() {
    try {
        window[AcsApi.prd].onAcsDisconnect()
    } catch (e) {}
}
,
AcsApi.initStream = function(prd, viewkey, count) {
    var params = "viewkey=" + encodeURIComponent(viewkey)
      , att = {
        viewkey: viewkey,
        prd: prd
    };
    void 0 != count && (params = params + "&count=" + count),
    AcsApi.renderProgressive ? (params += "&progressive=true",
    AcsConnect.httpProgressive("initprogressivestream", _acscontext + "/viewdata" + _acsextn, params, att)) : AcsConnect.httpPost("initstream", _acscontext + "/viewdata" + _acsextn, params, att)
}
,
AcsApi.getComments = function(viewkey, skey, fdk, cmore, count, satt) {
    var params = "viewkey=" + encodeURIComponent(viewkey) + "&skey=" + encodeURIComponent(skey) + "&fdk=" + encodeURIComponent(fdk) + "&cmore=" + encodeURIComponent(cmore)
      , att = {
        viewkey: viewkey,
        skey: skey,
        fdk: fdk,
        cmore: cmore,
        satt: satt
    };
    void 0 != count && (params = params + "&count=" + count),
    AcsConnect.httpPost("getcomments", _acscontext + "/getcomment" + _acsextn, params, att)
}
,
AcsApi.showMore = function(prd, viewkey, count) {
    if (void 0 == AcsApi.viewlist[viewkey])
        throw new Error("ViewKey not initialized, Call initStream");
    var morekey = AcsApi.viewlist[viewkey].morekey;
    if (void 0 == morekey)
        throw new Error("No data available in the server for this view Key");
    var params = "viewkey=" + encodeURIComponent(viewkey) + "&morekey=" + encodeURIComponent(morekey);
    void 0 != count && (params = params + "&count=" + count);
    var att = {
        viewkey: viewkey,
        prd: prd
    };
    AcsApi.renderProgressive ? (params += "&progressive=true",
    AcsConnect.httpProgressive("showmoreprogressive", _acscontext + "/smdata" + _acsextn, params, att)) : AcsConnect.httpPost("showmore", _acscontext + "/smdata" + _acsextn, params, att)
}
,
AcsApi.isMoreAvailable = function(viewkey) {
    try {
        return void 0 != AcsApi.viewlist[viewkey].morekey
    } catch (e) {
        return !0
    }
}
,
AcsApi.autoCorrect = function(viewkey) {
    if (void 0 != viewkey) {
        var skey = AcsApi.viewlist[viewkey].skey;
        if (void 0 != skey) {
            var params = "viewkey=" + encodeURIComponent(viewkey) + "&skey=" + encodeURIComponent(skey) + "&count=25"
              , att = {
                viewkey: viewkey,
                prd: AcsApi.viewlist[viewkey].prd
            };
            AcsConnect.httpPost("autocorrect", _acscontext + "/autocorrect" + _acsextn, params, att)
        }
    }
}
,
AcsApi.timeline = function(prd, viewkey, count, name, start, end, morekey) {
    if (void 0 != viewkey) {
        var params = "viewkey=" + encodeURIComponent(viewkey) + "&count=" + count
          , att = {
            viewkey: viewkey,
            prd: prd,
            name: name
        };
        void 0 != start && (params = params + "&start=" + start,
        att.start = start),
        void 0 != end && (params = params + "&end=" + end,
        att.end = end),
        void 0 != morekey && (params = params + "&skey=" + encodeURIComponent(morekey)),
        AcsConnect.httpPost("timeline", _acscontext + "/timeline" + _acsextn, params, att)
    }
}
,
AcsApi.getBadgeCount = function(nfchannel, smsg) {
    if (void 0 != nfchannel) {
        var params = "nfchannel=" + encodeURIComponent(nfchannel)
          , att = {};
        void 0 != smsg && (att.smsg = smsg),
        AcsConnect.httpPost("getbadge", _acscontext + "/getbadge" + _acsextn, params, att)
    }
}
,
AcsApi.getCrossProductBadgeCount = function(smsg) {
    var att = {};
    void 0 != smsg && (att.smsg = smsg),
    AcsConnect.httpPost("getcpnbadge", _acscontext + "/getcpnbadge" + _acsextn, "nfchannel=CPN", att)
}
,
AcsApi.getNotificationList = function(nfchannel, count, morekey, fetchMode, lbrtime, sublist, notificationType, scopeid) {
    if (void 0 != nfchannel) {
        void 0 == count && (count = "30");
        var params = "nfchannel=" + encodeURIComponent(nfchannel) + "&count=" + count
          , isMention = !1
          , isFlag = !1
          , isScoped = !1
          , att = {};
        fetchMode && (att.renderType = fetchMode),
        void 0 != morekey && (att.renderType = "more",
        params = params + "&morekey=" + encodeURIComponent(morekey),
        void 0 != lbrtime && (params = params + "&lbrtime=" + lbrtime)),
        void 0 != sublist && (params = params + "&sublist=" + sublist),
        notificationType == AcsApi.NotificationTypes.ATMENTIONED ? isMention = !0 : notificationType == AcsApi.NotificationTypes.FLAGGED ? isFlag = !0 : notificationType == AcsApi.NotificationTypes.PROJECTBASED && (isScoped = !0),
        params = params + "&ismentioned=" + isMention + "&isflaged=" + isFlag + "&isscoped=" + isScoped,
        void 0 != scopeid && (params = params + "&scope=" + scopeid),
        AcsConnect.httpPost("getntfnlist", _acscontext + "/getntfnlist" + _acsextn, params, att)
    }
}
,
AcsApi.getUnReadNotificationList = function(nfchannel, count, morekey, fetchMode, lbrtime, sublist, notificationType, scopeid) {
    if (void 0 != nfchannel) {
        void 0 == count && (count = "30");
        var params = "nfchannel=" + encodeURIComponent(nfchannel) + "&count=" + count
          , isMention = !1
          , isFlag = !1
          , isScoped = !1
          , att = {};
        fetchMode && (att.renderType = fetchMode),
        void 0 != morekey && (att.renderType = "more",
        params = params + "&morekey=" + encodeURIComponent(morekey),
        void 0 != lbrtime && (params = params + "&lbrtime=" + lbrtime)),
        void 0 != sublist && (params = params + "&sublist=" + sublist),
        notificationType == AcsApi.NotificationTypes.ATMENTIONED ? isMention = !0 : notificationType == AcsApi.NotificationTypes.FLAGGED ? isFlag = !0 : notificationType == AcsApi.NotificationTypes.PROJECTBASED && (isScoped = !0),
        params = params + "&ismentioned=" + isMention + "&isflaged=" + isFlag + "&isscoped=" + isScoped + "&isunread=" + !0,
        void 0 != scopeid && (params = params + "&scope=" + scopeid),
        AcsConnect.httpPost("getntfnlist", _acscontext + "/getntfnlist" + _acsextn, params, att)
    }
}
,
AcsApi.resetBadgeCount = function(nfchannel) {
    if (void 0 != nfchannel) {
        var params = "nfchannel=" + encodeURIComponent(nfchannel);
        AcsConnect.httpPost("resetbadge", _acscontext + "/resetbadge" + _acsextn, params)
    }
}
,
AcsApi.invoke = function(prd, viewkey, fdk, type, action, data, formObj) {
    var att = {
        viewkey: viewkey,
        prd: prd,
        fdk: fdk,
        type: type,
        action: action
    };
    if (void 0 != formObj) {
        formObj.action = _acscontext + "/invoke" + _acsextn,
        formObj.target = "acsif_" + fdk;
        var d, ifObj = document.createElement("IFRAME");
        for (var k in ifObj.name = "acsif_" + fdk,
        ifObj.style.display = "none",
        ifObj.onload = function() {
            AcsConnect.handleHttpPost("invoke", this.contentWindow.document.body.innerHTML, att)
        }
        ,
        att.restype = "html",
        att) {
            var input = document.createElement("INPUT");
            input.type = "hidden",
            input.name = k,
            input.value = att[k],
            formObj.appendChild(input)
        }
        formObj.appendChild(ifObj),
        (d = document.createElement("INPUT")).type = "hidden",
        d.name = "data",
        d.value = JSON.stringify(data),
        formObj.appendChild(d),
        (d = document.createElement("INPUT")).type = "hidden",
        d.name = AcsApi.csrfParam,
        d.value = AcsUtil.Cookie.getCustomCookie(AcsApi.csrfCookieName),
        formObj.appendChild(d),
        formObj.submit()
    } else {
        var params = "restype=json&type=" + type + "&fdk=" + encodeURIComponent(fdk) + "&action=" + action + "&data=" + encodeURIComponent(JSON.stringify(data));
        AcsConnect.httpPost("invoke", _acscontext + "/invoke" + _acsextn, params, att)
    }
}
,
AcsApi.handlePush = function(type, data) {
    var module = data.module
      , uns = data.uns
      , cpn = data.cpn;
    if (void 0 != uns)
        if (uns.ntfn)
            try {
                var unsNtfn = new UnsNotification(uns.ntfn,uns.prd);
                AcsCallBack.handleNotification(uns.prd, uns.badgeCount, unsNtfn)
            } catch (e) {}
        else
            AcsCallBack.handleNotification(uns.prd, uns.badgeCount);
    if (void 0 != cpn)
        try {
            AcsCallBack.handleCrossProductNotification(cpn.prd, cpn.origin, cpn.badgeCount)
        } catch (e) {}
    if ("acs" == module)
        for (var viewkey in data.viewlist)
            AcsCallBack.handlePushActivity(viewkey, data.viewlist[viewkey], data.activity);
    else if ("poll" == module)
        try {
            for (var viewkey in AcsCallBack.handlePushPollResult(void 0, void 0, data.pollresult),
            data.viewlist)
                AcsCallBack.handlePushPollResult(viewkey, data.viewlist[viewkey], data.pollresult)
        } catch (e) {}
    else if ("delete" == module)
        for (var viewkey in data.viewlist)
            AcsCallBack.handlePushDelete(viewkey, data.viewlist[viewkey], data.deldetails)
}
,
AcsApi.handleCallBack = function(id, data, att) {
    try {
        switch (id) {
        case "initstream":
            AcsCallBack.handleInitStream(att.prd, att.viewkey, data.skey, data.morekey, data.sno, data.list);
            break;
        case "showmore":
            AcsCallBack.handleShowMore(att.prd, att.viewkey, data.morekey, data.list);
            break;
        case "autocorrect":
            AcsCallBack.handleAutoCorrect(att.prd, att.viewkey, data.skey, data.sno, data.list, data.reset, data.morekey);
            break;
        case "timeline":
            AcsCallBack.handleTimeline(att.prd, att.viewkey, att.name, att.start, att.end, data.list, data.morekey);
            break;
        case "getbadge":
            AcsCallBack.handleNotification(data.prd, data.uns, void 0, att.smsg);
            break;
        case "getcpnbadge":
            for (c in data.cpn)
                AcsCallBack.handleCrossProductNotification(data.prd, data.cpn[c].origin, data.cpn[c], att.smsg);
            break;
        case "getntfnlist":
            AcsCallBack.handleNotificationList(data.prd, data.ntfnlist, data.nfchannel, data.ntfnbadge, att.renderType, data.reset, data.morekey, data.lbrtime, data.ntfntype, data.isunread);
            break;
        case "resetbadge":
            AcsCallBack.handleNotification(data.prd, data.uns);
            break;
        case "invoke":
            AcsCallBack.handleInvoke(att.viewkey, att.prd, att.fdk, att.type, att.action, data);
            break;
        case "getcomments":
            AcsCallBack.handleGetComments(att.viewkey, data.fdk, data.cmore, data.prd, data.type, data.comments, data.tccount, att.satt)
        }
    } catch (e) {
        throw e
    }
}
,
AcsApi.handleCallBackError = function(id, expData, att) {
    try {
        var aae = new ACSActivityException(att.prd,expData);
        switch (id) {
        case "invoke":
            AcsCallBack.handleInvokeError(att.viewkey, att.prd, att.fdk, att.type, att.action, aae)
        }
    } catch (e) {
        throw e
    }
}
,
AcsApi.handleProgressiveCallBack = function(init, type, id, data, att) {
    try {
        switch (id) {
        case "initprogressivestream":
            if ("chunk" == type) {
                var ck = data;
                AcsCallBack.handleInitProgressiveStream(init, att.prd, att.viewkey, ck.chunk, ck.data)
            } else if ("full" == type)
                for (var i = 0; i < data.length; i++) {
                    ck = data[i];
                    AcsCallBack.handleInitProgressiveStream(0 == i, att.prd, att.viewkey, ck.chunk, ck.data)
                }
            break;
        case "showmoreprogressive":
            if ("chunk" == type) {
                ck = data;
                AcsCallBack.handleShowMoreProgressive(init, att.prd, att.viewkey, ck.chunk, ck.data)
            } else if ("full" == type)
                for (i = 0; i < data.length; i++) {
                    ck = data[i];
                    AcsCallBack.handleShowMoreProgressive(0 == i, att.prd, att.viewkey, ck.chunk, ck.data)
                }
        }
    } catch (e) {
        throw e
    }
}
,
AcsApi.localizeString = function(str, params) {
    return AcsResource.getRealValue(str, params)
}
,
AcsApi.localizeI18NString = function(jsonstr, prd, sfx, onlyDefaultValue) {
    try {
        sfx = void 0 == sfx ? "" : sfx;
        var replaceModifiedValues = !0;
        void 0 != onlyDefaultValue && 1 == onlyDefaultValue && (replaceModifiedValues = !1);
        var obj = jsonstr;
        "string" == typeof jsonstr && (obj = JSON.parse(jsonstr));
        var iprops = obj.iprops
          , params = new Array
          , count = 0;
        for (d in iprops)
            if ("object" == typeof iprops[d]) {
                var fvalue = iprops[d].defaultvalue;
                if (replaceModifiedValues) {
                    var mvalue = window[prd].I18NString.getString(iprops[d].type, iprops[d].props);
                    "" != mvalue && void 0 != mvalue && (fvalue = mvalue)
                }
                params[count++] = fvalue
            }
        return AcsResource.getRealValue(obj.istr + sfx, params)
    } catch (e) {}
    return jsonstr
}
,
AcsApi.setLocale = function(lang, rebrand) {
    AcsResource.fetchResource(lang, rebrand)
}
,
AcsCallBack.handleInitProgressiveStream = function(init, prd, viewkey, chunk, data) {
    if (init)
        try {
            window[prd]._View.init(viewkey)
        } catch (e) {}
    if (void 0 != chunk)
        if ("seq" == chunk)
            try {
                var acs_activity = new Activity(data)
                  , activity = void 0 !== window[acs_activity.getPrd()].Activity ? new (window[acs_activity.getPrd()].Activity)(acs_activity) : acs_activity;
                window[acs_activity.getPrd()][acs_activity.getType()].render("initstream", viewkey, activity, !0)
            } catch (e) {}
        else if ("meta" == chunk) {
            var viewObj = {
                morekey: data.morekey,
                skey: data.skey,
                sno: data.sno,
                prd: prd
            };
            if (AcsApi.viewlist[viewkey] = viewObj,
            "0" == data.size) {
                try {
                    window[prd]._View.nodata(viewkey)
                } catch (e) {}
                return
            }
            try {
                window[prd]._View.completed(viewkey, data.size)
            } catch (e) {}
        }
}
,
AcsCallBack.handleInitStream = function(prd, viewkey, skey, morekey, sno, list) {
    var viewObj = {
        morekey: morekey,
        skey: skey,
        sno: sno,
        prd: prd
    };
    AcsApi.viewlist[viewkey] = viewObj;
    try {
        window[prd]._View.init(viewkey)
    } catch (e) {}
    if (0 != list.length) {
        for (var i = 0; i < list.length; i++)
            try {
                var acs_activity = new Activity(list[i])
                  , activity = void 0 !== window[acs_activity.getPrd()].Activity ? new (window[acs_activity.getPrd()].Activity)(acs_activity) : acs_activity;
                window[acs_activity.getPrd()][acs_activity.getType()].render("initstream", viewkey, activity, !0)
            } catch (e) {}
        try {
            window[prd]._View.completed(viewkey, list.length)
        } catch (e) {}
    } else
        try {
            window[prd]._View.nodata(viewkey)
        } catch (e) {}
}
,
AcsCallBack.handleGetComments = function(viewkey, fdk, cmore, prd, type, commentsarr, tccount, satt) {
    for (var carr = new Array, acroverride = void 0 !== window[prd].Comment, i = commentsarr.length - 1; i >= 0; i--)
        acroverride ? carr.push(new window[prd].Comment(new Comment(commentsarr[i]))) : carr.push(new Comment(commentsarr[i]));
    window[prd][type].renderComments(viewkey, fdk, cmore, carr, tccount, satt)
}
,
AcsCallBack.handleShowMoreProgressive = function(init, prd, viewkey, chunk, data) {
    if (init)
        try {
            window[prd]._View.initShowMore(viewkey)
        } catch (e) {}
    if (void 0 != chunk)
        if ("seq" == chunk)
            try {
                var acs_activity = new Activity(data)
                  , activity = void 0 !== window[acs_activity.getPrd()].Activity ? new (window[acs_activity.getPrd()].Activity)(acs_activity) : acs_activity;
                window[acs_activity.getPrd()][acs_activity.getType()].render("showmore", viewkey, activity, !0)
            } catch (e) {}
        else if ("meta" == chunk) {
            AcsApi.viewlist[viewkey].morekey = data.morekey;
            try {
                window[prd]._View.completedShowMore(viewkey, data.size)
            } catch (e) {}
        }
}
,
AcsCallBack.handleShowMore = function(prd, viewkey, morekey, list) {
    AcsApi.viewlist[viewkey].morekey = morekey;
    try {
        window[prd]._View.initShowMore(viewkey)
    } catch (e) {}
    for (var i = 0; i < list.length; i++)
        try {
            var acs_activity = new Activity(list[i])
              , activity = void 0 !== window[acs_activity.getPrd()].Activity ? new (window[acs_activity.getPrd()].Activity)(acs_activity) : acs_activity;
            window[acs_activity.getPrd()][acs_activity.getType()].render("showmore", viewkey, activity, !0)
        } catch (e) {}
    try {
        window[prd]._View.completedShowMore(viewkey, list.length)
    } catch (e) {}
}
,
AcsCallBack.handleAutoCorrect = function(prd, viewkey, skey, sno, list, reset, morekey) {
    if (AcsApi.viewlist[viewkey].skey != skey || AcsApi.viewlist[viewkey].sno != sno) {
        if ("true" == reset)
            try {
                window[prd]._View.init(viewkey)
            } catch (e) {}
        AcsApi.viewlist[viewkey].skey = skey,
        AcsApi.viewlist[viewkey].sno = sno,
        morekey && (AcsApi.viewlist[viewkey].morekey = morekey);
        for (var i = list.length - 1; i >= 0; i--)
            try {
                var acs_activity = new Activity(list[i])
                  , activity = void 0 !== window[acs_activity.getPrd()].Activity ? new (window[acs_activity.getPrd()].Activity)(acs_activity) : acs_activity;
                window[acs_activity.getPrd()][acs_activity.getType()].render("autocorrect", viewkey, activity, !1)
            } catch (e) {}
    }
}
,
AcsCallBack.handleTimeline = function(prd, viewkey, name, start, end, list, morekey) {
    for (var tlist = new Array, i = 0; i < list.length; i++)
        try {
            var acs_activity = new Activity(list[i])
              , activity = void 0 !== window[acs_activity.getPrd()].Activity ? new (window[acs_activity.getPrd()].Activity)(acs_activity) : acs_activity;
            tlist.push(activity)
        } catch (e) {}
    try {
        window[prd]._View.renderTimeline(viewkey, name, start, end, tlist, morekey)
    } catch (e) {}
}
,
AcsCallBack.handleCrossProductNotification = function(prd, origin, unsBadge) {
    try {
        window[prd].Uns.handleCrossProductBadge(origin, unsBadge)
    } catch (e) {
        console.log(e)
    }
}
,
AcsCallBack.handleNotification = function(prd, data, unsNtfn, smsg) {
    try {
        if (window[prd].Uns.handleBadge(data, smsg, unsNtfn),
        void 0 != unsNtfn) {
            if (void 0 == AcsUtil.getPrd() || void 0 == AcsUtil.getRawSid())
                return;
            var cownerSid = AcsUtil.Cookie.get(AcsApi.getCkey());
            "" != cownerSid && cownerSid != AcsUtil.getRawSid() || (window[prd].Uns.handleDesktopNotification(unsNtfn),
            AcsDesktopNotification.setOwnerCookie(AcsApi.getCkey(), AcsUtil.getRawSid(), 1e4))
        }
    } catch (e) {}
}
,
AcsCallBack.handleNotificationList = function(prd, data, nfchannel, badge, renderType, reset, morekey, lbrtime, ntfntype, isunread) {
    try {
        if (reset && 1 == reset)
            try {
                window[prd]._View.initNotification(nfchannel)
            } catch (e) {}
        for (var ntfnList = new Array, i = 0; i < data.length; i++)
            ntfnList.push(new UnsNotification(data[i],prd));
        "new" == renderType && (ntfnList = ntfnList.reverse()),
        isunread && "true" == isunread ? window[prd].Uns.renderNotificationList(renderType, ntfnList, nfchannel, badge, morekey, lbrtime, ntfntype, isunread) : window[prd].Uns.renderNotificationList(renderType, ntfnList, nfchannel, badge, morekey, lbrtime, ntfntype)
    } catch (e) {}
}
,
AcsCallBack.handleInvoke = function(viewkey, prd, fdk, type, action, data) {
    try {
        window[prd][type].handleAction(viewkey, action, fdk, data)
    } catch (e) {}
}
,
AcsCallBack.handleInvokeError = function(viewkey, prd, fdk, type, action, aae) {
    try {
        window[prd][type].handleActionError(viewkey, action, fdk, aae)
    } catch (e) {}
}
,
AcsCallBack.handlePushActivity = function(viewkey, sno, act) {
    try {
        var acs_activity = new Activity(act)
          , activity = void 0 !== window[acs_activity.getPrd()].Activity ? new (window[acs_activity.getPrd()].Activity)(acs_activity) : acs_activity;
        if (window[acs_activity.getPrd()][acs_activity.getType()].renderNotification(viewkey, activity, !0),
        void 0 == AcsApi.viewlist[viewkey])
            return;
        if (AcsApi.viewlist[viewkey].sno < sno - 1)
            return void AcsApi.autoCorrect(viewkey);
        AcsApi.viewlist[viewkey].skey = activity.skey,
        AcsApi.viewlist[viewkey].sno = sno,
        window[acs_activity.getPrd()][acs_activity.getType()].render("push", viewkey, activity, !1)
    } catch (e) {}
}
,
AcsCallBack.handlePushPollResult = function(viewkey, sno, pObj) {
    if (void 0 == viewkey || void 0 != AcsApi.viewlist[viewkey]) {
        void 0 != viewkey && void 0 != sno && (AcsApi.viewlist[viewkey].sno = sno);
        var pollObj = new PollResult(pObj);
        try {
            window[pollObj.getPrd()][pollObj.getType()].updatePoll(viewkey, pollObj)
        } catch (e) {}
    }
}
,
AcsCallBack.handlePushDelete = function(viewkey, sno, dObj) {
    if (void 0 != AcsApi.viewlist[viewkey]) {
        AcsApi.viewlist[viewkey].sno = sno;
        try {
            window[dObj.prd][dObj.type].handleDelete(dObj.deltype, viewkey, dObj.fdk, dObj.cfdk)
        } catch (e) {}
    }
}
,
AcsResource.init = function() {
    void 0 == AcsResource.resourceobject && (AcsResource.resourceobject = new Object)
}
,
AcsResource.fetchResource = function(lang, rebrand) {
    var params = "lang=" + lang;
    void 0 != rebrand && "" != rebrand && (params += "&rebrand=" + rebrand);
    var response = AcsConnect.syncHttpPost(_acscontext + "/getresource" + _acsextn, params)
      , responseobj = JSON.parse(response);
    void 0 != responseobj[0].objString && null != responseobj[0].objString ? AcsResource.resourceobject = JSON.parse(responseobj[0].objString) : AcsResource.resourceobject = responseobj[0].objString
}
,
AcsResource.getRealValue = function(key, params) {
    try {
        var value = "";
        if (void 0 == this.resourceobject["" + key] || null == this.resourceobject["" + key])
            try {
                value = void 0 == opener.AcsResource.resourceobject["" + key] || null == opener.AcsResource.resourceobject["" + key] ? key : opener.AcsResource.resourceobject[key]
            } catch (ee) {
                value = key
            }
        else
            value = this.resourceobject[key];
        return value = value.replace(/_/g, " "),
        null == params || 0 == params.length ? value : value = AcsResource.replaceParams(value, params)
    } catch (e) {}
    try {
        return key.replace(/_/g, " ")
    } catch (e) {
        return ""
    }
}
,
AcsResource.replaceParams = function(value, params) {
    for (var i = 0; i < params.length; i++) {
        var token = params[i]
          , regexp = new RegExp("\\$" + (i + 1),"g");
        value = value.replace(regexp, token)
    }
    return value
}
,
AcsConnect.getRequest = function() {
    var xmlHttp;
    try {
        xmlHttp = new ActiveXObject("Msxml2.XMLHTTP")
    } catch (e) {
        try {
            xmlHttp = new ActiveXObject("Microsoft.XMLHTTP")
        } catch (e) {
            xmlHttp = !1
        }
    }
    return xmlHttp || "undefined" == typeof XMLHttpRequest || (xmlHttp = new XMLHttpRequest),
    xmlHttp
}
,
AcsConnect.httpPost = function(id, url, param, att) {
    var req = AcsConnect.getRequest();
    req.open("POST", url, !0),
    req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");
    var csrf = AcsApi.getCSRF();
    param = param ? param + "&" + csrf : csrf,
    req.send(param),
    req.onreadystatechange = function() {
        4 == req.readyState && AcsConnect.handleHttpPost(id, req.responseText, att)
    }
}
,
AcsConnect.httpProgressive = function(id, url, param, att) {
    (new Date).getTime();
    var req = AcsConnect.getRequest();
    req.open("POST", url, !0),
    req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");
    var csrf = AcsApi.getCSRF();
    param = param ? param + "&" + csrf : csrf,
    req.send(param);
    var readPos = 0;
    req.onreadystatechange = function() {
        if (3 == req.readyState) {
            var pdata = "[]";
            try {
                for ((txt = req.responseText).lastIndexOf(",") == txt.length - 1 && (txt = txt.substring(0, txt.length - 1)),
                pdata = JSON.parse("[" + txt + "]"); readPos < pdata.length; )
                    AcsApi.handleProgressiveCallBack(0 == readPos, "chunk", id, pdata[readPos], att),
                    readPos++
            } catch (e) {}
        } else if (4 == req.readyState)
            try {
                var txt;
                (txt = req.responseText).lastIndexOf(",") == txt.length - 1 && (txt = txt.substring(0, txt.length - 1)),
                pdata = JSON.parse("[" + txt + "]");
                try {
                    for (; readPos < pdata.length; )
                        AcsApi.handleProgressiveCallBack(0 == readPos, "chunk", id, pdata[readPos], att),
                        readPos++,
                        0
                } catch (e1) {
                    AcsApi.handleProgressiveCallBack(!0, "full", id, pdata, att)
                }
            } catch (e) {}
    }
}
,
AcsConnect.syncHttpPost = function(url, param) {
    var req = AcsConnect.getRequest();
    req.open("POST", url, !1),
    req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8"),
    req.setRequestHeader("Content-length", param.length),
    req.setRequestHeader("Connection", "close");
    var csrf = AcsApi.getCSRF();
    if (param = param ? param + "&" + csrf : csrf,
    req.send(param),
    200 == req.status)
        return req.responseText
}
,
AcsConnect.handleHttpPost = function(id, response, att) {
    try {
        var responseObj;
        "error" == (responseObj = JSON.parse(response))[0].objType ? AcsApi.handleCallBackError(id, responseObj[0].objString, att) : AcsApi.handleCallBack(id, responseObj[0].objString, att)
    } catch (e) {}
}
,
AcsDesktopNotification = {},
AcsDesktopNotification.hasOwnerAssigned = !1,
AcsDesktopNotification.setOwnerCookie = function(name, value, expire) {
    AcsDesktopNotification.hasOwnerAssigned = !0,
    AcsUtil.Cookie.set(name, value, expire)
}
,
AcsDesktopNotification.init = function() {
    _acsie ? document.attachEvent("onclick", AcsDesktopNotification.reqPerm) : document.addEventListener("click", AcsDesktopNotification.reqPerm, !0),
    AcsDesktopNotification.syncOwner()
}
,
AcsDesktopNotification.reqPerm = function() {
    try {
        "webkitNotifications"in window ? 0 != window.webkitNotifications.checkPermission() && window.webkitNotifications.requestPermission() : "Notification"in window && "granted" !== Notification.permission && Notification.requestPermission()
    } catch (e) {}
}
,
AcsDesktopNotification.show = function(photo, title, desc, showtime, prd, onclickParams) {
    try {
        try {
            AcsDesktopNotification.close()
        } catch (e) {}
        "webkitNotifications"in window ? (AcsDesktopNotification.nobj = window.webkitNotifications.createNotification(photo, title, desc),
        AcsDesktopNotification.nobj.show()) : "Notification"in window && (AcsDesktopNotification.nobj = new Notification(title,{
            dir: "auto",
            body: desc,
            tag: "acs",
            icon: photo
        })),
        AcsDesktopNotification.nobj.onclick = function() {
            try {
                window.focus(),
                void 0 !== onclickParams && window[prd].Uns.handleNotificationClick(onclickParams),
                AcsDesktopNotification.close()
            } catch (e) {}
        }
        ,
        AcsDesktopNotification.closetimer = setTimeout(function() {
            AcsDesktopNotification.close()
        }, 1e3 * showtime)
    } catch (e) {}
}
,
AcsDesktopNotification.close = function() {
    try {
        clearTimeout(AcsDesktopNotification.closetimer),
        "webkitNotifications"in window ? AcsDesktopNotification.nobj.cancel() : "Notification"in window && AcsDesktopNotification.nobj.close()
    } catch (e) {}
}
,
AcsDesktopNotification.syncOwner = function() {
    if (setTimeout(function() {
        AcsDesktopNotification.syncOwner()
    }, 4e3),
    this.isOwner()) {
        var cownerSid = AcsUtil.Cookie.get(AcsApi.getCkey());
        AcsDesktopNotification.setOwnerCookie(AcsApi.getCkey(), cownerSid, 1e4)
    }
}
,
AcsDesktopNotification.isOwner = function() {
    try {
        if (!AcsDesktopNotification.hasOwnerAssigned)
            return !0;
        if (void 0 == AcsUtil.getPrd() || void 0 == AcsUtil.getRawSid())
            return !1;
        var cownerSid = AcsUtil.Cookie.get(AcsApi.getCkey());
        return "" != cownerSid && cownerSid == AcsUtil.getRawSid()
    } catch (e) {
        return !1
    }
}
,
_acsie ? window.attachEvent("onbeforeunload", function() {
    AcsUtil.Cookie.remove(AcsApi.getCkey())
}) : window.addEventListener("onbeforeunload", function() {
    AcsUtil.Cookie.remove(AcsApi.getCkey())
});
var AcsUtil = {
    getPrd: function() {
        return "undefined" != typeof WebMessanger ? WebMessanger.getPrd() : WmsLite.prd
    },
    getRawSid: function() {
        return "undefined" != typeof WebMessanger ? WebMessanger.getRawSid() : WmsLite.rsid
    },
    Cookie: {
        get: function(key) {
            if (void 0 != AcsUtil.getPrd()) {
                key = AcsUtil.getPrd() + key;
                var init = document.cookie.indexOf(key)
                  , cookielength = document.cookie.length
                  , value = null;
                if (-1 != init) {
                    var beginIndex = init + key.length;
                    -1 != (value = document.cookie.substr(beginIndex + 1, cookielength)).indexOf(";") && (value = value.substring(0, value.indexOf(";")))
                }
                return value && decodeURIComponent(value) || ""
            }
        },
        set: function(key, value, expiryTime) {
            if (void 0 !== value && void 0 !== key && void 0 != AcsUtil.getPrd()) {
                key = AcsUtil.getPrd() + key;
                var expDate = new Date;
                return null != expiryTime && "" != expiryTime || (expiryTime = 2592e6),
                expDate.setTime(expDate.getTime() + expiryTime),
                document.cookie = key + "= " + encodeURIComponent(value) + ";expires= " + expDate.toGMTString() + ";path= /",
                !0
            }
        },
        getCustomCookie: function(key) {
            for (var cookie = document.cookie.split("; "), i = 0; i < cookie.length; i++) {
                var kv = cookie[i].split("=");
                if (kv[0] === key)
                    return kv[1]
            }
            return ""
        },
        remove: function(key) {
            var cval = AcsUtil.Cookie.get(key);
            if (cval) {
                key = AcsUtil.getPrd() + key;
                var expDate = new Date;
                document.cookie = key + "=;expires= " + expDate.toGMTString() + "; path= /"
            }
            return cval
        }
    }
}
  , ZPLoader = {
    POS: 0,
    LOADED: 0,
    ISDONE: !1,
    PATH: {},
    CONSTANTS: {},
    init: function(len) {
        len = (void 0 == len ? 6 : len) + ZPLoader.POS;
        ZPLoader.start(ZPLoader.generate(["zpfont.css", "zp_css_1.css", "zp_css_2.css", "zp_css_4.css", "tp.2.min.js", "common.2.min.js", "common.3.min.js", "common.4.min.js", "appraisal.2.min.js", "attendance.2.min.js", "timetracker.2.min.js", "apps.min.js", "form.2.min.js", "leave.2.min.js", "automation.min.js", "zpeditor.min.js", "dropdown.min.js", "lms.1.min.js", "onboarding.min.js"], len, 0))
    },
    CURRENT: {},
    generate: function(list, len, pos, cback) {
        return {
            len: list && "object" == typeof list ? list.length : len,
            pos: pos,
            list: list,
            cback: cback,
            loaded: 0
        }
    },
    start: function(obj) {
        for (ZPLoader.CURRENT = obj,
        obj.pos; obj.pos < obj.len; obj.pos++) {
            var fname = obj.list[obj.pos]
              , isAllowedToLoad = !0;
            if (void 0 === fname)
                break;
            -1 !== fname.indexOf(".css") && 0 !== $("head").find('link[href="' + ZPLoader.PATH.CSS + fname + '"]').length ? isAllowedToLoad = !1 : -1 === fname.indexOf(".js") || 0 === $("head").find('script[src="' + ZPLoader.PATH.JS + fname + '"]').length && 0 === $("head").find('script[src="' + ZPLoader.PATH.JS1 + fname + '"]').length && 0 === $("head").find('script[src="' + ZPLoader.PATH.JS2 + fname + '"]').length || (isAllowedToLoad = !1),
            isAllowedToLoad ? -1 !== fname.indexOf(".css") ? document.head.appendChild(ZPLoader.getCSS(ZPLoader.PATH.CSS + fname, ZPLoader.finish)) : ZPLoader.PATH.JS1 && obj.pos < 6 ? document.head.appendChild(ZPLoader.getScript(ZPLoader.PATH.JS1 + fname, ZPLoader.finish)) : ZPLoader.PATH.JS2 && obj.pos < 12 ? document.head.appendChild(ZPLoader.getScript(ZPLoader.PATH.JS2 + fname, ZPLoader.finish)) : document.head.appendChild(ZPLoader.getScript(ZPLoader.PATH.JS + fname, ZPLoader.finish)) : (ZPLoader.CURRENT.loaded++,
            ZPLoader.CURRENT.loaded === ZPLoader.CURRENT.list.length && ZPUtil.Validation.isFunction(ZPLoader.CURRENT.cback) && ZPLoader.CURRENT.cback())
        }
    },
    finish: function() {
        ZPLoader.CURRENT.loaded++,
        ZPLoader.CURRENT.pos !== ZPLoader.CURRENT.list.length && (ZPLoader.CURRENT.len = ZPLoader.CURRENT.pos + 1,
        ZPLoader.start(ZPLoader.CURRENT)),
        ZPLoader.CURRENT.loaded === ZPLoader.CURRENT.list.length && (ZPUtil.Validation.isFunction(ZPLoader.CURRENT.cback) ? ZPLoader.CURRENT.cback() : (ZPLoader.ISDONE = !0,
        ZPeople.setUp(),
        ZPLoader.loadWms(),
        ZPLoader.loadMics()))
    },
    getScript: function(src, cback) {
        var script = document.createElement("script");
        return script.type = "text/javascript",
        script.src = src,
        script.async = !0,
        ZPUtil.Validation.isFunction(cback) && (script.onload = script.onerror = cback),
        script
    },
    getCSS: function(cssurl, cback) {
        var css = document.createElement("link");
        return css.type = "text/css",
        css.rel = "stylesheet",
        css.href = cssurl,
        ZPUtil.Validation.isFunction(cback) && (css.onload = css.onerror = cback),
        css
    },
    loadWms: function() {
        document.head.appendChild(ZPLoader.getCSS(ZPLoader.PATH.WMS_CSS)),
        document.head.appendChild(ZPLoader.getScript(ZPLoader.PATH.WMS_JS, ZPeople.initWms))
    },
    loadMics: function() {
        document.head.appendChild(ZPLoader.getCSS(ZPLoader.PATH.MICS_CSS)),
        document.head.appendChild(ZPLoader.getScript(ZPLoader.PATH.MICS_JS, ZPeople.initMics))
    }
};
function ZE_Init() {}
ZE_Init.init = function(toolbarOrderarray) {
    ZE_Init.needplaintext = !0,
    ZE_Init.editorCSS = !0,
    ZE_Init.inlineQuotes = !0,
    ZE_Init.modeChange = void 0,
    ZE_Init.spellcheckURL = "lt.zoho.com",
    ZE_Init.domain = "zoho.com",
    ZE_Init.tabKeyHandling = !0,
    ZE_Init.needEditorFocus = !0,
    ZE_Init.needEditorBorder = !1,
    ZE_Init.needResizeImage = !0,
    ZE_Init.removeInsertOptions = !1,
    ZE_Init.removeFontFamily = !1,
    ZE_Init.removeFontSize = !1,
    ZE_Init.defaultFontSize = "15px",
    ZE_Init.theme = "gray",
    ZE_Init.defaultFontFamily = "LatoWeb",
    ZE_Init.defaultFontColor = "blue",
    ZE_Init.outGoingFontFamily = "LatoWeb",
    ZE_Init.outGoingFontSize = "",
    ZE_Init.outGoingColor = "",
    ZE_Init.maxImageUploadSize = 5,
    ZE_Init.avoidMoreOption = !1,
    ZE_Init.avoidDropHandle = !0,
    ZE_Init.toolbarOrder = toolbarOrderarray,
    void 0 === ZE_Init.toolbarOrder && (ZE_Init.toolbarOrder = [[["bold", "Bold (Ctrl+B)", "zei-bold"], ["italic", "Italic (Ctrl+I)", "zei-italic"], ["underline", "Underline (Ctrl+U)", "zei-underline"], ["strikethrough", "Strikethrough", "zei-strike"]], [["fontfamily", "Font", "zei-fontfamily"]], [["fontsize", "Font Size", "zei-arrow"]], [["forecolor", "Font color", "zei-textclr"], ["backcolor", "Background Color", "zei-bgclr"]], [["alignoptions", "Fontstyle Options", "zei-textleft"], ["listoptions", "List Options", "zei-unorder"], ["indentoptions", "Indent Options", "zei-outdent"]], [["image", "Insert Image", "zei-image"], ["link", "Insert Link", "zei-link"]], [["insertHTML", "Insert HTML", "zei-html"], ["quote", "Insert Quote", "zei-quote"], ["removeformat", "Remove Formatting", "zei-removeformat"]], [["tableGrid", "Insert Table", "zei-table"], ["inserthorizontalrule", "Insert Horizontal Rule", "zei-line"]]]),
    ZE_Init.insertOptions = [["table", "Insert Table", "ze_tbl"], ["inserthorizontalrule", "Insert Horizontal Rule", "ze_hr"], ["insertHTML", "Insert HTML", "ze_html"], ["code", "Insert Code", "ze_icode"], ["quote", "Insert Quote", "ze_quote"]],
    ZE_Init.align = [{
        htm: "Align Left (Ctrl+L)",
        datAttr: "justifyleft"
    }, {
        htm: "Align Right (Ctrl+R)",
        datAttr: "justifyright"
    }, {
        htm: "Justify (Ctrl+J)",
        datAttr: "justifyfull"
    }, {
        htm: "Center (Ctrl+E)",
        datAttr: "justifycenter"
    }],
    ZE_Init.list = [{
        htm: "Bullets",
        datAttr: "insertunorderedlist"
    }, {
        htm: "Numbering",
        datAttr: "insertorderedlist"
    }],
    ZE_Init.indent = [{
        htm: "Increase Indent",
        datAttr: "indent"
    }, {
        htm: "Decrease Indent",
        datAttr: "outdent"
    }],
    ZE_Init.others = [{
        htm: "Spell Check",
        datAttr: "spellcheck"
    }],
    ZE_Init.fontfamily = [{
        htm: "Serif",
        ff: "serif"
    }, {
        htm: "Courier New",
        ff: "'courier new',courier,monospace"
    }, {
        htm: "Georgia",
        ff: "georgia,times new roman,times,serif"
    }, {
        htm: "Tahoma",
        ff: "tahoma,helvetica,sans-serif"
    }, {
        htm: "Times New Roman",
        ff: "'times new roman',times,serif"
    }, {
        htm: "Trebuchet",
        ff: "'trebuchet ms',helvetica,sans-serif"
    }, {
        htm: "Verdana",
        ff: "verdana"
    }, {
        htm: "Comic Sans MS",
        ff: "'Comic Sans MS'"
    }, {
        htm: "Calibri",
        ff: "Calibri, Verdana,  sans-serif"
    }],
    ZE_Init.fontsize = [{
        htm: "8",
        datAttr: "1"
    }, {
        htm: "10",
        datAttr: "2"
    }, {
        htm: "12",
        datAttr: "3"
    }, {
        htm: "14",
        datAttr: "4"
    }, {
        htm: "18",
        datAttr: "5"
    }, {
        htm: "24",
        datAttr: "6"
    }, {
        htm: "36",
        datAttr: "7"
    }],
    ZE_Init.insertOptions = [["image", "Insert Image", "ze_tim"], ["smiley", "Insert smiley", "ze_tis"], ["link", "Insert Link", "ze_til"], ["table", "Insert Table", "ze_tbl"], ["inserthorizontalrule", "Insert Horizontal Rule", "ze_hr"], ["insertHTML", "Insert HTML", "ze_html"], ["code", "Insert Code", "ze_icode"], ["quote", "Insert Quote", "ze_quote"]],
    ZE_Init.imgAction = "/" + portalName + "/zeUploadImage",
    ZE_Init.fileUpload = function(editor, files, evt) {}
}
,
ZE_Init.attach = function(edi_cmpId) {}
,
ZE_Init.loadURL = function(URL, type) {
    var css, _script, _document = document;
    "css" === type ? ((css = _document.createElement("link")).type = "text/css",
    css.rel = "stylesheet",
    css.href = URL,
    _document.getElementsByTagName("head")[0].appendChild(css)) : "js" === type && ((_script = _document.createElement("script")).type = "text/javascript",
    _script.src = URL,
    _document.getElementsByTagName("head")[0].appendChild(_script))
}
,
ZE_Init.ElementInArray = function(array, value) {
    for (var element; element = array.shift(); )
        if (element === value)
            return element
}
,
ZE_Init.initialiseCommonSteps = function() {
    ZE_Init.staticVersion = "v75",
    ZE_Init.context = "people",
    ZE_Init.csrfCookieVal = csrfToken,
    ZE_Init.csrfParamVal = csrfParamName,
    ZE_Init.language = "en",
    ZE_Init.smileyPath = "people/ze/images/",
    ZE_Init.imgPath = "/ze",
    ZE_Init.cssPath = "https://localjs.zohostatic.com/ze/" + ZE_Init.staticVersion + "/zep",
    ZE_Init.jsPath = "https://localjs.zohostatic.com/ze/" + ZE_Init.staticVersion + "/zep",
    ZE_Init.setContentProcessed = !1,
    agt = navigator.userAgent.toLowerCase(),
    ZE_Init.is_ie = -1 !== agt.indexOf("ie"),
    ZE_Init.is_safari = -1 !== agt.indexOf("safari"),
    ZE_Init.is_opera = -1 !== agt.indexOf("opera"),
    ZE_Init.is_mac = -1 !== agt.indexOf("mac"),
    ZE_Init.language = ZE_Init.ElementInArray(["en", "zh", "da", "nl", "fr", "de", "hu", "it", "ja", "pl", "pt", "ru", "es", "sv", "tr", "uk"], ZE_Init.language) || "en",
    ZE_Init.is_opera && ZE_Init.toolbarOrder.pop(),
    ZE_Init.loadURL("/ze/css/editor.min.css", "css"),
    ZE_Init.loading = !0
}
;
